
c:/Users/aiden/Desktop/IoT-Engineering/VisualStudioCodeProjects/IoT_Lab12/target/3.3.0/argon/IoT_Lab12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005ce4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9d00  000b9d00  00009d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9d24  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e510  000b9d28  0001e510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000274  2003e57c  2003e57c  0002e57c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9d94  000b9d94  00029d94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9dbc  000b9dbc  00029dbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016b695  00000000  00000000  00029dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019c62  00000000  00000000  00195455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004b0ae  00000000  00000000  001af0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003648  00000000  00000000  001fa165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bd30  00000000  00000000  001fd7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046983  00000000  00000000  002094dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005946f  00000000  00000000  0024fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b3c7  00000000  00000000  002a92cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a088  00000000  00000000  003e4698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fa5d 	bl	b84ec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fa65 	bl	b8508 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e510 	.word	0x2003e510
   b4048:	000b9d28 	.word	0x000b9d28
   b404c:	2003e57c 	.word	0x2003e57c
   b4050:	2003e57c 	.word	0x2003e57c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fa3f 	bl	b74e0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b9cdc 	.word	0x000b9cdc
   b407c:	000b9d00 	.word	0x000b9d00

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bd78 	b.w	b4b74 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fc59 	bl	b493c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b9df 	b.w	b7450 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 bec7 	b.w	b6e24 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 bec5 	b.w	b6e24 <malloc>

000b409a <_ZdaPv>:
   b409a:	f002 becb 	b.w	b6e34 <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bec9 	b.w	b6e34 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fe06 	bl	b6cbc <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b69ad 	.word	0x000b69ad
   b40b8:	000b87b8 	.word	0x000b87b8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z8callbackPcPhj>:
#define LIGHT D7

String message;

void callback(char *topic, byte *payload, unsigned int length)
{
   b40cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    char p[length + 1];
   b40ce:	f102 0308 	add.w	r3, r2, #8
{
   b40d2:	b085      	sub	sp, #20
    char p[length + 1];
   b40d4:	f023 0307 	bic.w	r3, r3, #7
{
   b40d8:	af00      	add	r7, sp, #0
    char p[length + 1];
   b40da:	ebad 0d03 	sub.w	sp, sp, r3
{
   b40de:	4614      	mov	r4, r2
    memcpy(p, payload, length);
   b40e0:	4668      	mov	r0, sp
   b40e2:	f004 fa03 	bl	b84ec <memcpy>
    p[length] = NULL;
   b40e6:	2300      	movs	r3, #0

    if (String(p).equals("1"))
   b40e8:	4669      	mov	r1, sp
   b40ea:	4638      	mov	r0, r7
    p[length] = NULL;
   b40ec:	f80d 3004 	strb.w	r3, [sp, r4]
    if (String(p).equals("1"))
   b40f0:	f003 f825 	bl	b713e <_ZN6StringC1EPK19__FlashStringHelper>
   b40f4:	493f      	ldr	r1, [pc, #252]	; (b41f4 <_Z8callbackPcPhj+0x128>)
   b40f6:	4638      	mov	r0, r7
   b40f8:	f003 f869 	bl	b71ce <_ZNK6String6equalsEPKc>
   b40fc:	4604      	mov	r4, r0
   b40fe:	4638      	mov	r0, r7
   b4100:	f002 ffd2 	bl	b70a8 <_ZN6StringD1Ev>
   b4104:	b134      	cbz	r4, b4114 <_Z8callbackPcPhj+0x48>
    {
        digitalWrite(LIGHT, HIGH);
   b4106:	2101      	movs	r1, #1
    }
    else if (String(p).equals("0"))
    {
        digitalWrite(LIGHT, LOW);
   b4108:	2007      	movs	r0, #7
   b410a:	f003 ffe8 	bl	b80de <digitalWrite>
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println(String(p));
        display.display();
    }
}
   b410e:	3714      	adds	r7, #20
   b4110:	46bd      	mov	sp, r7
   b4112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (String(p).equals("0"))
   b4114:	4669      	mov	r1, sp
   b4116:	4638      	mov	r0, r7
   b4118:	f003 f811 	bl	b713e <_ZN6StringC1EPK19__FlashStringHelper>
   b411c:	4936      	ldr	r1, [pc, #216]	; (b41f8 <_Z8callbackPcPhj+0x12c>)
   b411e:	4638      	mov	r0, r7
   b4120:	f003 f855 	bl	b71ce <_ZNK6String6equalsEPKc>
   b4124:	4605      	mov	r5, r0
   b4126:	4638      	mov	r0, r7
   b4128:	f002 ffbe 	bl	b70a8 <_ZN6StringD1Ev>
   b412c:	b10d      	cbz	r5, b4132 <_Z8callbackPcPhj+0x66>
        digitalWrite(LIGHT, LOW);
   b412e:	4621      	mov	r1, r4
   b4130:	e7ea      	b.n	b4108 <_Z8callbackPcPhj+0x3c>
    else if (String(p).equals("a"))
   b4132:	4669      	mov	r1, sp
   b4134:	4638      	mov	r0, r7
   b4136:	f003 f802 	bl	b713e <_ZN6StringC1EPK19__FlashStringHelper>
   b413a:	4930      	ldr	r1, [pc, #192]	; (b41fc <_Z8callbackPcPhj+0x130>)
   b413c:	4638      	mov	r0, r7
   b413e:	f003 f846 	bl	b71ce <_ZNK6String6equalsEPKc>
   b4142:	4606      	mov	r6, r0
   b4144:	4638      	mov	r0, r7
   b4146:	f002 ffaf 	bl	b70a8 <_ZN6StringD1Ev>
   b414a:	b166      	cbz	r6, b4166 <_Z8callbackPcPhj+0x9a>
        display.clearDisplay();
   b414c:	4c2c      	ldr	r4, [pc, #176]	; (b4200 <_Z8callbackPcPhj+0x134>)
   b414e:	4620      	mov	r0, r4
   b4150:	f002 f8a8 	bl	b62a4 <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.println("Button A was pressed.");
   b4154:	492b      	ldr	r1, [pc, #172]	; (b4204 <_Z8callbackPcPhj+0x138>)
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4156:	6125      	str	r5, [r4, #16]
        display.println("Button C was pressed.");
   b4158:	4620      	mov	r0, r4
   b415a:	f003 f8a2 	bl	b72a2 <_ZN5Print7printlnEPKc>
        display.display();
   b415e:	4620      	mov	r0, r4
   b4160:	f002 fb0e 	bl	b6780 <_ZN16Adafruit_SSD13067displayEv>
}
   b4164:	e7d3      	b.n	b410e <_Z8callbackPcPhj+0x42>
    else if (String(p).equals("b"))
   b4166:	4669      	mov	r1, sp
   b4168:	4638      	mov	r0, r7
   b416a:	f002 ffe8 	bl	b713e <_ZN6StringC1EPK19__FlashStringHelper>
   b416e:	4926      	ldr	r1, [pc, #152]	; (b4208 <_Z8callbackPcPhj+0x13c>)
   b4170:	4638      	mov	r0, r7
   b4172:	f003 f82c 	bl	b71ce <_ZNK6String6equalsEPKc>
   b4176:	4605      	mov	r5, r0
   b4178:	4638      	mov	r0, r7
   b417a:	f002 ff95 	bl	b70a8 <_ZN6StringD1Ev>
   b417e:	b135      	cbz	r5, b418e <_Z8callbackPcPhj+0xc2>
        display.clearDisplay();
   b4180:	4c1f      	ldr	r4, [pc, #124]	; (b4200 <_Z8callbackPcPhj+0x134>)
   b4182:	4620      	mov	r0, r4
   b4184:	f002 f88e 	bl	b62a4 <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.println("Button B was pressed.");
   b4188:	4920      	ldr	r1, [pc, #128]	; (b420c <_Z8callbackPcPhj+0x140>)
   b418a:	6126      	str	r6, [r4, #16]
   b418c:	e7e4      	b.n	b4158 <_Z8callbackPcPhj+0x8c>
    else if (String(p).equals("c"))
   b418e:	4669      	mov	r1, sp
   b4190:	4638      	mov	r0, r7
   b4192:	f002 ffd4 	bl	b713e <_ZN6StringC1EPK19__FlashStringHelper>
   b4196:	491e      	ldr	r1, [pc, #120]	; (b4210 <_Z8callbackPcPhj+0x144>)
   b4198:	4638      	mov	r0, r7
   b419a:	f003 f818 	bl	b71ce <_ZNK6String6equalsEPKc>
   b419e:	4604      	mov	r4, r0
   b41a0:	4638      	mov	r0, r7
   b41a2:	f002 ff81 	bl	b70a8 <_ZN6StringD1Ev>
   b41a6:	b134      	cbz	r4, b41b6 <_Z8callbackPcPhj+0xea>
        display.clearDisplay();
   b41a8:	4c15      	ldr	r4, [pc, #84]	; (b4200 <_Z8callbackPcPhj+0x134>)
   b41aa:	4620      	mov	r0, r4
   b41ac:	f002 f87a 	bl	b62a4 <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.println("Button C was pressed.");
   b41b0:	4918      	ldr	r1, [pc, #96]	; (b4214 <_Z8callbackPcPhj+0x148>)
   b41b2:	6125      	str	r5, [r4, #16]
   b41b4:	e7d0      	b.n	b4158 <_Z8callbackPcPhj+0x8c>
    else if (String(p) != message)
   b41b6:	4669      	mov	r1, sp
   b41b8:	4638      	mov	r0, r7
   b41ba:	f002 ffc0 	bl	b713e <_ZN6StringC1EPK19__FlashStringHelper>
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b41be:	4916      	ldr	r1, [pc, #88]	; (b4218 <_Z8callbackPcPhj+0x14c>)
   b41c0:	4638      	mov	r0, r7
   b41c2:	f002 fff7 	bl	b71b4 <_ZNK6String6equalsERKS_>
   b41c6:	4605      	mov	r5, r0
   b41c8:	4638      	mov	r0, r7
   b41ca:	f002 ff6d 	bl	b70a8 <_ZN6StringD1Ev>
   b41ce:	2d00      	cmp	r5, #0
   b41d0:	d19d      	bne.n	b410e <_Z8callbackPcPhj+0x42>
        display.clearDisplay();
   b41d2:	4c0b      	ldr	r4, [pc, #44]	; (b4200 <_Z8callbackPcPhj+0x134>)
   b41d4:	4620      	mov	r0, r4
   b41d6:	f002 f865 	bl	b62a4 <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.println(String(p));
   b41da:	4669      	mov	r1, sp
   b41dc:	6125      	str	r5, [r4, #16]
   b41de:	4638      	mov	r0, r7
   b41e0:	f002 ffad 	bl	b713e <_ZN6StringC1EPK19__FlashStringHelper>
   b41e4:	6839      	ldr	r1, [r7, #0]
   b41e6:	4620      	mov	r0, r4
   b41e8:	f003 f85b 	bl	b72a2 <_ZN5Print7printlnEPKc>
   b41ec:	4638      	mov	r0, r7
   b41ee:	f002 ff5b 	bl	b70a8 <_ZN6StringD1Ev>
   b41f2:	e7b4      	b.n	b415e <_Z8callbackPcPhj+0x92>
   b41f4:	000b87cd 	.word	0x000b87cd
   b41f8:	000b87cf 	.word	0x000b87cf
   b41fc:	000b87d1 	.word	0x000b87d1
   b4200:	2003e638 	.word	0x2003e638
   b4204:	000b87d3 	.word	0x000b87d3
   b4208:	000b87e9 	.word	0x000b87e9
   b420c:	000b87eb 	.word	0x000b87eb
   b4210:	000b9bd7 	.word	0x000b9bd7
   b4214:	000b8801 	.word	0x000b8801
   b4218:	2003e6a8 	.word	0x2003e6a8

000b421c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b421c:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b421e:	f002 fbcd 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4222:	4b03      	ldr	r3, [pc, #12]	; (b4230 <_ZN10CloudClass7processEv+0x14>)
   b4224:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b4226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b422a:	f002 bde3 	b.w	b6df4 <spark_process>
   b422e:	bf00      	nop
   b4230:	2003e740 	.word	0x2003e740

000b4234 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	b12b      	cbz	r3, b4244 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4238:	6842      	ldr	r2, [r0, #4]
   b423a:	4293      	cmp	r3, r2
   b423c:	d202      	bcs.n	b4244 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b423e:	4618      	mov	r0, r3
   b4240:	f004 b94c 	b.w	b84dc <atoi>
   b4244:	2000      	movs	r0, #0
   b4246:	4770      	bx	lr

000b4248 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4248:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b424a:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b424c:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b424e:	b145      	cbz	r5, b4262 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4250:	6843      	ldr	r3, [r0, #4]
   b4252:	429d      	cmp	r5, r3
   b4254:	d205      	bcs.n	b4262 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4256:	4628      	mov	r0, r5
   b4258:	f004 f996 	bl	b8588 <strlen>
   b425c:	3001      	adds	r0, #1
   b425e:	4405      	add	r5, r0
   b4260:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4262:	4620      	mov	r0, r4
   b4264:	bd38      	pop	{r3, r4, r5, pc}

000b4266 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4268:	4604      	mov	r4, r0
   b426a:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b426c:	460d      	mov	r5, r1
   b426e:	b921      	cbnz	r1, b427a <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4270:	6803      	ldr	r3, [r0, #0]
   b4272:	1c7a      	adds	r2, r7, #1
   b4274:	6042      	str	r2, [r0, #4]
   b4276:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b427a:	4608      	mov	r0, r1
   b427c:	f004 f984 	bl	b8588 <strlen>
    if (len + l > buff_size)
   b4280:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4282:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4284:	19f2      	adds	r2, r6, r7
   b4286:	429a      	cmp	r2, r3
   b4288:	d8f6      	bhi.n	b4278 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b428a:	6820      	ldr	r0, [r4, #0]
   b428c:	4632      	mov	r2, r6
   b428e:	4629      	mov	r1, r5
   b4290:	4438      	add	r0, r7
   b4292:	f004 f92b 	bl	b84ec <memcpy>
    len += l;
   b4296:	6860      	ldr	r0, [r4, #4]
   b4298:	4430      	add	r0, r6
   b429a:	6060      	str	r0, [r4, #4]
   b429c:	e7ec      	b.n	b4278 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b42a0 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b42a0:	b538      	push	{r3, r4, r5, lr}
   b42a2:	4604      	mov	r4, r0
   b42a4:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b42a6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b42aa:	6825      	ldr	r5, [r4, #0]
   b42ac:	4a04      	ldr	r2, [pc, #16]	; (b42c0 <_ZN10BlynkParam3addEi+0x20>)
   b42ae:	1a09      	subs	r1, r1, r0
   b42b0:	4428      	add	r0, r5
   b42b2:	f002 fdcf 	bl	b6e54 <snprintf>
   b42b6:	6863      	ldr	r3, [r4, #4]
   b42b8:	3001      	adds	r0, #1
   b42ba:	4403      	add	r3, r0
   b42bc:	6063      	str	r3, [r4, #4]
    }
   b42be:	bd38      	pop	{r3, r4, r5, pc}
   b42c0:	000b8817 	.word	0x000b8817

000b42c4 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b42c4:	b538      	push	{r3, r4, r5, lr}
   b42c6:	4604      	mov	r4, r0
   b42c8:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b42ca:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b42ce:	6825      	ldr	r5, [r4, #0]
   b42d0:	4a04      	ldr	r2, [pc, #16]	; (b42e4 <_ZN10BlynkParam3addEl+0x20>)
   b42d2:	1a09      	subs	r1, r1, r0
   b42d4:	4428      	add	r0, r5
   b42d6:	f002 fdbd 	bl	b6e54 <snprintf>
   b42da:	6863      	ldr	r3, [r4, #4]
   b42dc:	3001      	adds	r0, #1
   b42de:	4403      	add	r3, r0
   b42e0:	6063      	str	r3, [r4, #4]
    }
   b42e2:	bd38      	pop	{r3, r4, r5, pc}
   b42e4:	000b881a 	.word	0x000b881a

000b42e8 <BlynkWidgetWrite1>:

MQTT client("lab.thewcl.com", 1883, callback);

BLYNK_WRITE(V1)
{
   b42e8:	b510      	push	{r4, lr}
    message = param.asStr();
   b42ea:	4c06      	ldr	r4, [pc, #24]	; (b4304 <BlynkWidgetWrite1+0x1c>)
   b42ec:	6809      	ldr	r1, [r1, #0]
   b42ee:	4620      	mov	r0, r4
   b42f0:	f002 ff39 	bl	b7166 <_ZN6StringaSEPKc>
    client.publish("christianity", message);
   b42f4:	6822      	ldr	r2, [r4, #0]
   b42f6:	4904      	ldr	r1, [pc, #16]	; (b4308 <BlynkWidgetWrite1+0x20>)
   b42f8:	4804      	ldr	r0, [pc, #16]	; (b430c <BlynkWidgetWrite1+0x24>)
}
   b42fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    client.publish("christianity", message);
   b42fe:	f001 bcb8 	b.w	b5c72 <_ZN4MQTT7publishEPKcS1_>
   b4302:	bf00      	nop
   b4304:	2003e6a8 	.word	0x2003e6a8
   b4308:	000b881e 	.word	0x000b881e
   b430c:	2003e5d8 	.word	0x2003e5d8

000b4310 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4310:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4312:	2300      	movs	r3, #0
   b4314:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4316:	6800      	ldr	r0, [r0, #0]
   b4318:	f003 fd44 	bl	b7da4 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b431c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4320:	f002 bace 	b.w	b68c0 <BlynkNoOpCbk>

000b4324 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4328:	eb01 0902 	add.w	r9, r1, r2
   b432c:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b432e:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4330:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4334:	4680      	mov	r8, r0
   b4336:	460d      	mov	r5, r1
   b4338:	4616      	mov	r6, r2
    if (it >= param.end())
   b433a:	f080 8092 	bcs.w	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b433e:	a805      	add	r0, sp, #20
   b4340:	880f      	ldrh	r7, [r1, #0]
   b4342:	f7ff ff81 	bl	b4248 <_ZN10BlynkParam8iteratorppEv>
   b4346:	6803      	ldr	r3, [r0, #0]
   b4348:	454b      	cmp	r3, r9
   b434a:	f080 808a 	bcs.w	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b434e:	a805      	add	r0, sp, #20
   b4350:	f7ff ff70 	bl	b4234 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   b4354:	f247 2376 	movw	r3, #29302	; 0x7276
   b4358:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b435a:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   b435c:	f000 80a9 	beq.w	b44b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   b4360:	d827      	bhi.n	b43b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   b4362:	f247 2361 	movw	r3, #29281	; 0x7261
   b4366:	429f      	cmp	r7, r3
   b4368:	d07e      	beq.n	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   b436a:	f247 2364 	movw	r3, #29284	; 0x7264
   b436e:	429f      	cmp	r7, r3
   b4370:	d042      	beq.n	b43f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   b4372:	f646 5370 	movw	r3, #28016	; 0x6d70
   b4376:	429f      	cmp	r7, r3
   b4378:	d128      	bne.n	b43cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b437a:	4e63      	ldr	r6, [pc, #396]	; (b4508 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b437c:	4f63      	ldr	r7, [pc, #396]	; (b450c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   b437e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   b4382:	9b05      	ldr	r3, [sp, #20]
   b4384:	4599      	cmp	r9, r3
   b4386:	d96c      	bls.n	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4388:	a805      	add	r0, sp, #20
   b438a:	f7ff ff53 	bl	b4234 <_ZNK10BlynkParam8iterator5asIntEv>
   b438e:	b2c4      	uxtb	r4, r0
            ++it;
   b4390:	a805      	add	r0, sp, #20
   b4392:	f7ff ff59 	bl	b4248 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4396:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4398:	4631      	mov	r1, r6
   b439a:	4628      	mov	r0, r5
   b439c:	f004 f8ea 	bl	b8574 <strcmp>
   b43a0:	4601      	mov	r1, r0
   b43a2:	b9e0      	cbnz	r0, b43de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   b43a4:	4620      	mov	r0, r4
   b43a6:	f003 fe89 	bl	b80bc <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b43aa:	a805      	add	r0, sp, #20
   b43ac:	f7ff ff4c 	bl	b4248 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b43b0:	e7e7      	b.n	b4382 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   b43b2:	f247 7364 	movw	r3, #30564	; 0x7764
   b43b6:	429f      	cmp	r7, r3
   b43b8:	d03f      	beq.n	b443a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   b43ba:	f247 7376 	movw	r3, #30582	; 0x7776
   b43be:	429f      	cmp	r7, r3
   b43c0:	f000 8087 	beq.w	b44d2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   b43c4:	f247 7361 	movw	r3, #30561	; 0x7761
   b43c8:	429f      	cmp	r7, r3
   b43ca:	d05f      	beq.n	b448c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b43cc:	2300      	movs	r3, #0
   b43ce:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b43d2:	2202      	movs	r2, #2
   b43d4:	9200      	str	r2, [sp, #0]
   b43d6:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   b43da:	4619      	mov	r1, r3
   b43dc:	e029      	b.n	b4432 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b43de:	4639      	mov	r1, r7
   b43e0:	4628      	mov	r0, r5
   b43e2:	f004 f8c7 	bl	b8574 <strcmp>
   b43e6:	b128      	cbz	r0, b43f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   b43e8:	4641      	mov	r1, r8
   b43ea:	4628      	mov	r0, r5
   b43ec:	f004 f8c2 	bl	b8574 <strcmp>
   b43f0:	2800      	cmp	r0, #0
   b43f2:	d1da      	bne.n	b43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   b43f4:	2101      	movs	r1, #1
   b43f6:	e7d5      	b.n	b43a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b43f8:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b43fa:	4945      	ldr	r1, [pc, #276]	; (b4510 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   b43fc:	9307      	str	r3, [sp, #28]
   b43fe:	a807      	add	r0, sp, #28
   b4400:	2310      	movs	r3, #16
   b4402:	2500      	movs	r5, #0
   b4404:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4408:	f7ff ff2d 	bl	b4266 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b440c:	a807      	add	r0, sp, #28
   b440e:	4621      	mov	r1, r4
   b4410:	f7ff ff46 	bl	b42a0 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b4414:	4620      	mov	r0, r4
   b4416:	f003 fe7b 	bl	b8110 <digitalRead>
        rsp.add(analogRead(pin));
   b441a:	4601      	mov	r1, r0
   b441c:	a807      	add	r0, sp, #28
   b441e:	f7ff ff51 	bl	b42c4 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4422:	9b08      	ldr	r3, [sp, #32]
   b4424:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4428:	3b01      	subs	r3, #1
   b442a:	9300      	str	r3, [sp, #0]
   b442c:	9b07      	ldr	r3, [sp, #28]
   b442e:	462a      	mov	r2, r5
   b4430:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4432:	4640      	mov	r0, r8
   b4434:	f000 fade 	bl	b49f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4438:	e013      	b.n	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   b443a:	a805      	add	r0, sp, #20
   b443c:	f7ff ff04 	bl	b4248 <_ZN10BlynkParam8iteratorppEv>
   b4440:	6803      	ldr	r3, [r0, #0]
   b4442:	4599      	cmp	r9, r3
   b4444:	d90d      	bls.n	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4446:	b2a4      	uxth	r4, r4
   b4448:	2101      	movs	r1, #1
   b444a:	4620      	mov	r0, r4
   b444c:	f003 fe36 	bl	b80bc <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4450:	a805      	add	r0, sp, #20
   b4452:	f7ff feef 	bl	b4234 <_ZNK10BlynkParam8iterator5asIntEv>
   b4456:	1e01      	subs	r1, r0, #0
   b4458:	bf18      	it	ne
   b445a:	2101      	movne	r1, #1
   b445c:	4620      	mov	r0, r4
   b445e:	f003 fe3e 	bl	b80de <digitalWrite>
    }
}
   b4462:	b00f      	add	sp, #60	; 0x3c
   b4464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4468:	ab0a      	add	r3, sp, #40	; 0x28
   b446a:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b446c:	a807      	add	r0, sp, #28
   b446e:	2310      	movs	r3, #16
   b4470:	4928      	ldr	r1, [pc, #160]	; (b4514 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   b4472:	2500      	movs	r5, #0
   b4474:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4478:	f7ff fef5 	bl	b4266 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b447c:	a807      	add	r0, sp, #28
   b447e:	4621      	mov	r1, r4
   b4480:	f7ff ff0e 	bl	b42a0 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b4484:	4620      	mov	r0, r4
   b4486:	f003 fe56 	bl	b8136 <analogRead>
   b448a:	e7c6      	b.n	b441a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   b448c:	a805      	add	r0, sp, #20
   b448e:	f7ff fedb 	bl	b4248 <_ZN10BlynkParam8iteratorppEv>
   b4492:	6803      	ldr	r3, [r0, #0]
   b4494:	4599      	cmp	r9, r3
   b4496:	d9e4      	bls.n	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4498:	b2a4      	uxth	r4, r4
   b449a:	2101      	movs	r1, #1
   b449c:	4620      	mov	r0, r4
   b449e:	f003 fe0d 	bl	b80bc <pinMode>
        analogWrite(pin, it.asInt());
   b44a2:	a805      	add	r0, sp, #20
   b44a4:	f7ff fec6 	bl	b4234 <_ZNK10BlynkParam8iterator5asIntEv>
   b44a8:	4601      	mov	r1, r0
   b44aa:	4620      	mov	r0, r4
   b44ac:	f003 fe5a 	bl	b8164 <_Z11analogWritetm>
    } break;
   b44b0:	e7d7      	b.n	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b44b2:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b44b4:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b44b8:	f002 fa04 	bl	b68c4 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b44bc:	4603      	mov	r3, r0
            handler(req);
   b44be:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b44c0:	b123      	cbz	r3, b44cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   b44c2:	4a15      	ldr	r2, [pc, #84]	; (b4518 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   b44c4:	4293      	cmp	r3, r2
   b44c6:	d001      	beq.n	b44cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   b44c8:	4798      	blx	r3
   b44ca:	e7ca      	b.n	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   b44cc:	f002 f9f6 	bl	b68bc <BlynkWidgetRead>
        }
    }
   b44d0:	e7c7      	b.n	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   b44d2:	a805      	add	r0, sp, #20
   b44d4:	f7ff feb8 	bl	b4248 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b44d8:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b44da:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b44de:	1b5d      	subs	r5, r3, r5
   b44e0:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b44e2:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b44e4:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b44e8:	950c      	str	r5, [sp, #48]	; 0x30
   b44ea:	f002 f9f5 	bl	b68d8 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b44ee:	4603      	mov	r3, r0
            handler(req, param);
   b44f0:	a90a      	add	r1, sp, #40	; 0x28
   b44f2:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b44f4:	b123      	cbz	r3, b4500 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   b44f6:	4a09      	ldr	r2, [pc, #36]	; (b451c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   b44f8:	4293      	cmp	r3, r2
   b44fa:	d001      	beq.n	b4500 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   b44fc:	4798      	blx	r3
   b44fe:	e7b0      	b.n	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   b4500:	f002 f9dd 	bl	b68be <BlynkWidgetWrite>
    } break;
   b4504:	e7ad      	b.n	b4462 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   b4506:	bf00      	nop
   b4508:	000b882b 	.word	0x000b882b
   b450c:	000b882e 	.word	0x000b882e
   b4510:	000b8836 	.word	0x000b8836
   b4514:	000b8839 	.word	0x000b8839
   b4518:	000b68bd 	.word	0x000b68bd
   b451c:	000b68bf 	.word	0x000b68bf
   b4520:	000b8832 	.word	0x000b8832

000b4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b4524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4528:	b08c      	sub	sp, #48	; 0x30
   b452a:	af04      	add	r7, sp, #16
   b452c:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b452e:	2205      	movs	r2, #5
   b4530:	6800      	ldr	r0, [r0, #0]
   b4532:	1d39      	adds	r1, r7, #4
   b4534:	f002 ff23 	bl	b737e <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4538:	b398      	cbz	r0, b45a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b453a:	2805      	cmp	r0, #5
   b453c:	d004      	beq.n	b4548 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b453e:	2000      	movs	r0, #0
}
   b4540:	3720      	adds	r7, #32
   b4542:	46bd      	mov	sp, r7
   b4544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4548:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b454c:	ba5b      	rev16	r3, r3
   b454e:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4550:	f8a7 3005 	strh.w	r3, [r7, #5]
   b4554:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4558:	ba5b      	rev16	r3, r3
   b455a:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b455e:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b4562:	2a00      	cmp	r2, #0
   b4564:	d0eb      	beq.n	b453e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b4566:	793b      	ldrb	r3, [r7, #4]
   b4568:	bb23      	cbnz	r3, b45b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b456a:	f002 f9a5 	bl	b68b8 <_Z11BlynkMillisv>
   b456e:	4602      	mov	r2, r0
   b4570:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b4572:	7f60      	ldrb	r0, [r4, #29]
   b4574:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4578:	b9c0      	cbnz	r0, b45ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b457a:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b457e:	2901      	cmp	r1, #1
   b4580:	d114      	bne.n	b45ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b4582:	2b09      	cmp	r3, #9
   b4584:	d00f      	beq.n	b45a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b4586:	2bc8      	cmp	r3, #200	; 0xc8
   b4588:	d001      	beq.n	b458e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   b458a:	2b04      	cmp	r3, #4
   b458c:	d1d8      	bne.n	b4540 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b458e:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b4590:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b4592:	4620      	mov	r0, r4
                state = CONNECTED;
   b4594:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b4596:	f000 fadb 	bl	b4b50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b459a:	f7ff fe3f 	bl	b421c <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b459e:	f002 f98f 	bl	b68c0 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b45a2:	2001      	movs	r0, #1
   b45a4:	e7cc      	b.n	b4540 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b45a6:	2303      	movs	r3, #3
   b45a8:	7763      	strb	r3, [r4, #29]
                break;
   b45aa:	e7c9      	b.n	b4540 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b45ac:	1f58      	subs	r0, r3, #5
   b45ae:	bf18      	it	ne
   b45b0:	2001      	movne	r0, #1
   b45b2:	e7c5      	b.n	b4540 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b45b4:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b45b8:	d903      	bls.n	b45c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b45ba:	4620      	mov	r0, r4
   b45bc:	f7ff fea8 	bl	b4310 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b45c0:	e7ef      	b.n	b45a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b45c2:	f108 0308 	add.w	r3, r8, #8
   b45c6:	466e      	mov	r6, sp
   b45c8:	08db      	lsrs	r3, r3, #3
   b45ca:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b45ce:	469d      	mov	sp, r3
   b45d0:	ad04      	add	r5, sp, #16
   b45d2:	6820      	ldr	r0, [r4, #0]
   b45d4:	4642      	mov	r2, r8
   b45d6:	4629      	mov	r1, r5
   b45d8:	f002 fed1 	bl	b737e <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b45dc:	4580      	cmp	r8, r0
   b45de:	f04f 0000 	mov.w	r0, #0
   b45e2:	d17f      	bne.n	b46e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
    inputBuffer[hdr.length] = '\0';
   b45e4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b45e8:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b45ea:	f002 f965 	bl	b68b8 <_Z11BlynkMillisv>
    switch (hdr.type)
   b45ee:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b45f0:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b45f2:	2b14      	cmp	r3, #20
   b45f4:	f000 80a6 	beq.w	b4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b45f8:	d848      	bhi.n	b468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b45fa:	2b0f      	cmp	r3, #15
   b45fc:	f000 80a2 	beq.w	b4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4600:	d807      	bhi.n	b4612 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b4602:	2b02      	cmp	r3, #2
   b4604:	d048      	beq.n	b4698 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b4606:	2b06      	cmp	r3, #6
   b4608:	d051      	beq.n	b46ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
        internalReconnect();
   b460a:	4620      	mov	r0, r4
   b460c:	f7ff fe80 	bl	b4310 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4610:	e058      	b.n	b46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
    switch (hdr.type)
   b4612:	2b11      	cmp	r3, #17
   b4614:	d1f9      	bne.n	b460a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b4616:	2300      	movs	r3, #0
   b4618:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b461a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b461e:	442b      	add	r3, r5
        if (it >= param.end())
   b4620:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4622:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b4626:	d24d      	bcs.n	b46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        ++it;
   b4628:	f107 000c 	add.w	r0, r7, #12
   b462c:	f8d5 8000 	ldr.w	r8, [r5]
   b4630:	f7ff fe0a 	bl	b4248 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4634:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b4636:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b463a:	1b5d      	subs	r5, r3, r5
   b463c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b463e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b4642:	687b      	ldr	r3, [r7, #4]
   b4644:	61fd      	str	r5, [r7, #28]
   b4646:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b464a:	8363      	strh	r3, [r4, #26]
   b464c:	4b64      	ldr	r3, [pc, #400]	; (b47e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b464e:	4598      	cmp	r8, r3
   b4650:	f000 80bf 	beq.w	b47d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ae>
   b4654:	f200 808c 	bhi.w	b4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
   b4658:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b465c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b4660:	4413      	add	r3, r2
   b4662:	4598      	cmp	r8, r3
   b4664:	f000 809d 	beq.w	b47a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27e>
   b4668:	d879      	bhi.n	b475e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
   b466a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b466e:	3b06      	subs	r3, #6
   b4670:	4598      	cmp	r8, r3
   b4672:	f000 809c 	beq.w	b47ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28a>
   b4676:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b467a:	3303      	adds	r3, #3
   b467c:	4598      	cmp	r8, r3
   b467e:	d16b      	bne.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b4680:	f107 0114 	add.w	r1, r7, #20
   b4684:	4638      	mov	r0, r7
   b4686:	f002 f91a 	bl	b68be <BlynkWidgetWrite>
   b468a:	e065      	b.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
    switch (hdr.type)
   b468c:	2b29      	cmp	r3, #41	; 0x29
   b468e:	d01b      	beq.n	b46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b4690:	2b37      	cmp	r3, #55	; 0x37
   b4692:	d017      	beq.n	b46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4694:	2b1d      	cmp	r3, #29
   b4696:	d1b8      	bne.n	b460a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b4698:	7f63      	ldrb	r3, [r4, #29]
   b469a:	b943      	cbnz	r3, b46ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
            state = CONNECTED;
   b469c:	2301      	movs	r3, #1
   b469e:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b46a0:	4620      	mov	r0, r4
   b46a2:	f000 fa55 	bl	b4b50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b46a6:	f7ff fdb9 	bl	b421c <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b46aa:	f002 f909 	bl	b68c0 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b46ae:	2300      	movs	r3, #0
   b46b0:	21c8      	movs	r1, #200	; 0xc8
   b46b2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b46b6:	9100      	str	r1, [sp, #0]
   b46b8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b46bc:	4619      	mov	r1, r3
   b46be:	4620      	mov	r0, r4
   b46c0:	f000 f998 	bl	b49f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b46c4:	2001      	movs	r0, #1
   b46c6:	e00d      	b.n	b46e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        if (!redir_serv) {
   b46c8:	68a3      	ldr	r3, [r4, #8]
   b46ca:	b91b      	cbnz	r3, b46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
             redir_serv = (char*)malloc(64);
   b46cc:	2040      	movs	r0, #64	; 0x40
   b46ce:	f002 fba9 	bl	b6e24 <malloc>
   b46d2:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b46d4:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b46d8:	44a8      	add	r8, r5
        if (it >= param.end())
   b46da:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b46dc:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b46e0:	d302      	bcc.n	b46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
            return false;
   b46e2:	2000      	movs	r0, #0
   b46e4:	46b5      	mov	sp, r6
   b46e6:	e72b      	b.n	b4540 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b46e8:	4629      	mov	r1, r5
   b46ea:	2240      	movs	r2, #64	; 0x40
   b46ec:	68a0      	ldr	r0, [r4, #8]
   b46ee:	f003 ff53 	bl	b8598 <strncpy>
        redir_serv[63] = '\0';
   b46f2:	68a3      	ldr	r3, [r4, #8]
   b46f4:	2500      	movs	r5, #0
   b46f6:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b46fa:	f107 0014 	add.w	r0, r7, #20
   b46fe:	f7ff fda3 	bl	b4248 <_ZN10BlynkParam8iteratorppEv>
   b4702:	6803      	ldr	r3, [r0, #0]
   b4704:	4598      	cmp	r8, r3
   b4706:	d91b      	bls.n	b4740 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4708:	6978      	ldr	r0, [r7, #20]
   b470a:	b120      	cbz	r0, b4716 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
   b470c:	69bb      	ldr	r3, [r7, #24]
   b470e:	4298      	cmp	r0, r3
   b4710:	d214      	bcs.n	b473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b4712:	f003 fee7 	bl	b84e4 <atol>
            redir_port = it.asLong();
   b4716:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b4718:	6820      	ldr	r0, [r4, #0]
   b471a:	f003 fb43 	bl	b7da4 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b471e:	6823      	ldr	r3, [r4, #0]
   b4720:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b4722:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b4724:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b4726:	2300      	movs	r3, #0
   b4728:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b472a:	f002 f8c5 	bl	b68b8 <_Z11BlynkMillisv>
   b472e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4732:	3808      	subs	r0, #8
   b4734:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b4738:	6160      	str	r0, [r4, #20]
   b473a:	e7c3      	b.n	b46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b473c:	4628      	mov	r0, r5
   b473e:	e7ea      	b.n	b4716 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4740:	2550      	movs	r5, #80	; 0x50
   b4742:	e7e9      	b.n	b4718 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f4>
        msgIdOutOverride = hdr.msg_id;
   b4744:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b4746:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b474a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b474e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b4750:	4629      	mov	r1, r5
   b4752:	4620      	mov	r0, r4
   b4754:	f7ff fde6 	bl	b4324 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4758:	2300      	movs	r3, #0
   b475a:	8363      	strh	r3, [r4, #26]
   b475c:	e7b2      	b.n	b46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b475e:	4b21      	ldr	r3, [pc, #132]	; (b47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b4760:	4598      	cmp	r8, r3
   b4762:	d1f9      	bne.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b4764:	f107 0114 	add.w	r1, r7, #20
   b4768:	4638      	mov	r0, r7
   b476a:	f002 f8a8 	bl	b68be <BlynkWidgetWrite>
   b476e:	e7f3      	b.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b4770:	4b1d      	ldr	r3, [pc, #116]	; (b47e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b4772:	4598      	cmp	r8, r3
   b4774:	d021      	beq.n	b47ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x296>
   b4776:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b477a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b477e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b4782:	4598      	cmp	r8, r3
   b4784:	d01f      	beq.n	b47c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a2>
   b4786:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b478a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b478e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b4792:	4598      	cmp	r8, r3
   b4794:	d1e0      	bne.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b4796:	f107 0114 	add.w	r1, r7, #20
   b479a:	4638      	mov	r0, r7
   b479c:	f002 f88f 	bl	b68be <BlynkWidgetWrite>
   b47a0:	e7da      	b.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b47a2:	f107 0114 	add.w	r1, r7, #20
   b47a6:	4638      	mov	r0, r7
   b47a8:	f002 f889 	bl	b68be <BlynkWidgetWrite>
   b47ac:	e7d4      	b.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b47ae:	f107 0114 	add.w	r1, r7, #20
   b47b2:	4638      	mov	r0, r7
   b47b4:	f002 f883 	bl	b68be <BlynkWidgetWrite>
   b47b8:	e7ce      	b.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b47ba:	f107 0114 	add.w	r1, r7, #20
   b47be:	4638      	mov	r0, r7
   b47c0:	f002 f87d 	bl	b68be <BlynkWidgetWrite>
   b47c4:	e7c8      	b.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b47c6:	f107 0114 	add.w	r1, r7, #20
   b47ca:	4638      	mov	r0, r7
   b47cc:	f002 f877 	bl	b68be <BlynkWidgetWrite>
   b47d0:	e7c2      	b.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b47d2:	f107 0114 	add.w	r1, r7, #20
   b47d6:	4638      	mov	r0, r7
   b47d8:	f002 f871 	bl	b68be <BlynkWidgetWrite>
   b47dc:	e7bc      	b.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b47de:	bf00      	nop
   b47e0:	00736676 	.word	0x00736676
   b47e4:	00676264 	.word	0x00676264
   b47e8:	6e6f6361 	.word	0x6e6f6361

000b47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b47ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b47f0:	4604      	mov	r4, r0
   b47f2:	b08c      	sub	sp, #48	; 0x30
   b47f4:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b47f6:	f7ff fd11 	bl	b421c <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b47fa:	7f63      	ldrb	r3, [r4, #29]
   b47fc:	2b02      	cmp	r3, #2
   b47fe:	d01e      	beq.n	b483e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4800:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b4802:	8b62      	ldrh	r2, [r4, #26]
   b4804:	3301      	adds	r3, #1
   b4806:	b2db      	uxtb	r3, r3
   b4808:	7723      	strb	r3, [r4, #28]
   b480a:	b9aa      	cbnz	r2, b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b480c:	2b02      	cmp	r3, #2
   b480e:	d813      	bhi.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4810:	6820      	ldr	r0, [r4, #0]
   b4812:	f003 f98f 	bl	b7b34 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b4816:	b1a8      	cbz	r0, b4844 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b4818:	b925      	cbnz	r5, b4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b481a:	6820      	ldr	r0, [r4, #0]
   b481c:	f003 fa68 	bl	b7cf0 <_ZN9TCPClient9availableEv>
   b4820:	2800      	cmp	r0, #0
   b4822:	dd0f      	ble.n	b4844 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b4824:	4620      	mov	r0, r4
   b4826:	f7ff fe7d 	bl	b4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b482a:	2800      	cmp	r0, #0
   b482c:	d1f5      	bne.n	b481a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b482e:	6820      	ldr	r0, [r4, #0]
   b4830:	f003 fab8 	bl	b7da4 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4834:	f002 f844 	bl	b68c0 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4838:	7f23      	ldrb	r3, [r4, #28]
   b483a:	3b01      	subs	r3, #1
   b483c:	7723      	strb	r3, [r4, #28]
}
   b483e:	b00c      	add	sp, #48	; 0x30
   b4840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b4844:	f002 f838 	bl	b68b8 <_Z11BlynkMillisv>
   b4848:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b484a:	6820      	ldr	r0, [r4, #0]
   b484c:	f003 f972 	bl	b7b34 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4850:	7f67      	ldrb	r7, [r4, #29]
   b4852:	2f01      	cmp	r7, #1
   b4854:	4606      	mov	r6, r0
   b4856:	d124      	bne.n	b48a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b4858:	b920      	cbnz	r0, b4864 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b485a:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b485c:	4620      	mov	r0, r4
   b485e:	f7ff fd57 	bl	b4310 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b4862:	e7e9      	b.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4864:	68e3      	ldr	r3, [r4, #12]
   b4866:	f24f 6218 	movw	r2, #63000	; 0xf618
   b486a:	1aeb      	subs	r3, r5, r3
   b486c:	4293      	cmp	r3, r2
   b486e:	d8f5      	bhi.n	b485c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4870:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4874:	4293      	cmp	r3, r2
   b4876:	d803      	bhi.n	b4880 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4878:	6923      	ldr	r3, [r4, #16]
   b487a:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b487c:	4293      	cmp	r3, r2
   b487e:	d9db      	bls.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4880:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4882:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4886:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4888:	4293      	cmp	r3, r2
   b488a:	d9d5      	bls.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b488c:	2300      	movs	r3, #0
   b488e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4892:	9300      	str	r3, [sp, #0]
   b4894:	461a      	mov	r2, r3
   b4896:	2106      	movs	r1, #6
   b4898:	4620      	mov	r0, r4
   b489a:	f000 f8ab 	bl	b49f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b489e:	6165      	str	r5, [r4, #20]
                return false;
   b48a0:	e7ca      	b.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b48a2:	2f00      	cmp	r7, #0
   b48a4:	d1c8      	bne.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b48a6:	6963      	ldr	r3, [r4, #20]
   b48a8:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b48aa:	b140      	cbz	r0, b48be <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b48ac:	f241 7270 	movw	r2, #6000	; 0x1770
   b48b0:	4293      	cmp	r3, r2
   b48b2:	d9c1      	bls.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b48b4:	6820      	ldr	r0, [r4, #0]
   b48b6:	f003 fa75 	bl	b7da4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b48ba:	7767      	strb	r7, [r4, #29]
            return false;
   b48bc:	e7bc      	b.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b48be:	f241 3288 	movw	r2, #5000	; 0x1388
   b48c2:	4293      	cmp	r3, r2
   b48c4:	d9b8      	bls.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b48c6:	6820      	ldr	r0, [r4, #0]
   b48c8:	f003 fa6c 	bl	b7da4 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b48cc:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b48d0:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b48d4:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b48d8:	f1be 0f00 	cmp.w	lr, #0
   b48dc:	d01b      	beq.n	b4916 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b48de:	4633      	mov	r3, r6
   b48e0:	4642      	mov	r2, r8
   b48e2:	4671      	mov	r1, lr
   b48e4:	4660      	mov	r0, ip
   b48e6:	f003 f8a7 	bl	b7a38 <_ZN9TCPClient7connectEPKctm>
   b48ea:	2801      	cmp	r0, #1
   b48ec:	d1d7      	bne.n	b489e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b48ee:	6863      	ldr	r3, [r4, #4]
   b48f0:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b48f2:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b48f4:	4618      	mov	r0, r3
            msgIdOut = 1;
   b48f6:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b48f8:	f003 fe46 	bl	b8588 <strlen>
   b48fc:	2200      	movs	r2, #0
   b48fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4902:	9b05      	ldr	r3, [sp, #20]
   b4904:	9000      	str	r0, [sp, #0]
   b4906:	462a      	mov	r2, r5
   b4908:	211d      	movs	r1, #29
   b490a:	4620      	mov	r0, r4
   b490c:	f000 f872 	bl	b49f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4910:	6923      	ldr	r3, [r4, #16]
   b4912:	6163      	str	r3, [r4, #20]
            return true;
   b4914:	e790      	b.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4916:	4b08      	ldr	r3, [pc, #32]	; (b4938 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b4918:	9306      	str	r3, [sp, #24]
   b491a:	f10c 0720 	add.w	r7, ip, #32
   b491e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4920:	ae07      	add	r6, sp, #28
   b4922:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4924:	683b      	ldr	r3, [r7, #0]
   b4926:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b4928:	4642      	mov	r2, r8
   b492a:	4673      	mov	r3, lr
   b492c:	a906      	add	r1, sp, #24
   b492e:	4660      	mov	r0, ip
   b4930:	f003 f962 	bl	b7bf8 <_ZN9TCPClient7connectE9IPAddresstm>
   b4934:	e7d9      	b.n	b48ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b4936:	bf00      	nop
   b4938:	000b98c4 	.word	0x000b98c4

000b493c <loop>:
    display.setTextColor(WHITE);
    display.display();
}

void loop()
{
   b493c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    display.loop();
   b493e:	4822      	ldr	r0, [pc, #136]	; (b49c8 <loop+0x8c>)
   b4940:	f000 fe6b 	bl	b561a <_ZN16OledWingAdafruit4loopEv>
    Blynk.run();
   b4944:	4821      	ldr	r0, [pc, #132]	; (b49cc <loop+0x90>)
   b4946:	2100      	movs	r1, #0
   b4948:	f7ff ff50 	bl	b47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>

    if (client.isConnected())
   b494c:	4820      	ldr	r0, [pc, #128]	; (b49d0 <loop+0x94>)
   b494e:	f001 f815 	bl	b597c <_ZN4MQTT11isConnectedEv>
   b4952:	b170      	cbz	r0, b4972 <loop+0x36>
    {
        client.loop();
   b4954:	481e      	ldr	r0, [pc, #120]	; (b49d0 <loop+0x94>)
   b4956:	f001 f9e8 	bl	b5d2a <_ZN4MQTT4loopEv>
        client.subscribe("christianity/led");
        client.subscribe("christianity/button");
        client.publish("christianity", "HELLO Jesus!");
    }

    if (display.pressedA())
   b495a:	481b      	ldr	r0, [pc, #108]	; (b49c8 <loop+0x8c>)
   b495c:	f000 fe76 	bl	b564c <_ZN16OledWingAdafruit8pressedAEv>
   b4960:	b318      	cbz	r0, b49aa <loop+0x6e>
    {
        client.publish("christianity/buttons", "a");
   b4962:	4a1c      	ldr	r2, [pc, #112]	; (b49d4 <loop+0x98>)
    {
        client.publish("christianity/buttons", "b");
    }
    else if (display.pressedC())
    {
        client.publish("christianity/buttons", "c");
   b4964:	491c      	ldr	r1, [pc, #112]	; (b49d8 <loop+0x9c>)
   b4966:	481a      	ldr	r0, [pc, #104]	; (b49d0 <loop+0x94>)
    }
   b4968:	b005      	add	sp, #20
   b496a:	f85d eb04 	ldr.w	lr, [sp], #4
        client.publish("christianity/buttons", "c");
   b496e:	f001 b980 	b.w	b5c72 <_ZN4MQTT7publishEPKcS1_>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4972:	4668      	mov	r0, sp
   b4974:	f002 fa46 	bl	b6e04 <spark_deviceID>
        client.connect(System.deviceID());
   b4978:	9900      	ldr	r1, [sp, #0]
   b497a:	4815      	ldr	r0, [pc, #84]	; (b49d0 <loop+0x94>)
   b497c:	f001 f8ee 	bl	b5b5c <_ZN4MQTT7connectEPKc>
   b4980:	4668      	mov	r0, sp
   b4982:	f002 fb91 	bl	b70a8 <_ZN6StringD1Ev>
        client.subscribe("christianity");
   b4986:	4915      	ldr	r1, [pc, #84]	; (b49dc <loop+0xa0>)
   b4988:	4811      	ldr	r0, [pc, #68]	; (b49d0 <loop+0x94>)
   b498a:	f001 fb16 	bl	b5fba <_ZN4MQTT9subscribeEPKc>
        client.subscribe("christianity/led");
   b498e:	4914      	ldr	r1, [pc, #80]	; (b49e0 <loop+0xa4>)
   b4990:	480f      	ldr	r0, [pc, #60]	; (b49d0 <loop+0x94>)
   b4992:	f001 fb12 	bl	b5fba <_ZN4MQTT9subscribeEPKc>
        client.subscribe("christianity/button");
   b4996:	4913      	ldr	r1, [pc, #76]	; (b49e4 <loop+0xa8>)
   b4998:	480d      	ldr	r0, [pc, #52]	; (b49d0 <loop+0x94>)
   b499a:	f001 fb0e 	bl	b5fba <_ZN4MQTT9subscribeEPKc>
        client.publish("christianity", "HELLO Jesus!");
   b499e:	4a12      	ldr	r2, [pc, #72]	; (b49e8 <loop+0xac>)
   b49a0:	490e      	ldr	r1, [pc, #56]	; (b49dc <loop+0xa0>)
   b49a2:	480b      	ldr	r0, [pc, #44]	; (b49d0 <loop+0x94>)
   b49a4:	f001 f965 	bl	b5c72 <_ZN4MQTT7publishEPKcS1_>
   b49a8:	e7d7      	b.n	b495a <loop+0x1e>
    else if (display.pressedB())
   b49aa:	4807      	ldr	r0, [pc, #28]	; (b49c8 <loop+0x8c>)
   b49ac:	f000 fe58 	bl	b5660 <_ZN16OledWingAdafruit8pressedBEv>
   b49b0:	b108      	cbz	r0, b49b6 <loop+0x7a>
        client.publish("christianity/buttons", "b");
   b49b2:	4a0e      	ldr	r2, [pc, #56]	; (b49ec <loop+0xb0>)
   b49b4:	e7d6      	b.n	b4964 <loop+0x28>
    else if (display.pressedC())
   b49b6:	4804      	ldr	r0, [pc, #16]	; (b49c8 <loop+0x8c>)
   b49b8:	f000 fe5c 	bl	b5674 <_ZN16OledWingAdafruit8pressedCEv>
   b49bc:	b108      	cbz	r0, b49c2 <loop+0x86>
        client.publish("christianity/buttons", "c");
   b49be:	4a0c      	ldr	r2, [pc, #48]	; (b49f0 <loop+0xb4>)
   b49c0:	e7d0      	b.n	b4964 <loop+0x28>
   b49c2:	b005      	add	sp, #20
   b49c4:	f85d fb04 	ldr.w	pc, [sp], #4
   b49c8:	2003e638 	.word	0x2003e638
   b49cc:	2003e57c 	.word	0x2003e57c
   b49d0:	2003e5d8 	.word	0x2003e5d8
   b49d4:	000b87d1 	.word	0x000b87d1
   b49d8:	000b886e 	.word	0x000b886e
   b49dc:	000b881e 	.word	0x000b881e
   b49e0:	000b883c 	.word	0x000b883c
   b49e4:	000b884d 	.word	0x000b884d
   b49e8:	000b8861 	.word	0x000b8861
   b49ec:	000b87e9 	.word	0x000b87e9
   b49f0:	000b9bd7 	.word	0x000b9bd7

000b49f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b49f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49f8:	b083      	sub	sp, #12
   b49fa:	af00      	add	r7, sp, #0
   b49fc:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b49fe:	6800      	ldr	r0, [r0, #0]
   b4a00:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b4a02:	4688      	mov	r8, r1
   b4a04:	4616      	mov	r6, r2
   b4a06:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4a08:	46eb      	mov	fp, sp
   b4a0a:	f003 f893 	bl	b7b34 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b4a0e:	2800      	cmp	r0, #0
   b4a10:	d07f      	beq.n	b4b12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4a12:	f1b8 0f1d 	cmp.w	r8, #29
   b4a16:	d804      	bhi.n	b4a22 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   b4a18:	4b4c      	ldr	r3, [pc, #304]	; (b4b4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   b4a1a:	fa23 f308 	lsr.w	r3, r3, r8
   b4a1e:	07db      	lsls	r3, r3, #31
   b4a20:	d402      	bmi.n	b4a28 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   b4a22:	7f63      	ldrb	r3, [r4, #29]
   b4a24:	2b01      	cmp	r3, #1
   b4a26:	d174      	bne.n	b4b12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   b4a28:	b946      	cbnz	r6, b4a3c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4a2a:	8b66      	ldrh	r6, [r4, #26]
   b4a2c:	b936      	cbnz	r6, b4a3c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4a2e:	8b23      	ldrh	r3, [r4, #24]
   b4a30:	3301      	adds	r3, #1
   b4a32:	b29b      	uxth	r3, r3
   b4a34:	2b00      	cmp	r3, #0
   b4a36:	d071      	beq.n	b4b1c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   b4a38:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b4a3a:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b4a3c:	f1a8 030c 	sub.w	r3, r8, #12
   b4a40:	2b08      	cmp	r3, #8
   b4a42:	d816      	bhi.n	b4a72 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4a44:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b4a48:	4293      	cmp	r3, r2
   b4a4a:	bf38      	it	cc
   b4a4c:	4613      	movcc	r3, r2
   b4a4e:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b4a52:	f001 ff31 	bl	b68b8 <_Z11BlynkMillisv>
   b4a56:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b4a5a:	2800      	cmp	r0, #0
   b4a5c:	db60      	blt.n	b4b20 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   b4a5e:	2100      	movs	r1, #0
   b4a60:	4620      	mov	r0, r4
   b4a62:	f7ff fec3 	bl	b47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4a66:	f001 ff27 	bl	b68b8 <_Z11BlynkMillisv>
   b4a6a:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b4a6e:	2800      	cmp	r0, #0
   b4a70:	daf5      	bge.n	b4a5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4a72:	f1b9 0f00 	cmp.w	r9, #0
   b4a76:	d05a      	beq.n	b4b2e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   b4a78:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b4a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b4a7c:	2a00      	cmp	r2, #0
   b4a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b4a80:	bf08      	it	eq
   b4a82:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4a84:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b4a88:	f10a 0307 	add.w	r3, sl, #7
   b4a8c:	f023 0307 	bic.w	r3, r3, #7
   b4a90:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   b4a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   b4a96:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   b4a9a:	18ea      	adds	r2, r5, r3
   b4a9c:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4aa0:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4aa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   b4aa6:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   b4aaa:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   b4aae:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   b4ab2:	f1b9 0f00 	cmp.w	r9, #0
   b4ab6:	d03c      	beq.n	b4b32 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b4ab8:	2d00      	cmp	r5, #0
   b4aba:	d03a      	beq.n	b4b32 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   b4abc:	462a      	mov	r2, r5
   b4abe:	4649      	mov	r1, r9
   b4ac0:	f10d 0005 	add.w	r0, sp, #5
   b4ac4:	f003 fd12 	bl	b84ec <memcpy>
        pos += length;
   b4ac8:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4acc:	b13b      	cbz	r3, b4ade <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   b4ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b4ad0:	b12b      	cbz	r3, b4ade <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   b4ad2:	461a      	mov	r2, r3
   b4ad4:	687b      	ldr	r3, [r7, #4]
   b4ad6:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b4ad8:	4418      	add	r0, r3
   b4ada:	f003 fd07 	bl	b84ec <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4ade:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4ae0:	4555      	cmp	r5, sl
   b4ae2:	d22a      	bcs.n	b4b3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4ae4:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b4ae8:	687b      	ldr	r3, [r7, #4]
   b4aea:	6820      	ldr	r0, [r4, #0]
   b4aec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4af0:	bf28      	it	cs
   b4af2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4af6:	1959      	adds	r1, r3, r5
   b4af8:	f002 fef3 	bl	b78e2 <_ZN9TCPClient5writeEPKhj>
   b4afc:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4afe:	2000      	movs	r0, #0
   b4b00:	f001 fed8 	bl	b68b4 <_Z10BlynkDelaym>
        if (w == 0) {
   b4b04:	b9be      	cbnz	r6, b4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   b4b06:	6820      	ldr	r0, [r4, #0]
   b4b08:	f003 f94c 	bl	b7da4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4b0c:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b4b0e:	f001 fed7 	bl	b68c0 <BlynkNoOpCbk>
}
   b4b12:	370c      	adds	r7, #12
   b4b14:	46dd      	mov	sp, fp
   b4b16:	46bd      	mov	sp, r7
   b4b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b4b1c:	2301      	movs	r3, #1
   b4b1e:	e78b      	b.n	b4a38 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   b4b20:	7f21      	ldrb	r1, [r4, #28]
   b4b22:	2900      	cmp	r1, #0
   b4b24:	d1a5      	bne.n	b4a72 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   b4b26:	4620      	mov	r0, r4
   b4b28:	f7ff fe60 	bl	b47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4b2c:	e7a1      	b.n	b4a72 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4b2e:	2305      	movs	r3, #5
   b4b30:	e7a3      	b.n	b4a7a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   b4b32:	2005      	movs	r0, #5
   b4b34:	e7c9      	b.n	b4aca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   b4b36:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4b38:	e7d2      	b.n	b4ae0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   b4b3a:	d003      	beq.n	b4b44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	f7ff fbe7 	bl	b4310 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4b42:	e7e6      	b.n	b4b12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   b4b44:	f001 feb8 	bl	b68b8 <_Z11BlynkMillisv>
   b4b48:	6120      	str	r0, [r4, #16]
   b4b4a:	e7e2      	b.n	b4b12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4b4c:	20000045 	.word	0x20000045

000b4b50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4b50:	b500      	push	{lr}
   b4b52:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b4b54:	ab04      	add	r3, sp, #16
   b4b56:	2200      	movs	r2, #0
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	234f      	movs	r3, #79	; 0x4f
   b4b5c:	9300      	str	r3, [sp, #0]
   b4b5e:	9202      	str	r2, [sp, #8]
   b4b60:	4b03      	ldr	r3, [pc, #12]	; (b4b70 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   b4b62:	2111      	movs	r1, #17
   b4b64:	f7ff ff46 	bl	b49f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4b68:	b015      	add	sp, #84	; 0x54
   b4b6a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b6e:	bf00      	nop
   b4b70:	000b88bb 	.word	0x000b88bb

000b4b74 <setup>:
{
   b4b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4b78:	b094      	sub	sp, #80	; 0x50
    Blynk.begin("K03uUDBp2fm0xabHSdhf2gbv0rGs08rf", IPAddress(167, 172, 234, 162), 8080);
   b4b7a:	23a2      	movs	r3, #162	; 0xa2
   b4b7c:	22ac      	movs	r2, #172	; 0xac
   b4b7e:	21a7      	movs	r1, #167	; 0xa7
   b4b80:	9300      	str	r3, [sp, #0]
   b4b82:	a802      	add	r0, sp, #8
   b4b84:	23ea      	movs	r3, #234	; 0xea
   b4b86:	f002 fd5b 	bl	b7640 <_ZN9IPAddressC1Ehhhh>
   b4b8a:	ac03      	add	r4, sp, #12

    void begin( const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4b8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4b90:	f001 fe90 	bl	b68b4 <_Z10BlynkDelaym>
   b4b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4b96:	af09      	add	r7, sp, #36	; 0x24
   b4b98:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        this->authkey = auth;
   b4b9a:	4d32      	ldr	r5, [pc, #200]	; (b4c64 <setup+0xf0>)
   b4b9c:	6823      	ldr	r3, [r4, #0]
   b4b9e:	703b      	strb	r3, [r7, #0]
   b4ba0:	4b31      	ldr	r3, [pc, #196]	; (b4c68 <setup+0xf4>)
   b4ba2:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4ba4:	f001 fe88 	bl	b68b8 <_Z11BlynkMillisv>
   b4ba8:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4bac:	3808      	subs	r0, #8
   b4bae:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4bb2:	e9c5 0003 	strd	r0, r0, [r5, #12]
   b4bb6:	6168      	str	r0, [r5, #20]
   b4bb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4bbc:	ae0f      	add	r6, sp, #60	; 0x3c
   b4bbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   b4bc0:	682c      	ldr	r4, [r5, #0]
   b4bc2:	683b      	ldr	r3, [r7, #0]
   b4bc4:	7033      	strb	r3, [r6, #0]
        domain = NULL;
   b4bc6:	f04f 0800 	mov.w	r8, #0
        port = p;
   b4bca:	f641 7390 	movw	r3, #8080	; 0x1f90
        domain = NULL;
   b4bce:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
        port = p;
   b4bd2:	8723      	strh	r3, [r4, #56]	; 0x38
   b4bd4:	af0f      	add	r7, sp, #60	; 0x3c
   b4bd6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4bd8:	3420      	adds	r4, #32
   b4bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4bdc:	6833      	ldr	r3, [r6, #0]
   b4bde:	7023      	strb	r3, [r4, #0]
        while ((state != CONNECTED) &&
   b4be0:	f244 664f 	movw	r6, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4be4:	6828      	ldr	r0, [r5, #0]
   b4be6:	f003 f8dd 	bl	b7da4 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4bea:	f885 801d 	strb.w	r8, [r5, #29]
        millis_time_t started = BlynkMillis();
   b4bee:	f001 fe63 	bl	b68b8 <_Z11BlynkMillisv>
   b4bf2:	4604      	mov	r4, r0
        while ((state != CONNECTED) &&
   b4bf4:	7f6b      	ldrb	r3, [r5, #29]
   b4bf6:	2b01      	cmp	r3, #1
   b4bf8:	d00c      	beq.n	b4c14 <setup+0xa0>
               (BlynkMillis() - started < timeout))
   b4bfa:	f001 fe5d 	bl	b68b8 <_Z11BlynkMillisv>
   b4bfe:	1b00      	subs	r0, r0, r4
        while ((state != CONNECTED) &&
   b4c00:	42b0      	cmp	r0, r6
   b4c02:	d804      	bhi.n	b4c0e <setup+0x9a>
            run();
   b4c04:	2100      	movs	r1, #0
   b4c06:	4628      	mov	r0, r5
   b4c08:	f7ff fdf0 	bl	b47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4c0c:	e7f2      	b.n	b4bf4 <setup+0x80>
        config(auth, addr, port);
        while(this->connect() != true) {}
   b4c0e:	7f6b      	ldrb	r3, [r5, #29]
   b4c10:	2b01      	cmp	r3, #1
   b4c12:	d1e7      	bne.n	b4be4 <setup+0x70>
    pinMode(LIGHT, OUTPUT);
   b4c14:	2101      	movs	r1, #1
   b4c16:	2007      	movs	r0, #7
   b4c18:	f003 fa50 	bl	b80bc <pinMode>
   b4c1c:	a80e      	add	r0, sp, #56	; 0x38
   b4c1e:	f002 f8f1 	bl	b6e04 <spark_deviceID>
    client.connect(System.deviceID());
   b4c22:	990e      	ldr	r1, [sp, #56]	; 0x38
   b4c24:	4811      	ldr	r0, [pc, #68]	; (b4c6c <setup+0xf8>)
   b4c26:	f000 ff99 	bl	b5b5c <_ZN4MQTT7connectEPKc>
   b4c2a:	a80e      	add	r0, sp, #56	; 0x38
   b4c2c:	f002 fa3c 	bl	b70a8 <_ZN6StringD1Ev>
    if (client.isConnected())
   b4c30:	480e      	ldr	r0, [pc, #56]	; (b4c6c <setup+0xf8>)
   b4c32:	f000 fea3 	bl	b597c <_ZN4MQTT11isConnectedEv>
   b4c36:	b118      	cbz	r0, b4c40 <setup+0xcc>
        client.subscribe("christianity");
   b4c38:	490d      	ldr	r1, [pc, #52]	; (b4c70 <setup+0xfc>)
   b4c3a:	480c      	ldr	r0, [pc, #48]	; (b4c6c <setup+0xf8>)
   b4c3c:	f001 f9bd 	bl	b5fba <_ZN4MQTT9subscribeEPKc>
    display.setup();
   b4c40:	480c      	ldr	r0, [pc, #48]	; (b4c74 <setup+0x100>)
   b4c42:	f000 fcc1 	bl	b55c8 <_ZN16OledWingAdafruit5setupEv>
   b4c46:	480b      	ldr	r0, [pc, #44]	; (b4c74 <setup+0x100>)
   b4c48:	2300      	movs	r3, #0
   b4c4a:	6103      	str	r3, [r0, #16]
    display.setTextSize(1);
   b4c4c:	2101      	movs	r1, #1
   b4c4e:	f000 fc6c 	bl	b552a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4c52:	4808      	ldr	r0, [pc, #32]	; (b4c74 <setup+0x100>)
   b4c54:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4c58:	6143      	str	r3, [r0, #20]
}
   b4c5a:	b014      	add	sp, #80	; 0x50
   b4c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    display.display();
   b4c60:	f001 bd8e 	b.w	b6780 <_ZN16Adafruit_SSD13067displayEv>
   b4c64:	2003e57c 	.word	0x2003e57c
   b4c68:	000b8883 	.word	0x000b8883
   b4c6c:	2003e5d8 	.word	0x2003e5d8
   b4c70:	000b881e 	.word	0x000b881e
   b4c74:	2003e638 	.word	0x2003e638

000b4c78 <_GLOBAL__sub_I_Blynk>:
   b4c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : domain(NULL), port(0)
   b4c7a:	4d15      	ldr	r5, [pc, #84]	; (b4cd0 <_GLOBAL__sub_I_Blynk+0x58>)
SYSTEM_THREAD(ENABLED);
   b4c7c:	2100      	movs	r1, #0
   b4c7e:	2001      	movs	r0, #1
   b4c80:	f002 f83c 	bl	b6cfc <system_thread_set_state>
   b4c84:	4628      	mov	r0, r5
   b4c86:	f003 f8d7 	bl	b7e38 <_ZN9TCPClientC1Ev>
   b4c8a:	f105 001c 	add.w	r0, r5, #28
   b4c8e:	f002 fc93 	bl	b75b8 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b4c92:	4b10      	ldr	r3, [pc, #64]	; (b4cd4 <_GLOBAL__sub_I_Blynk+0x5c>)
OledWingAdafruit display;
   b4c94:	4810      	ldr	r0, [pc, #64]	; (b4cd8 <_GLOBAL__sub_I_Blynk+0x60>)
   b4c96:	2400      	movs	r4, #0
   b4c98:	e9c3 5400 	strd	r5, r4, [r3]
   b4c9c:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4ca0:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b4ca4:	619c      	str	r4, [r3, #24]
   b4ca6:	839c      	strh	r4, [r3, #28]
   b4ca8:	2107      	movs	r1, #7
   b4caa:	636c      	str	r4, [r5, #52]	; 0x34
   b4cac:	872c      	strh	r4, [r5, #56]	; 0x38
   b4cae:	f000 fc5d 	bl	b556c <_ZN16OledWingAdafruitC1Ei>
String message;
   b4cb2:	490a      	ldr	r1, [pc, #40]	; (b4cdc <_GLOBAL__sub_I_Blynk+0x64>)
   b4cb4:	480a      	ldr	r0, [pc, #40]	; (b4ce0 <_GLOBAL__sub_I_Blynk+0x68>)
   b4cb6:	f002 fa42 	bl	b713e <_ZN6StringC1EPK19__FlashStringHelper>
MQTT client("lab.thewcl.com", 1883, callback);
   b4cba:	4b0a      	ldr	r3, [pc, #40]	; (b4ce4 <_GLOBAL__sub_I_Blynk+0x6c>)
   b4cbc:	490a      	ldr	r1, [pc, #40]	; (b4ce8 <_GLOBAL__sub_I_Blynk+0x70>)
   b4cbe:	9400      	str	r4, [sp, #0]
   b4cc0:	f240 725b 	movw	r2, #1883	; 0x75b
   b4cc4:	4809      	ldr	r0, [pc, #36]	; (b4cec <_GLOBAL__sub_I_Blynk+0x74>)
   b4cc6:	f000 fd7d 	bl	b57c4 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b4cca:	b003      	add	sp, #12
   b4ccc:	bd30      	pop	{r4, r5, pc}
   b4cce:	bf00      	nop
   b4cd0:	2003e59c 	.word	0x2003e59c
   b4cd4:	2003e57c 	.word	0x2003e57c
   b4cd8:	2003e638 	.word	0x2003e638
   b4cdc:	000b8914 	.word	0x000b8914
   b4ce0:	2003e6a8 	.word	0x2003e6a8
   b4ce4:	000b40cd 	.word	0x000b40cd
   b4ce8:	000b88a4 	.word	0x000b88a4
   b4cec:	2003e5d8 	.word	0x2003e5d8

000b4cf0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4cf0:	4770      	bx	lr

000b4cf2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4cf2:	b510      	push	{r4, lr}
  }
   b4cf4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4cf6:	4604      	mov	r4, r0
  }
   b4cf8:	f7ff f9d1 	bl	b409e <_ZdlPvj>
   b4cfc:	4620      	mov	r0, r4
   b4cfe:	bd10      	pop	{r4, pc}

000b4d00 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4d00:	b40e      	push	{r1, r2, r3}
   b4d02:	b503      	push	{r0, r1, lr}
   b4d04:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4d06:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4d08:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4d0c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4d0e:	f002 faf0 	bl	b72f2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4d12:	b002      	add	sp, #8
   b4d14:	f85d eb04 	ldr.w	lr, [sp], #4
   b4d18:	b003      	add	sp, #12
   b4d1a:	4770      	bx	lr

000b4d1c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4d1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4d1e:	4604      	mov	r4, r0
   b4d20:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4d22:	7922      	ldrb	r2, [r4, #4]
   b4d24:	68a3      	ldr	r3, [r4, #8]
   b4d26:	b132      	cbz	r2, b4d36 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4d28:	b9a3      	cbnz	r3, b4d54 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4d2a:	490b      	ldr	r1, [pc, #44]	; (b4d58 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4d2c:	b002      	add	sp, #8
   b4d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4d32:	f002 baa3 	b.w	b727c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4d36:	4a09      	ldr	r2, [pc, #36]	; (b4d5c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4d38:	7b26      	ldrb	r6, [r4, #12]
   b4d3a:	4d09      	ldr	r5, [pc, #36]	; (b4d60 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4d3c:	4909      	ldr	r1, [pc, #36]	; (b4d64 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4d3e:	7b64      	ldrb	r4, [r4, #13]
   b4d40:	2e01      	cmp	r6, #1
   b4d42:	bf18      	it	ne
   b4d44:	4629      	movne	r1, r5
   b4d46:	e9cd 1400 	strd	r1, r4, [sp]
   b4d4a:	4907      	ldr	r1, [pc, #28]	; (b4d68 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4d4c:	f7ff ffd8 	bl	b4d00 <_ZN5Print6printfEPKcz>
  }
   b4d50:	b002      	add	sp, #8
   b4d52:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4d54:	4a05      	ldr	r2, [pc, #20]	; (b4d6c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4d56:	e7ef      	b.n	b4d38 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4d58:	000b891d 	.word	0x000b891d
   b4d5c:	000b8914 	.word	0x000b8914
   b4d60:	000b8919 	.word	0x000b8919
   b4d64:	000b8915 	.word	0x000b8915
   b4d68:	000b8933 	.word	0x000b8933
   b4d6c:	000b890c 	.word	0x000b890c

000b4d70 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d74:	b085      	sub	sp, #20
   b4d76:	461f      	mov	r7, r3
   b4d78:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4d7c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4d80:	eba8 0902 	sub.w	r9, r8, r2
   b4d84:	eba7 0a01 	sub.w	sl, r7, r1
   b4d88:	f1b9 0f00 	cmp.w	r9, #0
   b4d8c:	bfb8      	it	lt
   b4d8e:	f1c9 0900 	rsblt	r9, r9, #0
   b4d92:	f1ba 0f00 	cmp.w	sl, #0
   b4d96:	bfb8      	it	lt
   b4d98:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4d9c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4d9e:	4683      	mov	fp, r0
   b4da0:	460c      	mov	r4, r1
   b4da2:	4615      	mov	r5, r2
    if (steep) {
   b4da4:	dd04      	ble.n	b4db0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4da6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4da8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4daa:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4dac:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4dae:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4db0:	42bc      	cmp	r4, r7
   b4db2:	dd05      	ble.n	b4dc0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4db4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4db6:	4645      	mov	r5, r8
   b4db8:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4dba:	4622      	mov	r2, r4
   b4dbc:	463c      	mov	r4, r7
   b4dbe:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4dc0:	1b3e      	subs	r6, r7, r4
   b4dc2:	b2b2      	uxth	r2, r6
   b4dc4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4dc6:	eba8 0205 	sub.w	r2, r8, r5
   b4dca:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4dce:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4dd2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4dd6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4dda:	4545      	cmp	r5, r8
   b4ddc:	bfb4      	ite	lt
   b4dde:	2201      	movlt	r2, #1
   b4de0:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b4de4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4de6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4de8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4dea:	42bc      	cmp	r4, r7
   b4dec:	dc1c      	bgt.n	b4e28 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4dee:	f8db 2000 	ldr.w	r2, [fp]
   b4df2:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4df4:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4df6:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4dfa:	bfc7      	ittee	gt
   b4dfc:	4629      	movgt	r1, r5
   b4dfe:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4e00:	462a      	movle	r2, r5
   b4e02:	4621      	movle	r1, r4
   b4e04:	4658      	mov	r0, fp
   b4e06:	47c0      	blx	r8
        }
        err -= dy;
   b4e08:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4e0a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4e0c:	1ab6      	subs	r6, r6, r2
   b4e0e:	b2b1      	uxth	r1, r6
   b4e10:	b236      	sxth	r6, r6
        if (err < 0) {
   b4e12:	2e00      	cmp	r6, #0
   b4e14:	da05      	bge.n	b4e22 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4e16:	9a02      	ldr	r2, [sp, #8]
   b4e18:	4415      	add	r5, r2
            err += dx;
   b4e1a:	9a00      	ldr	r2, [sp, #0]
   b4e1c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4e1e:	b22d      	sxth	r5, r5
            err += dx;
   b4e20:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4e22:	3401      	adds	r4, #1
   b4e24:	b224      	sxth	r4, r4
   b4e26:	e7e0      	b.n	b4dea <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4e28:	b005      	add	sp, #20
   b4e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4e2e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4e2e:	4770      	bx	lr

000b4e30 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4e30:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4e32:	6804      	ldr	r4, [r0, #0]
   b4e34:	6924      	ldr	r4, [r4, #16]
   b4e36:	46a4      	mov	ip, r4
}
   b4e38:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4e3c:	4760      	bx	ip

000b4e3e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4e3e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4e40:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4e42:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4e46:	9502      	str	r5, [sp, #8]
   b4e48:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4e4a:	46a4      	mov	ip, r4
}
   b4e4c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4e4e:	4760      	bx	ip

000b4e50 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4e50:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4e52:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4e54:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4e58:	9502      	str	r5, [sp, #8]
   b4e5a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4e5c:	46a4      	mov	ip, r4
}
   b4e5e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4e60:	4760      	bx	ip

000b4e62 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4e62:	b470      	push	{r4, r5, r6}
   b4e64:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4e68:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4e6c:	6804      	ldr	r4, [r0, #0]
   b4e6e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4e72:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4e74:	46a4      	mov	ip, r4
}
   b4e76:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4e78:	4760      	bx	ip

000b4e7a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4e7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4e7e:	461c      	mov	r4, r3
    startWrite();
   b4e80:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4e82:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4e86:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4e88:	4605      	mov	r5, r0
   b4e8a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4e8c:	3c01      	subs	r4, #1
   b4e8e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4e90:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4e92:	b224      	sxth	r4, r4
    startWrite();
   b4e94:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4e96:	682b      	ldr	r3, [r5, #0]
   b4e98:	f8cd 8004 	str.w	r8, [sp, #4]
   b4e9c:	9400      	str	r4, [sp, #0]
   b4e9e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4ea0:	4628      	mov	r0, r5
   b4ea2:	463b      	mov	r3, r7
   b4ea4:	4632      	mov	r2, r6
   b4ea6:	4639      	mov	r1, r7
   b4ea8:	47a0      	blx	r4
    endWrite();
   b4eaa:	682b      	ldr	r3, [r5, #0]
   b4eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4eae:	4628      	mov	r0, r5
}
   b4eb0:	b002      	add	sp, #8
   b4eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4eb6:	4718      	bx	r3

000b4eb8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4eb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4ebc:	461d      	mov	r5, r3
    startWrite();
   b4ebe:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4ec0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4ec4:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4ec6:	4604      	mov	r4, r0
   b4ec8:	4617      	mov	r7, r2
   b4eca:	460e      	mov	r6, r1
    startWrite();
   b4ecc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4ece:	e9cd 7800 	strd	r7, r8, [sp]
   b4ed2:	6822      	ldr	r2, [r4, #0]
   b4ed4:	1e6b      	subs	r3, r5, #1
   b4ed6:	4433      	add	r3, r6
   b4ed8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4eda:	4620      	mov	r0, r4
   b4edc:	b21b      	sxth	r3, r3
   b4ede:	463a      	mov	r2, r7
   b4ee0:	4631      	mov	r1, r6
   b4ee2:	47a8      	blx	r5
    endWrite();
   b4ee4:	6823      	ldr	r3, [r4, #0]
   b4ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ee8:	4620      	mov	r0, r4
}
   b4eea:	b002      	add	sp, #8
   b4eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4ef0:	4718      	bx	r3

000b4ef2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4ef2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4ef6:	461e      	mov	r6, r3
    startWrite();
   b4ef8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4efa:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4efe:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4f00:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4f04:	460c      	mov	r4, r1
   b4f06:	4605      	mov	r5, r0
   b4f08:	4617      	mov	r7, r2
    startWrite();
   b4f0a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4f0c:	4426      	add	r6, r4
   b4f0e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4f10:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4f12:	da0b      	bge.n	b4f2c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4f14:	f8cd 8000 	str.w	r8, [sp]
   b4f18:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4f1c:	4621      	mov	r1, r4
   b4f1e:	464b      	mov	r3, r9
   b4f20:	463a      	mov	r2, r7
   b4f22:	4628      	mov	r0, r5
   b4f24:	3401      	adds	r4, #1
   b4f26:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4f28:	b224      	sxth	r4, r4
   b4f2a:	e7f0      	b.n	b4f0e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f2e:	4628      	mov	r0, r5
}
   b4f30:	b002      	add	sp, #8
   b4f32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4f36:	4718      	bx	r3

000b4f38 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4f38:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4f3a:	6802      	ldr	r2, [r0, #0]
   b4f3c:	9101      	str	r1, [sp, #4]
   b4f3e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4f42:	9100      	str	r1, [sp, #0]
   b4f44:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4f46:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4f4a:	2200      	movs	r2, #0
   b4f4c:	4611      	mov	r1, r2
   b4f4e:	47a0      	blx	r4
}
   b4f50:	b002      	add	sp, #8
   b4f52:	bd10      	pop	{r4, pc}

000b4f54 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4f58:	4299      	cmp	r1, r3
        uint16_t color) {
   b4f5a:	4616      	mov	r6, r2
   b4f5c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4f60:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4f64:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4f66:	4680      	mov	r8, r0
   b4f68:	460d      	mov	r5, r1
   b4f6a:	461c      	mov	r4, r3
    if(x0 == x1){
   b4f6c:	d113      	bne.n	b4f96 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4f6e:	42be      	cmp	r6, r7
   b4f70:	bfc8      	it	gt
   b4f72:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4f74:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4f78:	bfc4      	itt	gt
   b4f7a:	463e      	movgt	r6, r7
   b4f7c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4f7e:	1c7b      	adds	r3, r7, #1
   b4f80:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4f82:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4f84:	b21b      	sxth	r3, r3
   b4f86:	4632      	mov	r2, r6
   b4f88:	4629      	mov	r1, r5
   b4f8a:	4640      	mov	r0, r8
   b4f8c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4f8e:	b003      	add	sp, #12
   b4f90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4f94:	4760      	bx	ip
    } else if(y0 == y1){
   b4f96:	42be      	cmp	r6, r7
   b4f98:	d10a      	bne.n	b4fb0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4f9a:	4299      	cmp	r1, r3
   b4f9c:	bfc2      	ittt	gt
   b4f9e:	460b      	movgt	r3, r1
   b4fa0:	4625      	movgt	r5, r4
   b4fa2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4fa4:	1c63      	adds	r3, r4, #1
   b4fa6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4faa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4fac:	1b5b      	subs	r3, r3, r5
   b4fae:	e7e9      	b.n	b4f84 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4fb0:	6953      	ldr	r3, [r2, #20]
   b4fb2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4fb4:	e9cd 7900 	strd	r7, r9, [sp]
   b4fb8:	f8d8 3000 	ldr.w	r3, [r8]
   b4fbc:	4640      	mov	r0, r8
   b4fbe:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4fc0:	4632      	mov	r2, r6
   b4fc2:	4623      	mov	r3, r4
   b4fc4:	4629      	mov	r1, r5
   b4fc6:	47b8      	blx	r7
        endWrite();
   b4fc8:	f8d8 3000 	ldr.w	r3, [r8]
   b4fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fce:	4640      	mov	r0, r8
}
   b4fd0:	b003      	add	sp, #12
   b4fd2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4fd6:	4718      	bx	r3

000b4fd8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4fd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4fdc:	461d      	mov	r5, r3
    startWrite();
   b4fde:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4fe0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4fe4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4fe6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4fea:	4604      	mov	r4, r0
   b4fec:	460f      	mov	r7, r1
   b4fee:	4616      	mov	r6, r2
    startWrite();
   b4ff0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4ff2:	6823      	ldr	r3, [r4, #0]
   b4ff4:	f8cd 8000 	str.w	r8, [sp]
   b4ff8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4ffc:	4632      	mov	r2, r6
   b4ffe:	462b      	mov	r3, r5
   b5000:	4639      	mov	r1, r7
   b5002:	4620      	mov	r0, r4
   b5004:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5006:	6823      	ldr	r3, [r4, #0]
   b5008:	f8cd 8000 	str.w	r8, [sp]
   b500c:	f109 32ff 	add.w	r2, r9, #4294967295
   b5010:	4432      	add	r2, r6
   b5012:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5016:	4639      	mov	r1, r7
   b5018:	462b      	mov	r3, r5
   b501a:	4620      	mov	r0, r4
   b501c:	b212      	sxth	r2, r2
   b501e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5020:	6823      	ldr	r3, [r4, #0]
   b5022:	f8cd 8000 	str.w	r8, [sp]
   b5026:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b502a:	4632      	mov	r2, r6
   b502c:	464b      	mov	r3, r9
   b502e:	4639      	mov	r1, r7
   b5030:	4620      	mov	r0, r4
   b5032:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5034:	1e6b      	subs	r3, r5, #1
   b5036:	19d9      	adds	r1, r3, r7
   b5038:	6823      	ldr	r3, [r4, #0]
   b503a:	f8cd 8000 	str.w	r8, [sp]
   b503e:	6a1d      	ldr	r5, [r3, #32]
   b5040:	4620      	mov	r0, r4
   b5042:	464b      	mov	r3, r9
   b5044:	4632      	mov	r2, r6
   b5046:	b209      	sxth	r1, r1
   b5048:	47a8      	blx	r5
    endWrite();
   b504a:	6823      	ldr	r3, [r4, #0]
   b504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b504e:	4620      	mov	r0, r4
}
   b5050:	b002      	add	sp, #8
   b5052:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5056:	4718      	bx	r3

000b5058 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5058:	4770      	bx	lr

000b505a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b505a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b505e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5062:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5064:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5066:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b506a:	bf59      	ittee	pl
   b506c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b506e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5070:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5072:	81c3      	strhmi	r3, [r0, #14]
}
   b5074:	4770      	bx	lr
	...

000b5078 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5078:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b507a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b507c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b507e:	4a07      	ldr	r2, [pc, #28]	; (b509c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5080:	4d07      	ldr	r5, [pc, #28]	; (b50a0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5082:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5084:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5086:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5088:	f04f 31ff 	mov.w	r1, #4294967295
   b508c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5090:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5092:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5094:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5096:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5098:	6204      	str	r4, [r0, #32]
}
   b509a:	bd30      	pop	{r4, r5, pc}
   b509c:	01000101 	.word	0x01000101
   b50a0:	000b8e58 	.word	0x000b8e58

000b50a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b50a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50a8:	b089      	sub	sp, #36	; 0x24
   b50aa:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b50ae:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b50b0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b50b4:	9304      	str	r3, [sp, #16]
   b50b6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b50ba:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b50bc:	9305      	str	r3, [sp, #20]
   b50be:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b50c2:	4604      	mov	r4, r0
    startWrite();
   b50c4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b50c6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b50ca:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b50ce:	bf48      	it	mi
   b50d0:	f108 020e 	addmi.w	r2, r8, #14
   b50d4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b50d8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b50da:	4635      	mov	r5, r6
   b50dc:	9b03      	ldr	r3, [sp, #12]
   b50de:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b50e0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b50e4:	189a      	adds	r2, r3, r2
   b50e6:	9b05      	ldr	r3, [sp, #20]
   b50e8:	428b      	cmp	r3, r1
   b50ea:	b212      	sxth	r2, r2
   b50ec:	dd27      	ble.n	b513e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b50ee:	9b04      	ldr	r3, [sp, #16]
   b50f0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b50f2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b50f6:	9306      	str	r3, [sp, #24]
   b50f8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b50fc:	4580      	cmp	r8, r0
   b50fe:	fa1f f189 	uxth.w	r1, r9
   b5102:	dd17      	ble.n	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5104:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5106:	bf05      	ittet	eq
   b5108:	9b06      	ldreq	r3, [sp, #24]
   b510a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b510c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b510e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5110:	bf18      	it	ne
   b5112:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5114:	062b      	lsls	r3, r5, #24
   b5116:	d50a      	bpl.n	b512e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5118:	9b02      	ldr	r3, [sp, #8]
   b511a:	6820      	ldr	r0, [r4, #0]
   b511c:	9207      	str	r2, [sp, #28]
   b511e:	4419      	add	r1, r3
   b5120:	6983      	ldr	r3, [r0, #24]
   b5122:	b209      	sxth	r1, r1
   b5124:	461f      	mov	r7, r3
   b5126:	4620      	mov	r0, r4
   b5128:	4653      	mov	r3, sl
   b512a:	47b8      	blx	r7
   b512c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b512e:	f109 0901 	add.w	r9, r9, #1
   b5132:	e7e1      	b.n	b50f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5134:	9b01      	ldr	r3, [sp, #4]
   b5136:	3301      	adds	r3, #1
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	445e      	add	r6, fp
   b513c:	e7ce      	b.n	b50dc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b513e:	6823      	ldr	r3, [r4, #0]
   b5140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5142:	4620      	mov	r0, r4
}
   b5144:	b009      	add	sp, #36	; 0x24
   b5146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b514a:	4718      	bx	r3

000b514c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5150:	ed2d 8b02 	vpush	{d8}
   b5154:	b091      	sub	sp, #68	; 0x44
   b5156:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5158:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b515a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b515e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5162:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5166:	9103      	str	r1, [sp, #12]
   b5168:	461f      	mov	r7, r3
   b516a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b516e:	9304      	str	r3, [sp, #16]
   b5170:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5172:	2a00      	cmp	r2, #0
   b5174:	f040 80c5 	bne.w	b5302 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5178:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b517c:	428b      	cmp	r3, r1
   b517e:	f340 814c 	ble.w	b541a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5182:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5186:	42b3      	cmp	r3, r6
   b5188:	f340 8147 	ble.w	b541a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b518c:	2306      	movs	r3, #6
   b518e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5192:	2b00      	cmp	r3, #0
   b5194:	f340 8141 	ble.w	b541a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5198:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b519c:	2b00      	cmp	r3, #0
   b519e:	f340 813c 	ble.w	b541a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b51a2:	7f03      	ldrb	r3, [r0, #28]
   b51a4:	b91b      	cbnz	r3, b51ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b51a6:	2faf      	cmp	r7, #175	; 0xaf
   b51a8:	bf84      	itt	hi
   b51aa:	3701      	addhi	r7, #1
   b51ac:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b51ae:	f8db 3000 	ldr.w	r3, [fp]
   b51b2:	4658      	mov	r0, fp
   b51b4:	695b      	ldr	r3, [r3, #20]
   b51b6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b51b8:	2205      	movs	r2, #5
   b51ba:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b51bc:	2200      	movs	r2, #0
   b51be:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b51c0:	4a98      	ldr	r2, [pc, #608]	; (b5424 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b51c2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b51c6:	18d3      	adds	r3, r2, r3
   b51c8:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b51ca:	b2b3      	uxth	r3, r6
   b51cc:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b51ce:	9a05      	ldr	r2, [sp, #20]
   b51d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b51d2:	5c9b      	ldrb	r3, [r3, r2]
   b51d4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b51d6:	b2ab      	uxth	r3, r5
   b51d8:	930b      	str	r3, [sp, #44]	; 0x2c
   b51da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b51de:	9308      	str	r3, [sp, #32]
   b51e0:	9b03      	ldr	r3, [sp, #12]
   b51e2:	fb02 f905 	mul.w	r9, r2, r5
   b51e6:	fa19 f983 	uxtah	r9, r9, r3
   b51ea:	fa0f f389 	sxth.w	r3, r9
   b51ee:	ee08 3a10 	vmov	s16, r3
   b51f2:	2308      	movs	r3, #8
   b51f4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b51f6:	9b03      	ldr	r3, [sp, #12]
   b51f8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b51fc:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5200:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5204:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5206:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b520a:	07d2      	lsls	r2, r2, #31
   b520c:	d552      	bpl.n	b52b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b520e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5210:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5214:	d13e      	bne.n	b5294 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5216:	2c01      	cmp	r4, #1
   b5218:	d13c      	bne.n	b5294 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b521a:	699b      	ldr	r3, [r3, #24]
   b521c:	9906      	ldr	r1, [sp, #24]
   b521e:	461f      	mov	r7, r3
   b5220:	9b04      	ldr	r3, [sp, #16]
   b5222:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5224:	b212      	sxth	r2, r2
   b5226:	4651      	mov	r1, sl
   b5228:	4658      	mov	r0, fp
   b522a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b522c:	f109 0301 	add.w	r3, r9, #1
   b5230:	fa4f f983 	sxtb.w	r9, r3
   b5234:	9b07      	ldr	r3, [sp, #28]
   b5236:	085b      	lsrs	r3, r3, #1
   b5238:	9307      	str	r3, [sp, #28]
   b523a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b523c:	3b01      	subs	r3, #1
   b523e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5242:	930a      	str	r3, [sp, #40]	; 0x28
   b5244:	d1de      	bne.n	b5204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5246:	9f05      	ldr	r7, [sp, #20]
   b5248:	3701      	adds	r7, #1
   b524a:	b27b      	sxtb	r3, r7
   b524c:	9305      	str	r3, [sp, #20]
   b524e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5250:	3b01      	subs	r3, #1
   b5252:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5256:	9309      	str	r3, [sp, #36]	; 0x24
   b5258:	d1b9      	bne.n	b51ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b525a:	9b04      	ldr	r3, [sp, #16]
   b525c:	4543      	cmp	r3, r8
   b525e:	d00f      	beq.n	b5280 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5260:	2d01      	cmp	r5, #1
   b5262:	f8db 3000 	ldr.w	r3, [fp]
   b5266:	d13b      	bne.n	b52e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5268:	2c01      	cmp	r4, #1
   b526a:	d139      	bne.n	b52e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b526c:	9908      	ldr	r1, [sp, #32]
   b526e:	f8cd 8000 	str.w	r8, [sp]
   b5272:	3105      	adds	r1, #5
   b5274:	6a1c      	ldr	r4, [r3, #32]
   b5276:	4632      	mov	r2, r6
   b5278:	2308      	movs	r3, #8
   b527a:	b209      	sxth	r1, r1
   b527c:	4658      	mov	r0, fp
   b527e:	47a0      	blx	r4
        endWrite();
   b5280:	f8db 3000 	ldr.w	r3, [fp]
   b5284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5286:	4658      	mov	r0, fp
}
   b5288:	b011      	add	sp, #68	; 0x44
   b528a:	ecbd 8b02 	vpop	{d8}
   b528e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5292:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5294:	9906      	ldr	r1, [sp, #24]
   b5296:	fb14 f202 	smulbb	r2, r4, r2
   b529a:	440a      	add	r2, r1
   b529c:	9904      	ldr	r1, [sp, #16]
   b529e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b52a0:	9400      	str	r4, [sp, #0]
   b52a2:	69db      	ldr	r3, [r3, #28]
   b52a4:	ee18 1a10 	vmov	r1, s16
   b52a8:	461f      	mov	r7, r3
   b52aa:	b212      	sxth	r2, r2
   b52ac:	462b      	mov	r3, r5
   b52ae:	4658      	mov	r0, fp
   b52b0:	47b8      	blx	r7
   b52b2:	e7bb      	b.n	b522c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b52b4:	9a04      	ldr	r2, [sp, #16]
   b52b6:	4542      	cmp	r2, r8
   b52b8:	d0b8      	beq.n	b522c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b52ba:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b52bc:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b52c0:	d107      	bne.n	b52d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b52c2:	2c01      	cmp	r4, #1
   b52c4:	d105      	bne.n	b52d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b52c6:	699b      	ldr	r3, [r3, #24]
   b52c8:	9906      	ldr	r1, [sp, #24]
   b52ca:	461f      	mov	r7, r3
   b52cc:	440a      	add	r2, r1
   b52ce:	4643      	mov	r3, r8
   b52d0:	e7a8      	b.n	b5224 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b52d2:	9906      	ldr	r1, [sp, #24]
   b52d4:	f8cd 8004 	str.w	r8, [sp, #4]
   b52d8:	fb14 f202 	smulbb	r2, r4, r2
   b52dc:	440a      	add	r2, r1
   b52de:	e7df      	b.n	b52a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b52e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b52e2:	f8cd 8004 	str.w	r8, [sp, #4]
   b52e6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b52ea:	9a08      	ldr	r2, [sp, #32]
   b52ec:	00e4      	lsls	r4, r4, #3
   b52ee:	440a      	add	r2, r1
   b52f0:	4611      	mov	r1, r2
   b52f2:	9400      	str	r4, [sp, #0]
   b52f4:	69dc      	ldr	r4, [r3, #28]
   b52f6:	4632      	mov	r2, r6
   b52f8:	462b      	mov	r3, r5
   b52fa:	b209      	sxth	r1, r1
   b52fc:	4658      	mov	r0, fp
   b52fe:	47a0      	blx	r4
        endWrite();
   b5300:	e7be      	b.n	b5280 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5302:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5304:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5306:	6812      	ldr	r2, [r2, #0]
   b5308:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b530a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b530c:	b2ff      	uxtb	r7, r7
   b530e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5312:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5316:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5318:	789a      	ldrb	r2, [r3, #2]
   b531a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b531c:	78da      	ldrb	r2, [r3, #3]
   b531e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5320:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5322:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5326:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b532a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b532c:	d801      	bhi.n	b5332 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b532e:	2c01      	cmp	r4, #1
   b5330:	d957      	bls.n	b53e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5332:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5336:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5338:	fa0f f38a 	sxth.w	r3, sl
   b533c:	9307      	str	r3, [sp, #28]
        startWrite();
   b533e:	f8db 3000 	ldr.w	r3, [fp]
   b5342:	4658      	mov	r0, fp
   b5344:	695b      	ldr	r3, [r3, #20]
   b5346:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5348:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b534a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b534e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5350:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5354:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5356:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5358:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b535a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b535c:	429f      	cmp	r7, r3
   b535e:	d28f      	bcs.n	b5280 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5360:	9b07      	ldr	r3, [sp, #28]
   b5362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5364:	443b      	add	r3, r7
   b5366:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b536a:	2200      	movs	r2, #0
   b536c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b536e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5370:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5372:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5376:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b537a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b537e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5380:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5382:	9905      	ldr	r1, [sp, #20]
   b5384:	4291      	cmp	r1, r2
   b5386:	d241      	bcs.n	b540c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5388:	1c5a      	adds	r2, r3, #1
   b538a:	b2d2      	uxtb	r2, r2
   b538c:	075b      	lsls	r3, r3, #29
   b538e:	920d      	str	r2, [sp, #52]	; 0x34
   b5390:	d107      	bne.n	b53a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5392:	9b06      	ldr	r3, [sp, #24]
   b5394:	9906      	ldr	r1, [sp, #24]
   b5396:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5398:	3301      	adds	r3, #1
   b539a:	b29b      	uxth	r3, r3
   b539c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b53a0:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b53a2:	f019 0f80 	tst.w	r9, #128	; 0x80
   b53a6:	d012      	beq.n	b53ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b53a8:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53aa:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b53ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b53b2:	d11a      	bne.n	b53ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b53b4:	2c01      	cmp	r4, #1
   b53b6:	d118      	bne.n	b53ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b53ba:	699b      	ldr	r3, [r3, #24]
   b53bc:	4411      	add	r1, r2
   b53be:	9a05      	ldr	r2, [sp, #20]
   b53c0:	4411      	add	r1, r2
   b53c2:	461e      	mov	r6, r3
   b53c4:	4652      	mov	r2, sl
   b53c6:	9b04      	ldr	r3, [sp, #16]
   b53c8:	b209      	sxth	r1, r1
   b53ca:	4658      	mov	r0, fp
   b53cc:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b53ce:	9e05      	ldr	r6, [sp, #20]
   b53d0:	3601      	adds	r6, #1
   b53d2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b53d4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b53d8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b53da:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b53de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b53e0:	e7ce      	b.n	b5380 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b53e2:	2300      	movs	r3, #0
   b53e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b53e8:	e7a9      	b.n	b533e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53ea:	9805      	ldr	r0, [sp, #20]
   b53ec:	9a08      	ldr	r2, [sp, #32]
   b53ee:	4402      	add	r2, r0
   b53f0:	fb02 1105 	mla	r1, r2, r5, r1
   b53f4:	9a04      	ldr	r2, [sp, #16]
   b53f6:	e9cd 4200 	strd	r4, r2, [sp]
   b53fa:	69db      	ldr	r3, [r3, #28]
   b53fc:	ee18 2a10 	vmov	r2, s16
   b5400:	461e      	mov	r6, r3
   b5402:	b209      	sxth	r1, r1
   b5404:	462b      	mov	r3, r5
   b5406:	4658      	mov	r0, fp
   b5408:	47b0      	blx	r6
   b540a:	e7e0      	b.n	b53ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b540c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b540e:	3701      	adds	r7, #1
   b5410:	4498      	add	r8, r3
   b5412:	fa5f f888 	uxtb.w	r8, r8
   b5416:	b2ff      	uxtb	r7, r7
   b5418:	e79f      	b.n	b535a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b541a:	b011      	add	sp, #68	; 0x44
   b541c:	ecbd 8b02 	vpop	{d8}
   b5420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5424:	000b8950 	.word	0x000b8950

000b5428 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5428:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b542a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b542c:	b085      	sub	sp, #20
   b542e:	4604      	mov	r4, r0
   b5430:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5432:	2a00      	cmp	r2, #0
   b5434:	d134      	bne.n	b54a0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5436:	290a      	cmp	r1, #10
   b5438:	d108      	bne.n	b544c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b543a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b543c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b543e:	7e42      	ldrb	r2, [r0, #25]
   b5440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5444:	8263      	strh	r3, [r4, #18]
}
   b5446:	2001      	movs	r0, #1
   b5448:	b005      	add	sp, #20
   b544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b544c:	290d      	cmp	r1, #13
   b544e:	d0fa      	beq.n	b5446 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5450:	7ee1      	ldrb	r1, [r4, #27]
   b5452:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5454:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5456:	b171      	cbz	r1, b5476 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5458:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b545c:	2106      	movs	r1, #6
   b545e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5462:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5466:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5468:	bfc1      	itttt	gt
   b546a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b546e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5470:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5474:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5476:	8ae2      	ldrh	r2, [r4, #22]
   b5478:	9201      	str	r2, [sp, #4]
   b547a:	8aa2      	ldrh	r2, [r4, #20]
   b547c:	9200      	str	r2, [sp, #0]
   b547e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5482:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5486:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b548a:	4620      	mov	r0, r4
   b548c:	f7ff fe5e 	bl	b514c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5490:	7e23      	ldrb	r3, [r4, #24]
   b5492:	8a22      	ldrh	r2, [r4, #16]
   b5494:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5498:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b549c:	8223      	strh	r3, [r4, #16]
   b549e:	e7d2      	b.n	b5446 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b54a0:	290a      	cmp	r1, #10
   b54a2:	d107      	bne.n	b54b4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b54a4:	2300      	movs	r3, #0
   b54a6:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b54a8:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b54aa:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b54ac:	8a43      	ldrh	r3, [r0, #18]
   b54ae:	fb01 3302 	mla	r3, r1, r2, r3
   b54b2:	e7c7      	b.n	b5444 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b54b4:	290d      	cmp	r1, #13
   b54b6:	d0c6      	beq.n	b5446 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b54b8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b54ba:	42a9      	cmp	r1, r5
   b54bc:	d3c3      	bcc.n	b5446 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b54be:	7a51      	ldrb	r1, [r2, #9]
   b54c0:	4299      	cmp	r1, r3
   b54c2:	d3c0      	bcc.n	b5446 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b54c4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b54c6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b54c8:	b2ed      	uxtb	r5, r5
   b54ca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b54ce:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b54d0:	b328      	cbz	r0, b551e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b54d2:	78e9      	ldrb	r1, [r5, #3]
   b54d4:	b319      	cbz	r1, b551e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b54d6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b54d8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b54da:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b54dc:	b191      	cbz	r1, b5504 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b54de:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b54e2:	4408      	add	r0, r1
   b54e4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b54e8:	fb06 1100 	mla	r1, r6, r0, r1
   b54ec:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b54f0:	4281      	cmp	r1, r0
   b54f2:	dd07      	ble.n	b5504 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b54f4:	2000      	movs	r0, #0
   b54f6:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b54f8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b54fc:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b54fe:	fb02 1207 	mla	r2, r2, r7, r1
   b5502:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5504:	8ae2      	ldrh	r2, [r4, #22]
   b5506:	9201      	str	r2, [sp, #4]
   b5508:	8aa2      	ldrh	r2, [r4, #20]
   b550a:	9200      	str	r2, [sp, #0]
   b550c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5510:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5514:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5518:	4620      	mov	r0, r4
   b551a:	f7ff fe17 	bl	b514c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b551e:	7929      	ldrb	r1, [r5, #4]
   b5520:	7e22      	ldrb	r2, [r4, #24]
   b5522:	8a23      	ldrh	r3, [r4, #16]
   b5524:	fb01 3302 	mla	r3, r1, r2, r3
   b5528:	e7b8      	b.n	b549c <_ZN12Adafruit_GFX5writeEh+0x74>

000b552a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b552a:	2901      	cmp	r1, #1
   b552c:	bf38      	it	cc
   b552e:	2101      	movcc	r1, #1
   b5530:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5532:	7641      	strb	r1, [r0, #25]
}
   b5534:	4770      	bx	lr
	...

000b5538 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5538:	b510      	push	{r4, lr}
   b553a:	4b06      	ldr	r3, [pc, #24]	; (b5554 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b553c:	6003      	str	r3, [r0, #0]
   b553e:	4604      	mov	r4, r0
	if (mutex) {
   b5540:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b5542:	b108      	cbz	r0, b5548 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5544:	f001 fa4a 	bl	b69dc <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5548:	4620      	mov	r0, r4
   b554a:	f000 fd39 	bl	b5fc0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b554e:	4620      	mov	r0, r4
   b5550:	bd10      	pop	{r4, pc}
   b5552:	bf00      	nop
   b5554:	000b8eb0 	.word	0x000b8eb0

000b5558 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5558:	b510      	push	{r4, lr}
   b555a:	4604      	mov	r4, r0
}
   b555c:	f7ff ffec 	bl	b5538 <_ZN16OledWingAdafruitD1Ev>
   b5560:	4620      	mov	r0, r4
   b5562:	2170      	movs	r1, #112	; 0x70
   b5564:	f7fe fd9b 	bl	b409e <_ZdlPvj>
   b5568:	4620      	mov	r0, r4
   b556a:	bd10      	pop	{r4, pc}

000b556c <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b556c:	b530      	push	{r4, r5, lr}
   b556e:	b085      	sub	sp, #20
   b5570:	4604      	mov	r4, r0
   b5572:	460d      	mov	r5, r1
   b5574:	f002 fe74 	bl	b8260 <_Z19__fetch_global_Wirev>
   b5578:	4a10      	ldr	r2, [pc, #64]	; (b55bc <_ZN16OledWingAdafruitC1Ei+0x50>)
   b557a:	4911      	ldr	r1, [pc, #68]	; (b55c0 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b557c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5580:	f04f 32ff 	mov.w	r2, #4294967295
   b5584:	2180      	movs	r1, #128	; 0x80
   b5586:	4603      	mov	r3, r0
   b5588:	9200      	str	r2, [sp, #0]
   b558a:	4620      	mov	r0, r4
   b558c:	2220      	movs	r2, #32
   b558e:	f000 fd8f 	bl	b60b0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b5592:	4b0c      	ldr	r3, [pc, #48]	; (b55c4 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5594:	6023      	str	r3, [r4, #0]
   b5596:	2300      	movs	r3, #0
   b5598:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b559c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b55a0:	f000 f872 	bl	b5688 <_ZN8DebounceC1Ev>
   b55a4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b55a8:	f000 f86e 	bl	b5688 <_ZN8DebounceC1Ev>
   b55ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b55b0:	f000 f86a 	bl	b5688 <_ZN8DebounceC1Ev>
}
   b55b4:	4620      	mov	r0, r4
   b55b6:	b005      	add	sp, #20
   b55b8:	bd30      	pop	{r4, r5, pc}
   b55ba:	bf00      	nop
   b55bc:	00061a80 	.word	0x00061a80
   b55c0:	000186a0 	.word	0x000186a0
   b55c4:	000b8eb0 	.word	0x000b8eb0

000b55c8 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b55c8:	b513      	push	{r0, r1, r4, lr}
   b55ca:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b55cc:	3050      	adds	r0, #80	; 0x50
   b55ce:	f001 f9fd 	bl	b69cc <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b55d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b55d4:	07d9      	lsls	r1, r3, #31
   b55d6:	d505      	bpl.n	b55e4 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b55d8:	2202      	movs	r2, #2
   b55da:	2104      	movs	r1, #4
   b55dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b55e0:	f000 f866 	bl	b56b0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b55e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b55e6:	079a      	lsls	r2, r3, #30
   b55e8:	d505      	bpl.n	b55f6 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b55ea:	2200      	movs	r2, #0
   b55ec:	2103      	movs	r1, #3
   b55ee:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b55f2:	f000 f85d 	bl	b56b0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b55f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b55f8:	075b      	lsls	r3, r3, #29
   b55fa:	d505      	bpl.n	b5608 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b55fc:	2202      	movs	r2, #2
   b55fe:	4611      	mov	r1, r2
   b5600:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5604:	f000 f854 	bl	b56b0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5608:	2301      	movs	r3, #1
   b560a:	9300      	str	r3, [sp, #0]
   b560c:	223c      	movs	r2, #60	; 0x3c
   b560e:	2102      	movs	r1, #2
   b5610:	4620      	mov	r0, r4
   b5612:	f000 fe55 	bl	b62c0 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5616:	b002      	add	sp, #8
   b5618:	bd10      	pop	{r4, pc}

000b561a <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b561a:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b561c:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b561e:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5620:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5622:	d502      	bpl.n	b562a <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5624:	3058      	adds	r0, #88	; 0x58
   b5626:	f000 f850 	bl	b56ca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b562a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b562c:	079a      	lsls	r2, r3, #30
   b562e:	d503      	bpl.n	b5638 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5630:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5634:	f000 f849 	bl	b56ca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5638:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b563a:	075b      	lsls	r3, r3, #29
   b563c:	d505      	bpl.n	b564a <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b563e:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b5646:	f000 b840 	b.w	b56ca <_ZN8Debounce6updateEv>
}
   b564a:	bd10      	pop	{r4, pc}

000b564c <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b564c:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b564e:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b5650:	f013 0001 	ands.w	r0, r3, #1
   b5654:	d003      	beq.n	b565e <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b5656:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b565a:	f000 b866 	b.w	b572a <_ZN8Debounce4fellEv>
}
   b565e:	4770      	bx	lr

000b5660 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b5660:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b5662:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b5664:	f013 0002 	ands.w	r0, r3, #2
   b5668:	d003      	beq.n	b5672 <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b566a:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b566e:	f000 b85c 	b.w	b572a <_ZN8Debounce4fellEv>
}
   b5672:	4770      	bx	lr

000b5674 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b5674:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b5676:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b5678:	f013 0004 	ands.w	r0, r3, #4
   b567c:	d003      	beq.n	b5686 <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b567e:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b5682:	f000 b852 	b.w	b572a <_ZN8Debounce4fellEv>
}
   b5686:	4770      	bx	lr

000b5688 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5688:	2100      	movs	r1, #0
   b568a:	220a      	movs	r2, #10
   b568c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5690:	4770      	bx	lr

000b5692 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5692:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5694:	b510      	push	{r4, lr}
   b5696:	4604      	mov	r4, r0
    this->pin = pin;
   b5698:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b569a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b569c:	b288      	uxth	r0, r1
   b569e:	f002 fd37 	bl	b8110 <digitalRead>
   b56a2:	b108      	cbz	r0, b56a8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b56a4:	2303      	movs	r3, #3
   b56a6:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b56a8:	f001 f988 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b56ac:	6020      	str	r0, [r4, #0]
#endif
}
   b56ae:	bd10      	pop	{r4, pc}

000b56b0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b56b0:	b538      	push	{r3, r4, r5, lr}
   b56b2:	460c      	mov	r4, r1
   b56b4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b56b6:	4611      	mov	r1, r2
   b56b8:	b2a0      	uxth	r0, r4
   b56ba:	f002 fcff 	bl	b80bc <pinMode>
  
  this->attach(pin);
   b56be:	4621      	mov	r1, r4
   b56c0:	4628      	mov	r0, r5
}
   b56c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b56c6:	f7ff bfe4 	b.w	b5692 <_ZN8Debounce6attachEi>

000b56ca <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b56ca:	b538      	push	{r3, r4, r5, lr}
   b56cc:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b56ce:	79c0      	ldrb	r0, [r0, #7]
   b56d0:	f002 fd1e 	bl	b8110 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b56d4:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b56d6:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b56d8:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b56dc:	bf18      	it	ne
   b56de:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b56e0:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b56e4:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b56e6:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b56e8:	d00a      	beq.n	b5700 <_ZN8Debounce6updateEv+0x36>
   b56ea:	f001 f967 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b56ee:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b56f0:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b56f2:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b56f6:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b56f8:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b56fa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b56fe:	bd38      	pop	{r3, r4, r5, pc}
   b5700:	f001 f95c 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5704:	6823      	ldr	r3, [r4, #0]
   b5706:	1ac0      	subs	r0, r0, r3
   b5708:	88a3      	ldrh	r3, [r4, #4]
   b570a:	4298      	cmp	r0, r3
   b570c:	d3f4      	bcc.n	b56f8 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b570e:	79a3      	ldrb	r3, [r4, #6]
   b5710:	f003 0301 	and.w	r3, r3, #1
   b5714:	42ab      	cmp	r3, r5
   b5716:	d0ef      	beq.n	b56f8 <_ZN8Debounce6updateEv+0x2e>
   b5718:	f001 f950 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b571c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b571e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5720:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5724:	f043 0308 	orr.w	r3, r3, #8
   b5728:	e7e5      	b.n	b56f6 <_ZN8Debounce6updateEv+0x2c>

000b572a <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b572a:	7980      	ldrb	r0, [r0, #6]
   b572c:	f000 0009 	and.w	r0, r0, #9
   b5730:	f1a0 0308 	sub.w	r3, r0, #8
   b5734:	4258      	negs	r0, r3
   b5736:	4158      	adcs	r0, r3
   b5738:	4770      	bx	lr

000b573a <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b573a:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b573e:	b510      	push	{r4, lr}
   b5740:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5742:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5744:	b113      	cbz	r3, b574c <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5746:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5748:	f001 f950 	bl	b69ec <os_mutex_lock>
#endif
#endif
#endif
        }
   b574c:	4620      	mov	r0, r4
   b574e:	bd10      	pop	{r4, pc}

000b5750 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5750:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5752:	6803      	ldr	r3, [r0, #0]
   b5754:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b5758:	4604      	mov	r4, r0
            if (mqtt->thread)
   b575a:	b112      	cbz	r2, b5762 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b575c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b575e:	f001 f94d 	bl	b69fc <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5762:	4620      	mov	r0, r4
   b5764:	bd10      	pop	{r4, pc}

000b5766 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5768:	461f      	mov	r7, r3
   b576a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b576e:	4604      	mov	r4, r0
   b5770:	460d      	mov	r5, r1
   b5772:	4616      	mov	r6, r2
    if (thread) {
   b5774:	b12b      	cbz	r3, b5782 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5776:	2301      	movs	r3, #1
   b5778:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b577c:	3058      	adds	r0, #88	; 0x58
   b577e:	f001 f925 	bl	b69cc <os_mutex_create>
    }
    this->callback = callback;
   b5782:	9b08      	ldr	r3, [sp, #32]
   b5784:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5786:	2300      	movs	r3, #0
   b5788:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b578a:	b106      	cbz	r6, b578e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b578c:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b578e:	b125      	cbz	r5, b579a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5790:	4629      	mov	r1, r5
   b5792:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5796:	f001 fce6 	bl	b7166 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b579a:	9b06      	ldr	r3, [sp, #24]
   b579c:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b579e:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b57a0:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b57a2:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b57a6:	2bff      	cmp	r3, #255	; 0xff
   b57a8:	bfb8      	it	lt
   b57aa:	23ff      	movlt	r3, #255	; 0xff
   b57ac:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b57b0:	b108      	cbz	r0, b57b6 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b57b2:	f7fe fc72 	bl	b409a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b57b6:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b57ba:	f7fe fc6c 	bl	b4096 <_Znaj>
   b57be:	61e0      	str	r0, [r4, #28]
}
   b57c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b57c4 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b57c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b57c8:	4604      	mov	r4, r0
            bool thread) {
   b57ca:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b57cc:	4617      	mov	r7, r2
   b57ce:	4698      	mov	r8, r3
   b57d0:	460e      	mov	r6, r1
            bool thread) {
   b57d2:	f002 fb31 	bl	b7e38 <_ZN9TCPClientC1Ev>
   b57d6:	490d      	ldr	r1, [pc, #52]	; (b580c <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b57d8:	61e5      	str	r5, [r4, #28]
   b57da:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b57de:	f001 fcae 	bl	b713e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b57e2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b57e6:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b57e8:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b57ec:	22ff      	movs	r2, #255	; 0xff
   b57ee:	230f      	movs	r3, #15
   b57f0:	e9cd 3200 	strd	r3, r2, [sp]
   b57f4:	4620      	mov	r0, r4
            bool thread) {
   b57f6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b57fa:	463b      	mov	r3, r7
   b57fc:	462a      	mov	r2, r5
   b57fe:	4631      	mov	r1, r6
   b5800:	f7ff ffb1 	bl	b5766 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5804:	4620      	mov	r0, r4
   b5806:	b004      	add	sp, #16
   b5808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b580c:	000b8914 	.word	0x000b8914

000b5810 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5810:	b510      	push	{r4, lr}
   b5812:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5814:	4620      	mov	r0, r4
   b5816:	f002 fa6b 	bl	b7cf0 <_ZN9TCPClient9availableEv>
   b581a:	2800      	cmp	r0, #0
   b581c:	d0fa      	beq.n	b5814 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b581e:	4620      	mov	r0, r4
   b5820:	f002 f874 	bl	b790c <_ZN9TCPClient4readEv>
}
   b5824:	b2c0      	uxtb	r0, r0
   b5826:	bd10      	pop	{r4, pc}

000b5828 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b582c:	4605      	mov	r5, r0
   b582e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5830:	f7ff ffee 	bl	b5810 <_ZN4MQTT8readByteEv>
   b5834:	69eb      	ldr	r3, [r5, #28]
   b5836:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5838:	69eb      	ldr	r3, [r5, #28]
   b583a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b583e:	f04f 0901 	mov.w	r9, #1
   b5842:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5846:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5848:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b584a:	4628      	mov	r0, r5
   b584c:	f7ff ffe0 	bl	b5810 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5850:	4626      	mov	r6, r4
   b5852:	69eb      	ldr	r3, [r5, #28]
   b5854:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b5856:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b585a:	fb13 f309 	smulbb	r3, r3, r9
   b585e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5860:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5862:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5864:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b5866:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5868:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b586c:	d4ed      	bmi.n	b584a <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b586e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5870:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5874:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5878:	d11e      	bne.n	b58b8 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b587a:	4628      	mov	r0, r5
   b587c:	f7ff ffc8 	bl	b5810 <_ZN4MQTT8readByteEv>
   b5880:	69eb      	ldr	r3, [r5, #28]
   b5882:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5884:	4628      	mov	r0, r5
   b5886:	f7ff ffc3 	bl	b5810 <_ZN4MQTT8readByteEv>
   b588a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b588c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b588e:	b2b6      	uxth	r6, r6
   b5890:	69eb      	ldr	r3, [r5, #28]
   b5892:	b2a4      	uxth	r4, r4
   b5894:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5896:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5898:	b2b6      	uxth	r6, r6
   b589a:	42be      	cmp	r6, r7
   b589c:	d20e      	bcs.n	b58bc <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b589e:	4628      	mov	r0, r5
   b58a0:	f7ff ffb6 	bl	b5810 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b58a4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b58a8:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b58aa:	bf84      	itt	hi
   b58ac:	69eb      	ldrhi	r3, [r5, #28]
   b58ae:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b58b0:	3401      	adds	r4, #1
   b58b2:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b58b4:	3601      	adds	r6, #1
   b58b6:	e7ef      	b.n	b5898 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b58b8:	2600      	movs	r6, #0
   b58ba:	e7ed      	b.n	b5898 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b58bc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b58c0:	42a3      	cmp	r3, r4
   b58c2:	bf2c      	ite	cs
   b58c4:	4620      	movcs	r0, r4
   b58c6:	2000      	movcc	r0, #0
   b58c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b58cc <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b58cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b58d0:	4615      	mov	r5, r2
   b58d2:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b58d4:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b58d6:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b58d8:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b58da:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b58dc:	a802      	add	r0, sp, #8
        digit = len % 128;
   b58de:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b58e2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b58e6:	f103 0401 	add.w	r4, r3, #1
   b58ea:	4403      	add	r3, r0
            digit |= 0x80;
   b58ec:	bf88      	it	hi
   b58ee:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b58f2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b58f6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b58fa:	b2e4      	uxtb	r4, r4
   b58fc:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5900:	d81e      	bhi.n	b5940 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b5902:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b5906:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b590a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b590c:	4622      	mov	r2, r4
   b590e:	a901      	add	r1, sp, #4
   b5910:	4428      	add	r0, r5
    buf[4-llen] = header;
   b5912:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b5916:	f002 fde9 	bl	b84ec <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b591a:	1c72      	adds	r2, r6, #1
   b591c:	4422      	add	r2, r4
   b591e:	4641      	mov	r1, r8
   b5920:	4638      	mov	r0, r7
   b5922:	f001 ffde 	bl	b78e2 <_ZN9TCPClient5writeEPKhj>
   b5926:	4605      	mov	r5, r0
   b5928:	f001 f848 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b592c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b592e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5930:	4432      	add	r2, r6
   b5932:	b2a8      	uxth	r0, r5
}
   b5934:	1a13      	subs	r3, r2, r0
   b5936:	4258      	negs	r0, r3
   b5938:	4158      	adcs	r0, r3
   b593a:	b002      	add	sp, #8
   b593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5940:	4623      	mov	r3, r4
   b5942:	e7ca      	b.n	b58da <_ZN4MQTT5writeEhPht+0xe>

000b5944 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5944:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b5946:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5948:	4605      	mov	r5, r0
    pos += 2;
   b594a:	b298      	uxth	r0, r3
   b594c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b594e:	5cce      	ldrb	r6, [r1, r3]
   b5950:	b29c      	uxth	r4, r3
   b5952:	b156      	cbz	r6, b596a <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5954:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b5958:	4584      	cmp	ip, r0
   b595a:	f103 0701 	add.w	r7, r3, #1
   b595e:	d904      	bls.n	b596a <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5960:	1c44      	adds	r4, r0, #1
   b5962:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5964:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b5966:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b5968:	e7f1      	b.n	b594e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b596a:	b299      	uxth	r1, r3
   b596c:	1a41      	subs	r1, r0, r1
   b596e:	440a      	add	r2, r1
   b5970:	0a21      	lsrs	r1, r4, #8
   b5972:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b5976:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b597a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b597c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b597c:	b538      	push	{r3, r4, r5, lr}
   b597e:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5980:	f002 f8d8 	bl	b7b34 <_ZN9TCPClient9connectedEv>
   b5984:	2800      	cmp	r0, #0
   b5986:	bf14      	ite	ne
   b5988:	2501      	movne	r5, #1
   b598a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b598c:	d102      	bne.n	b5994 <_ZN4MQTT11isConnectedEv+0x18>
   b598e:	4620      	mov	r0, r4
   b5990:	f002 fa08 	bl	b7da4 <_ZN9TCPClient4stopEv>
    return rc;
}
   b5994:	4628      	mov	r0, r5
   b5996:	bd38      	pop	{r3, r4, r5, pc}

000b5998 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b5998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b599c:	b088      	sub	sp, #32
   b599e:	4604      	mov	r4, r0
   b59a0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b59a4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b59a8:	4689      	mov	r9, r1
   b59aa:	4617      	mov	r7, r2
   b59ac:	461e      	mov	r6, r3
    if (!isConnected()) {
   b59ae:	f7ff ffe5 	bl	b597c <_ZN4MQTT11isConnectedEv>
   b59b2:	4605      	mov	r5, r0
   b59b4:	2800      	cmp	r0, #0
   b59b6:	f040 80cd 	bne.w	b5b54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b59ba:	4621      	mov	r1, r4
   b59bc:	a801      	add	r0, sp, #4
   b59be:	f7ff febc 	bl	b573a <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b59c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b59c4:	2900      	cmp	r1, #0
   b59c6:	f040 8088 	bne.w	b5ada <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b59ca:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b59ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b59d0:	462b      	mov	r3, r5
   b59d2:	4620      	mov	r0, r4
   b59d4:	f002 f830 	bl	b7a38 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b59d8:	2800      	cmp	r0, #0
   b59da:	d07a      	beq.n	b5ad2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b59dc:	2301      	movs	r3, #1
   b59de:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b59e0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b59e4:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b59e6:	2b04      	cmp	r3, #4
   b59e8:	4b5b      	ldr	r3, [pc, #364]	; (b5b58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b59ea:	f040 8081 	bne.w	b5af0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b59ee:	6818      	ldr	r0, [r3, #0]
   b59f0:	8899      	ldrh	r1, [r3, #4]
   b59f2:	799b      	ldrb	r3, [r3, #6]
   b59f4:	f8ad 100c 	strh.w	r1, [sp, #12]
   b59f8:	f88d 300e 	strb.w	r3, [sp, #14]
   b59fc:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b59fe:	f8c2 0005 	str.w	r0, [r2, #5]
   b5a02:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5a06:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b5a0a:	f8a2 1009 	strh.w	r1, [r2, #9]
   b5a0e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b5a10:	230c      	movs	r3, #12
            if (willTopic) {
   b5a12:	f1b8 0f00 	cmp.w	r8, #0
   b5a16:	f000 8081 	beq.w	b5b1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b5a1a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b5a1e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b5a22:	0140      	lsls	r0, r0, #5
   b5a24:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5a28:	f040 0006 	orr.w	r0, r0, #6
   b5a2c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b5a2e:	f1ba 0f00 	cmp.w	sl, #0
   b5a32:	d101      	bne.n	b5a38 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5a34:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5a38:	b11f      	cbz	r7, b5a42 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b5a3a:	2e00      	cmp	r6, #0
   b5a3c:	d170      	bne.n	b5b20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b5a3e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b5a42:	69e2      	ldr	r2, [r4, #28]
   b5a44:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b5a46:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b5a48:	69e1      	ldr	r1, [r4, #28]
   b5a4a:	1c58      	adds	r0, r3, #1
   b5a4c:	1212      	asrs	r2, r2, #8
   b5a4e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b5a50:	1c9a      	adds	r2, r3, #2
   b5a52:	69e1      	ldr	r1, [r4, #28]
   b5a54:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5a56:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b5a58:	3303      	adds	r3, #3
   b5a5a:	69e2      	ldr	r2, [r4, #28]
   b5a5c:	4649      	mov	r1, r9
   b5a5e:	4620      	mov	r0, r4
   b5a60:	f7ff ff70 	bl	b5944 <_ZN4MQTT11writeStringEPKcPht>
   b5a64:	4603      	mov	r3, r0
            if (willTopic) {
   b5a66:	f1b8 0f00 	cmp.w	r8, #0
   b5a6a:	d00b      	beq.n	b5a84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5a6c:	69e2      	ldr	r2, [r4, #28]
   b5a6e:	4641      	mov	r1, r8
   b5a70:	4620      	mov	r0, r4
   b5a72:	f7ff ff67 	bl	b5944 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b5a76:	69e2      	ldr	r2, [r4, #28]
   b5a78:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b5a7a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b5a7c:	4620      	mov	r0, r4
   b5a7e:	f7ff ff61 	bl	b5944 <_ZN4MQTT11writeStringEPKcPht>
   b5a82:	4603      	mov	r3, r0
            if(user != NULL) {
   b5a84:	b167      	cbz	r7, b5aa0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b5a86:	69e2      	ldr	r2, [r4, #28]
   b5a88:	4639      	mov	r1, r7
   b5a8a:	4620      	mov	r0, r4
   b5a8c:	f7ff ff5a 	bl	b5944 <_ZN4MQTT11writeStringEPKcPht>
   b5a90:	4603      	mov	r3, r0
                if(pass != NULL) {
   b5a92:	b12e      	cbz	r6, b5aa0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5a94:	69e2      	ldr	r2, [r4, #28]
   b5a96:	4631      	mov	r1, r6
   b5a98:	4620      	mov	r0, r4
   b5a9a:	f7ff ff53 	bl	b5944 <_ZN4MQTT11writeStringEPKcPht>
   b5a9e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5aa0:	3b05      	subs	r3, #5
   b5aa2:	69e2      	ldr	r2, [r4, #28]
   b5aa4:	b29b      	uxth	r3, r3
   b5aa6:	2110      	movs	r1, #16
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	f7ff ff0f 	bl	b58cc <_ZN4MQTT5writeEhPht>
   b5aae:	f000 ff85 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5ab2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5ab6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b5aba:	4620      	mov	r0, r4
   b5abc:	f002 f918 	bl	b7cf0 <_ZN9TCPClient9availableEv>
   b5ac0:	bb88      	cbnz	r0, b5b26 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b5ac2:	f000 ff7b 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5ac8:	1ac0      	subs	r0, r0, r3
   b5aca:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5acc:	4373      	muls	r3, r6
   b5ace:	4298      	cmp	r0, r3
   b5ad0:	d9f3      	bls.n	b5aba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5ad2:	4620      	mov	r0, r4
   b5ad4:	f002 f966 	bl	b7da4 <_ZN9TCPClient4stopEv>
   b5ad8:	e035      	b.n	b5b46 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5ada:	a802      	add	r0, sp, #8
   b5adc:	f001 fdbc 	bl	b7658 <_ZN9IPAddressC1EPKh>
   b5ae0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5ae4:	462b      	mov	r3, r5
   b5ae6:	a902      	add	r1, sp, #8
   b5ae8:	4620      	mov	r0, r4
   b5aea:	f002 f885 	bl	b7bf8 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5aee:	e773      	b.n	b59d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5af0:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5af4:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5af8:	7bdb      	ldrb	r3, [r3, #15]
   b5afa:	f10d 0c08 	add.w	ip, sp, #8
   b5afe:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b5b02:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5b06:	ab02      	add	r3, sp, #8
   b5b08:	cb03      	ldmia	r3!, {r0, r1}
   b5b0a:	f8c2 0005 	str.w	r0, [r2, #5]
   b5b0e:	f8c2 1009 	str.w	r1, [r2, #9]
   b5b12:	f89c 3000 	ldrb.w	r3, [ip]
   b5b16:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5b18:	230e      	movs	r3, #14
   b5b1a:	e77a      	b.n	b5a12 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5b1c:	2002      	movs	r0, #2
   b5b1e:	e786      	b.n	b5a2e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5b20:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5b24:	e78d      	b.n	b5a42 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b5b26:	a902      	add	r1, sp, #8
   b5b28:	4620      	mov	r0, r4
   b5b2a:	f7ff fe7d 	bl	b5828 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b5b2e:	2804      	cmp	r0, #4
   b5b30:	d1cf      	bne.n	b5ad2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b5b32:	69e3      	ldr	r3, [r4, #28]
   b5b34:	78de      	ldrb	r6, [r3, #3]
   b5b36:	2e00      	cmp	r6, #0
   b5b38:	d1cb      	bne.n	b5ad2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b5b3a:	f000 ff3f 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b5b3e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b5b40:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b5b42:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b5b46:	a801      	add	r0, sp, #4
   b5b48:	f7ff fe02 	bl	b5750 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5b4c:	4628      	mov	r0, r5
   b5b4e:	b008      	add	sp, #32
   b5b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b5b54:	2500      	movs	r5, #0
   b5b56:	e7f9      	b.n	b5b4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b5b58:	000b8f00 	.word	0x000b8f00

000b5b5c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b5b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b5b5e:	2301      	movs	r3, #1
   b5b60:	2204      	movs	r2, #4
   b5b62:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b5b66:	2300      	movs	r3, #0
   b5b68:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b5b6c:	e9cd 3300 	strd	r3, r3, [sp]
   b5b70:	461a      	mov	r2, r3
   b5b72:	f7ff ff11 	bl	b5998 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b5b76:	b007      	add	sp, #28
   b5b78:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b80:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b5b84:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b5b88:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b5b8c:	4604      	mov	r4, r0
   b5b8e:	468b      	mov	fp, r1
   b5b90:	4616      	mov	r6, r2
   b5b92:	461f      	mov	r7, r3
    if (isConnected()) {
   b5b94:	f7ff fef2 	bl	b597c <_ZN4MQTT11isConnectedEv>
   b5b98:	4682      	mov	sl, r0
   b5b9a:	2800      	cmp	r0, #0
   b5b9c:	d051      	beq.n	b5c42 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b5b9e:	4621      	mov	r1, r4
   b5ba0:	a801      	add	r0, sp, #4
   b5ba2:	f7ff fdca 	bl	b573a <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b5ba6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b5baa:	69e0      	ldr	r0, [r4, #28]
   b5bac:	2100      	movs	r1, #0
   b5bae:	f002 fcab 	bl	b8508 <memset>
        length = writeString(topic, buffer, length);
   b5bb2:	2305      	movs	r3, #5
   b5bb4:	69e2      	ldr	r2, [r4, #28]
   b5bb6:	4659      	mov	r1, fp
   b5bb8:	4620      	mov	r0, r4
   b5bba:	f7ff fec3 	bl	b5944 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b5bbe:	1e6b      	subs	r3, r5, #1
   b5bc0:	2b01      	cmp	r3, #1
   b5bc2:	d815      	bhi.n	b5bf0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5bc4:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5bc6:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b5bc8:	3101      	adds	r1, #1
   b5bca:	b289      	uxth	r1, r1
   b5bcc:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5bce:	0a09      	lsrs	r1, r1, #8
   b5bd0:	5419      	strb	r1, [r3, r0]
   b5bd2:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5bd4:	69e3      	ldr	r3, [r4, #28]
   b5bd6:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5bd8:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b5bda:	3002      	adds	r0, #2
   b5bdc:	5499      	strb	r1, [r3, r2]
   b5bde:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5be0:	f1b8 0f00 	cmp.w	r8, #0
   b5be4:	d004      	beq.n	b5bf0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b5be6:	8c23      	ldrh	r3, [r4, #32]
   b5be8:	1c5a      	adds	r2, r3, #1
   b5bea:	8422      	strh	r2, [r4, #32]
   b5bec:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5bf0:	2100      	movs	r1, #0
   b5bf2:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5bf4:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b5bf6:	69e2      	ldr	r2, [r4, #28]
   b5bf8:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5bfa:	d90a      	bls.n	b5c12 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5bfc:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b5c00:	459c      	cmp	ip, r3
   b5c02:	d906      	bls.n	b5c12 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5c04:	f816 c001 	ldrb.w	ip, [r6, r1]
   b5c08:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5c0c:	3101      	adds	r1, #1
   b5c0e:	b289      	uxth	r1, r1
   b5c10:	e7ef      	b.n	b5bf2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b5c12:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b5c16:	2900      	cmp	r1, #0
   b5c18:	bf0c      	ite	eq
   b5c1a:	2130      	moveq	r1, #48	; 0x30
   b5c1c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b5c1e:	f1b9 0f00 	cmp.w	r9, #0
   b5c22:	d001      	beq.n	b5c28 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b5c24:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b5c28:	2d02      	cmp	r5, #2
   b5c2a:	d10e      	bne.n	b5c4a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b5c2c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b5c30:	3b05      	subs	r3, #5
   b5c32:	b29b      	uxth	r3, r3
   b5c34:	4620      	mov	r0, r4
   b5c36:	f7ff fe49 	bl	b58cc <_ZN4MQTT5writeEhPht>
   b5c3a:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b5c3c:	a801      	add	r0, sp, #4
   b5c3e:	f7ff fd87 	bl	b5750 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5c42:	4650      	mov	r0, sl
   b5c44:	b003      	add	sp, #12
   b5c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b5c4a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b5c4c:	bf08      	it	eq
   b5c4e:	f041 0102 	orreq.w	r1, r1, #2
   b5c52:	e7ed      	b.n	b5c30 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b5c54 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b5c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b5c56:	9c08      	ldr	r4, [sp, #32]
   b5c58:	9403      	str	r4, [sp, #12]
   b5c5a:	2400      	movs	r4, #0
   b5c5c:	9402      	str	r4, [sp, #8]
   b5c5e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b5c62:	9401      	str	r4, [sp, #4]
   b5c64:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b5c68:	9400      	str	r4, [sp, #0]
   b5c6a:	f7ff ff87 	bl	b5b7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b5c6e:	b004      	add	sp, #16
   b5c70:	bd10      	pop	{r4, pc}

000b5c72 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b5c72:	b530      	push	{r4, r5, lr}
   b5c74:	b087      	sub	sp, #28
   b5c76:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5c78:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b5c7a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5c7c:	9204      	str	r2, [sp, #16]
   b5c7e:	f002 fc83 	bl	b8588 <strlen>
   b5c82:	2500      	movs	r5, #0
   b5c84:	4603      	mov	r3, r0
   b5c86:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5c8a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b5c8e:	9500      	str	r5, [sp, #0]
   b5c90:	4620      	mov	r0, r4
   b5c92:	f7ff ffdf 	bl	b5c54 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b5c96:	b007      	add	sp, #28
   b5c98:	bd30      	pop	{r4, r5, pc}

000b5c9a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b5c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c9c:	4604      	mov	r4, r0
   b5c9e:	460e      	mov	r6, r1
    if (isConnected()) {
   b5ca0:	f7ff fe6c 	bl	b597c <_ZN4MQTT11isConnectedEv>
   b5ca4:	4605      	mov	r5, r0
   b5ca6:	b1c8      	cbz	r0, b5cdc <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b5ca8:	4621      	mov	r1, r4
   b5caa:	a801      	add	r0, sp, #4
   b5cac:	f7ff fd45 	bl	b573a <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5cb0:	69e3      	ldr	r3, [r4, #28]
   b5cb2:	2262      	movs	r2, #98	; 0x62
   b5cb4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5cb6:	69e3      	ldr	r3, [r4, #28]
   b5cb8:	2202      	movs	r2, #2
   b5cba:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5cbc:	69e3      	ldr	r3, [r4, #28]
   b5cbe:	0a32      	lsrs	r2, r6, #8
   b5cc0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5cc2:	69e3      	ldr	r3, [r4, #28]
   b5cc4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5cc6:	69e1      	ldr	r1, [r4, #28]
   b5cc8:	2204      	movs	r2, #4
   b5cca:	4620      	mov	r0, r4
   b5ccc:	f001 fe09 	bl	b78e2 <_ZN9TCPClient5writeEPKhj>
   b5cd0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5cd2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5cd4:	bf18      	it	ne
   b5cd6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5cd8:	f7ff fd3a 	bl	b5750 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5cdc:	4628      	mov	r0, r5
   b5cde:	b002      	add	sp, #8
   b5ce0:	bd70      	pop	{r4, r5, r6, pc}

000b5ce2 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ce4:	4604      	mov	r4, r0
   b5ce6:	460e      	mov	r6, r1
    if (isConnected()) {
   b5ce8:	f7ff fe48 	bl	b597c <_ZN4MQTT11isConnectedEv>
   b5cec:	4605      	mov	r5, r0
   b5cee:	b1c8      	cbz	r0, b5d24 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5cf0:	4621      	mov	r1, r4
   b5cf2:	a801      	add	r0, sp, #4
   b5cf4:	f7ff fd21 	bl	b573a <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5cf8:	69e3      	ldr	r3, [r4, #28]
   b5cfa:	2272      	movs	r2, #114	; 0x72
   b5cfc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5cfe:	69e3      	ldr	r3, [r4, #28]
   b5d00:	2202      	movs	r2, #2
   b5d02:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5d04:	69e3      	ldr	r3, [r4, #28]
   b5d06:	0a32      	lsrs	r2, r6, #8
   b5d08:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5d0a:	69e3      	ldr	r3, [r4, #28]
   b5d0c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5d0e:	69e1      	ldr	r1, [r4, #28]
   b5d10:	2204      	movs	r2, #4
   b5d12:	4620      	mov	r0, r4
   b5d14:	f001 fde5 	bl	b78e2 <_ZN9TCPClient5writeEPKhj>
   b5d18:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5d1a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5d1c:	bf18      	it	ne
   b5d1e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5d20:	f7ff fd16 	bl	b5750 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5d24:	4628      	mov	r0, r5
   b5d26:	b002      	add	sp, #8
   b5d28:	bd70      	pop	{r4, r5, r6, pc}

000b5d2a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d2e:	ed2d 8b02 	vpush	{d8}
   b5d32:	b087      	sub	sp, #28
   b5d34:	af00      	add	r7, sp, #0
   b5d36:	4604      	mov	r4, r0
    if (isConnected()) {
   b5d38:	f7ff fe20 	bl	b597c <_ZN4MQTT11isConnectedEv>
   b5d3c:	4681      	mov	r9, r0
   b5d3e:	b1f8      	cbz	r0, b5d80 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b5d40:	4621      	mov	r1, r4
   b5d42:	f107 0014 	add.w	r0, r7, #20
   b5d46:	f7ff fcf8 	bl	b573a <_ZN4MQTT11MutexLockerC1EPS_>
   b5d4a:	f000 fe37 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5d4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5d54:	4353      	muls	r3, r2
   b5d56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5d58:	1a82      	subs	r2, r0, r2
   b5d5a:	429a      	cmp	r2, r3
   b5d5c:	4606      	mov	r6, r0
   b5d5e:	d803      	bhi.n	b5d68 <_ZN4MQTT4loopEv+0x3e>
   b5d60:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5d62:	1a82      	subs	r2, r0, r2
   b5d64:	4293      	cmp	r3, r2
   b5d66:	d221      	bcs.n	b5dac <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5d68:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5d6c:	b17b      	cbz	r3, b5d8e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5d6e:	4620      	mov	r0, r4
   b5d70:	f002 f818 	bl	b7da4 <_ZN9TCPClient4stopEv>
                return false;
   b5d74:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5d78:	f107 0014 	add.w	r0, r7, #20
   b5d7c:	f7ff fce8 	bl	b5750 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5d80:	4648      	mov	r0, r9
   b5d82:	371c      	adds	r7, #28
   b5d84:	46bd      	mov	sp, r7
   b5d86:	ecbd 8b02 	vpop	{d8}
   b5d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5d8e:	69e2      	ldr	r2, [r4, #28]
   b5d90:	21c0      	movs	r1, #192	; 0xc0
   b5d92:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5d94:	69e2      	ldr	r2, [r4, #28]
   b5d96:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5d98:	69e1      	ldr	r1, [r4, #28]
   b5d9a:	2202      	movs	r2, #2
   b5d9c:	4620      	mov	r0, r4
   b5d9e:	f001 fda0 	bl	b78e2 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5da2:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5da6:	2301      	movs	r3, #1
   b5da8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5dac:	4620      	mov	r0, r4
   b5dae:	f001 ff9f 	bl	b7cf0 <_ZN9TCPClient9availableEv>
   b5db2:	2800      	cmp	r0, #0
   b5db4:	d0e0      	beq.n	b5d78 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5db6:	f107 0113 	add.w	r1, r7, #19
   b5dba:	4620      	mov	r0, r4
   b5dbc:	f7ff fd34 	bl	b5828 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5dc0:	4683      	mov	fp, r0
   b5dc2:	2800      	cmp	r0, #0
   b5dc4:	d0d8      	beq.n	b5d78 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5dc6:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5dc8:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5dca:	7819      	ldrb	r1, [r3, #0]
   b5dcc:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5dd0:	2a30      	cmp	r2, #48	; 0x30
   b5dd2:	d17f      	bne.n	b5ed4 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5dd4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5dd8:	f1ba 0f00 	cmp.w	sl, #0
   b5ddc:	d0cc      	beq.n	b5d78 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5dde:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5de2:	466a      	mov	r2, sp
   b5de4:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5de8:	eb03 020c 	add.w	r2, r3, ip
   b5dec:	7851      	ldrb	r1, [r2, #1]
   b5dee:	7895      	ldrb	r5, [r2, #2]
   b5df0:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5df4:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5df6:	f105 0208 	add.w	r2, r5, #8
   b5dfa:	4669      	mov	r1, sp
   b5dfc:	08d2      	lsrs	r2, r2, #3
   b5dfe:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5e02:	4695      	mov	sp, r2
   b5e04:	f10c 0203 	add.w	r2, ip, #3
   b5e08:	60fa      	str	r2, [r7, #12]
   b5e0a:	eb03 0e02 	add.w	lr, r3, r2
   b5e0e:	eb0d 0205 	add.w	r2, sp, r5
   b5e12:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5e14:	f8c7 d008 	str.w	sp, [r7, #8]
   b5e18:	607a      	str	r2, [r7, #4]
   b5e1a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5e1e:	428a      	cmp	r2, r1
   b5e20:	d006      	beq.n	b5e30 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5e22:	460a      	mov	r2, r1
   b5e24:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5e28:	f802 8b01 	strb.w	r8, [r2], #1
   b5e2c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5e2e:	e7f4      	b.n	b5e1a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5e30:	2200      	movs	r2, #0
   b5e32:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5e34:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5e38:	68f9      	ldr	r1, [r7, #12]
   b5e3a:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5e3e:	ebab 020c 	sub.w	r2, fp, ip
   b5e42:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5e44:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5e48:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5e4c:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5e4e:	d125      	bne.n	b5e9c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5e50:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5e54:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5e56:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5e58:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5e5c:	f10c 0105 	add.w	r1, ip, #5
   b5e60:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5e62:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5e64:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5e68:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5e6a:	69e3      	ldr	r3, [r4, #28]
   b5e6c:	2240      	movs	r2, #64	; 0x40
   b5e6e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5e70:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5e72:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5e76:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5e7a:	69e3      	ldr	r3, [r4, #28]
   b5e7c:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5e80:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5e82:	69e3      	ldr	r3, [r4, #28]
   b5e84:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5e88:	69e1      	ldr	r1, [r4, #28]
   b5e8a:	2204      	movs	r2, #4
   b5e8c:	4620      	mov	r0, r4
   b5e8e:	f001 fd28 	bl	b78e2 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5e92:	6266      	str	r6, [r4, #36]	; 0x24
   b5e94:	ee18 3a10 	vmov	r3, s16
   b5e98:	469d      	mov	sp, r3
   b5e9a:	e76d      	b.n	b5d78 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5e9c:	f1b8 0f04 	cmp.w	r8, #4
   b5ea0:	d115      	bne.n	b5ece <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5ea2:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5ea6:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5ea8:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5eaa:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5eae:	f10c 0105 	add.w	r1, ip, #5
   b5eb2:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5eb4:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5eb6:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5eba:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5ebc:	69e3      	ldr	r3, [r4, #28]
   b5ebe:	2250      	movs	r2, #80	; 0x50
   b5ec0:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5ec2:	69e3      	ldr	r3, [r4, #28]
   b5ec4:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5ec6:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5eca:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5ecc:	e7d5      	b.n	b5e7a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5ece:	4419      	add	r1, r3
   b5ed0:	47d0      	blx	sl
   b5ed2:	e7df      	b.n	b5e94 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5ed4:	2a50      	cmp	r2, #80	; 0x50
   b5ed6:	d108      	bne.n	b5eea <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5ed8:	789a      	ldrb	r2, [r3, #2]
   b5eda:	78d9      	ldrb	r1, [r3, #3]
   b5edc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5ee0:	b289      	uxth	r1, r1
   b5ee2:	4620      	mov	r0, r4
   b5ee4:	f7ff fed9 	bl	b5c9a <_ZN4MQTT14publishReleaseEt>
   b5ee8:	e746      	b.n	b5d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5eea:	2a40      	cmp	r2, #64	; 0x40
   b5eec:	d112      	bne.n	b5f14 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5eee:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5ef0:	2a00      	cmp	r2, #0
   b5ef2:	f43f af41 	beq.w	b5d78 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5ef6:	f1bb 0f04 	cmp.w	fp, #4
   b5efa:	f47f af3d 	bne.w	b5d78 <_ZN4MQTT4loopEv+0x4e>
   b5efe:	f011 0f06 	tst.w	r1, #6
   b5f02:	f47f af39 	bne.w	b5d78 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5f06:	7899      	ldrb	r1, [r3, #2]
   b5f08:	78d8      	ldrb	r0, [r3, #3]
   b5f0a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5f0e:	b280      	uxth	r0, r0
   b5f10:	4790      	blx	r2
   b5f12:	e731      	b.n	b5d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5f14:	2a60      	cmp	r2, #96	; 0x60
   b5f16:	d108      	bne.n	b5f2a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5f18:	789a      	ldrb	r2, [r3, #2]
   b5f1a:	78d9      	ldrb	r1, [r3, #3]
   b5f1c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5f20:	b289      	uxth	r1, r1
   b5f22:	4620      	mov	r0, r4
   b5f24:	f7ff fedd 	bl	b5ce2 <_ZN4MQTT15publishCompleteEt>
   b5f28:	e726      	b.n	b5d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5f2a:	2a70      	cmp	r2, #112	; 0x70
   b5f2c:	d0df      	beq.n	b5eee <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5f2e:	2a90      	cmp	r2, #144	; 0x90
   b5f30:	f43f af22 	beq.w	b5d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5f34:	2ac0      	cmp	r2, #192	; 0xc0
   b5f36:	d10a      	bne.n	b5f4e <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5f38:	22d0      	movs	r2, #208	; 0xd0
   b5f3a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5f3c:	69e3      	ldr	r3, [r4, #28]
   b5f3e:	2200      	movs	r2, #0
   b5f40:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5f42:	69e1      	ldr	r1, [r4, #28]
   b5f44:	2202      	movs	r2, #2
   b5f46:	4620      	mov	r0, r4
   b5f48:	f001 fccb 	bl	b78e2 <_ZN9TCPClient5writeEPKhj>
   b5f4c:	e714      	b.n	b5d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5f4e:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5f50:	bf04      	itt	eq
   b5f52:	2300      	moveq	r3, #0
   b5f54:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5f58:	e70e      	b.n	b5d78 <_ZN4MQTT4loopEv+0x4e>

000b5f5a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5f5c:	4604      	mov	r4, r0
   b5f5e:	460f      	mov	r7, r1
   b5f60:	4616      	mov	r6, r2
    if (isConnected()) {
   b5f62:	f7ff fd0b 	bl	b597c <_ZN4MQTT11isConnectedEv>
   b5f66:	4605      	mov	r5, r0
   b5f68:	b310      	cbz	r0, b5fb0 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5f6a:	4621      	mov	r1, r4
   b5f6c:	a801      	add	r0, sp, #4
   b5f6e:	f7ff fbe4 	bl	b573a <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5f72:	8c23      	ldrh	r3, [r4, #32]
   b5f74:	3301      	adds	r3, #1
   b5f76:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5f78:	b1eb      	cbz	r3, b5fb6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5f7a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5f7c:	8c23      	ldrh	r3, [r4, #32]
   b5f7e:	69e2      	ldr	r2, [r4, #28]
   b5f80:	0a1b      	lsrs	r3, r3, #8
   b5f82:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5f84:	69e3      	ldr	r3, [r4, #28]
   b5f86:	8c22      	ldrh	r2, [r4, #32]
   b5f88:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5f8a:	69e2      	ldr	r2, [r4, #28]
   b5f8c:	2307      	movs	r3, #7
   b5f8e:	4639      	mov	r1, r7
   b5f90:	4620      	mov	r0, r4
   b5f92:	f7ff fcd7 	bl	b5944 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5f96:	69e3      	ldr	r3, [r4, #28]
   b5f98:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5f9a:	3804      	subs	r0, #4
   b5f9c:	b283      	uxth	r3, r0
   b5f9e:	69e2      	ldr	r2, [r4, #28]
   b5fa0:	2182      	movs	r1, #130	; 0x82
   b5fa2:	4620      	mov	r0, r4
   b5fa4:	f7ff fc92 	bl	b58cc <_ZN4MQTT5writeEhPht>
   b5fa8:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5faa:	a801      	add	r0, sp, #4
   b5fac:	f7ff fbd0 	bl	b5750 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5fb0:	4628      	mov	r0, r5
   b5fb2:	b003      	add	sp, #12
   b5fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5fb6:	2301      	movs	r3, #1
   b5fb8:	e7df      	b.n	b5f7a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5fba <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5fba:	2200      	movs	r2, #0
   b5fbc:	f7ff bfcd 	b.w	b5f5a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5fc0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5fc0:	b510      	push	{r4, lr}
   b5fc2:	4b04      	ldr	r3, [pc, #16]	; (b5fd4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5fc4:	6003      	str	r3, [r0, #0]
   b5fc6:	4604      	mov	r4, r0
  if(buffer) {
   b5fc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5fca:	b108      	cbz	r0, b5fd0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5fcc:	f000 ff32 	bl	b6e34 <free>
    buffer = NULL;
  }
}
   b5fd0:	4620      	mov	r0, r4
   b5fd2:	bd10      	pop	{r4, pc}
   b5fd4:	000b93cc 	.word	0x000b93cc

000b5fd8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5fd8:	b510      	push	{r4, lr}
   b5fda:	4604      	mov	r4, r0
}
   b5fdc:	f7ff fff0 	bl	b5fc0 <_ZN16Adafruit_SSD1306D1Ev>
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	2150      	movs	r1, #80	; 0x50
   b5fe4:	f7fe f85b 	bl	b409e <_ZdlPvj>
   b5fe8:	4620      	mov	r0, r4
   b5fea:	bd10      	pop	{r4, pc}

000b5fec <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5fec:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5fee:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5ff0:	db4b      	blt.n	b608a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5ff2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5ff6:	428c      	cmp	r4, r1
   b5ff8:	dd47      	ble.n	b608a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5ffa:	2a00      	cmp	r2, #0
   b5ffc:	db45      	blt.n	b608a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5ffe:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6002:	4294      	cmp	r4, r2
   b6004:	dd41      	ble.n	b608a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6006:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6008:	2c02      	cmp	r4, #2
   b600a:	d01f      	beq.n	b604c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b600c:	2c03      	cmp	r4, #3
   b600e:	d026      	beq.n	b605e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6010:	2c01      	cmp	r4, #1
   b6012:	d104      	bne.n	b601e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6014:	8904      	ldrh	r4, [r0, #8]
   b6016:	43d2      	mvns	r2, r2
   b6018:	4414      	add	r4, r2
      break;
   b601a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b601c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b601e:	2b01      	cmp	r3, #1
   b6020:	d023      	beq.n	b606a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6022:	2b02      	cmp	r3, #2
   b6024:	d032      	beq.n	b608c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b6026:	bb83      	cbnz	r3, b608a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6028:	2a00      	cmp	r2, #0
   b602a:	4613      	mov	r3, r2
   b602c:	8904      	ldrh	r4, [r0, #8]
   b602e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6030:	bfb8      	it	lt
   b6032:	1dd3      	addlt	r3, r2, #7
   b6034:	10db      	asrs	r3, r3, #3
   b6036:	fb13 1104 	smlabb	r1, r3, r4, r1
   b603a:	f002 0207 	and.w	r2, r2, #7
   b603e:	2301      	movs	r3, #1
   b6040:	4093      	lsls	r3, r2
   b6042:	5c42      	ldrb	r2, [r0, r1]
   b6044:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6048:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b604a:	e01e      	b.n	b608a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b604c:	8904      	ldrh	r4, [r0, #8]
   b604e:	3c01      	subs	r4, #1
   b6050:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6052:	8944      	ldrh	r4, [r0, #10]
   b6054:	43d2      	mvns	r2, r2
   b6056:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6058:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b605a:	b212      	sxth	r2, r2
      break;
   b605c:	e7df      	b.n	b601e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b605e:	8944      	ldrh	r4, [r0, #10]
   b6060:	3c01      	subs	r4, #1
   b6062:	1a64      	subs	r4, r4, r1
      break;
   b6064:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b6066:	b222      	sxth	r2, r4
      break;
   b6068:	e7d9      	b.n	b601e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b606a:	2a00      	cmp	r2, #0
   b606c:	8904      	ldrh	r4, [r0, #8]
   b606e:	4613      	mov	r3, r2
   b6070:	bfb8      	it	lt
   b6072:	1dd3      	addlt	r3, r2, #7
   b6074:	10db      	asrs	r3, r3, #3
   b6076:	fb13 1104 	smlabb	r1, r3, r4, r1
   b607a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b607c:	f002 0007 	and.w	r0, r2, #7
   b6080:	2201      	movs	r2, #1
   b6082:	4082      	lsls	r2, r0
   b6084:	5c58      	ldrb	r0, [r3, r1]
   b6086:	4302      	orrs	r2, r0
   b6088:	545a      	strb	r2, [r3, r1]
}
   b608a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b608c:	2a00      	cmp	r2, #0
   b608e:	4613      	mov	r3, r2
   b6090:	8904      	ldrh	r4, [r0, #8]
   b6092:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6094:	bfb8      	it	lt
   b6096:	1dd3      	addlt	r3, r2, #7
   b6098:	10db      	asrs	r3, r3, #3
   b609a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b609e:	f002 0207 	and.w	r2, r2, #7
   b60a2:	2301      	movs	r3, #1
   b60a4:	fa03 f202 	lsl.w	r2, r3, r2
   b60a8:	5c43      	ldrb	r3, [r0, r1]
   b60aa:	405a      	eors	r2, r3
   b60ac:	e7cc      	b.n	b6048 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b60b0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b60b0:	b570      	push	{r4, r5, r6, lr}
   b60b2:	4604      	mov	r4, r0
   b60b4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b60b6:	2600      	movs	r6, #0
   b60b8:	f7fe ffde 	bl	b5078 <_ZN12Adafruit_GFXC1Ess>
   b60bc:	4b11      	ldr	r3, [pc, #68]	; (b6104 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b60be:	6023      	str	r3, [r4, #0]
   b60c0:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b60c2:	b915      	cbnz	r5, b60ca <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b60c4:	f002 f8cc 	bl	b8260 <_Z19__fetch_global_Wirev>
   b60c8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b60ca:	23ff      	movs	r3, #255	; 0xff
   b60cc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b60d0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b60d4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b60d8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b60dc:	4b0a      	ldr	r3, [pc, #40]	; (b6108 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b60de:	63a3      	str	r3, [r4, #56]	; 0x38
   b60e0:	2301      	movs	r3, #1
   b60e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b60e6:	9b05      	ldr	r3, [sp, #20]
   b60e8:	64a3      	str	r3, [r4, #72]	; 0x48
   b60ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b60ee:	9b06      	ldr	r3, [sp, #24]
   b60f0:	86a2      	strh	r2, [r4, #52]	; 0x34
   b60f2:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b60f6:	6426      	str	r6, [r4, #64]	; 0x40
   b60f8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b60fc:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b60fe:	4620      	mov	r0, r4
   b6100:	bd70      	pop	{r4, r5, r6, pc}
   b6102:	bf00      	nop
   b6104:	000b93cc 	.word	0x000b93cc
   b6108:	000b8f18 	.word	0x000b8f18

000b610c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b610e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6110:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6112:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6114:	b190      	cbz	r0, b613c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b6116:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b611a:	f001 fbcb 	bl	b78b4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b611e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6120:	6803      	ldr	r3, [r0, #0]
   b6122:	2100      	movs	r1, #0
   b6124:	689b      	ldr	r3, [r3, #8]
   b6126:	4798      	blx	r3
    WIRE_WRITE(c);
   b6128:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b612a:	6803      	ldr	r3, [r0, #0]
   b612c:	4629      	mov	r1, r5
   b612e:	689b      	ldr	r3, [r3, #8]
   b6130:	4798      	blx	r3
    wire->endTransmission();
   b6132:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6134:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6138:	f001 bbc3 	b.w	b78c2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b613c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6140:	4601      	mov	r1, r0
   b6142:	b298      	uxth	r0, r3
   b6144:	f001 ffcb 	bl	b80de <digitalWrite>
  if(spi) {
   b6148:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b614a:	b120      	cbz	r0, b6156 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b614c:	4629      	mov	r1, r5
}
   b614e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6152:	f000 bf91 	b.w	b7078 <_ZN8SPIClass8transferEh>
   b6156:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6158:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b615a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b615e:	ea05 0107 	and.w	r1, r5, r7
   b6162:	b280      	uxth	r0, r0
   b6164:	f001 ffbb 	bl	b80de <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6168:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b616c:	2101      	movs	r1, #1
   b616e:	b280      	uxth	r0, r0
   b6170:	f001 ffb5 	bl	b80de <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6174:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6178:	2100      	movs	r1, #0
   b617a:	b280      	uxth	r0, r0
   b617c:	f001 ffaf 	bl	b80de <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6180:	3e01      	subs	r6, #1
   b6182:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b6186:	d1e8      	bne.n	b615a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b618a <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b618a:	b538      	push	{r3, r4, r5, lr}
   b618c:	4604      	mov	r4, r0
  TRANSACTION_START
   b618e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6190:	460d      	mov	r5, r1
  TRANSACTION_START
   b6192:	b180      	cbz	r0, b61b6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6194:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6196:	f001 fb7f 	bl	b7898 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b619a:	2d00      	cmp	r5, #0
   b619c:	4620      	mov	r0, r4
   b619e:	bf14      	ite	ne
   b61a0:	21a7      	movne	r1, #167	; 0xa7
   b61a2:	21a6      	moveq	r1, #166	; 0xa6
   b61a4:	f7ff ffb2 	bl	b610c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b61a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b61aa:	b188      	cbz	r0, b61d0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b61ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b61ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b61b2:	f001 bb71 	b.w	b7898 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b61b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b61b8:	b118      	cbz	r0, b61c2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b61ba:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b61be:	f000 feed 	bl	b6f9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b61c2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b61c6:	2100      	movs	r1, #0
   b61c8:	b280      	uxth	r0, r0
   b61ca:	f001 ff88 	bl	b80de <digitalWrite>
   b61ce:	e7e4      	b.n	b619a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b61d0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b61d4:	2101      	movs	r1, #1
   b61d6:	b280      	uxth	r0, r0
   b61d8:	f001 ff81 	bl	b80de <digitalWrite>
   b61dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b61de:	b118      	cbz	r0, b61e8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b61e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b61e4:	f000 bec0 	b.w	b6f68 <_ZN8SPIClass14endTransactionEv>
}
   b61e8:	bd38      	pop	{r3, r4, r5, pc}

000b61ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b61ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b61ee:	4604      	mov	r4, r0
  if(wire) { // I2C
   b61f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b61f2:	460d      	mov	r5, r1
  if(wire) { // I2C
   b61f4:	188f      	adds	r7, r1, r2
   b61f6:	b340      	cbz	r0, b624a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b61f8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b61fc:	f001 fb5a 	bl	b78b4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6200:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6202:	6803      	ldr	r3, [r0, #0]
   b6204:	2100      	movs	r1, #0
   b6206:	689b      	ldr	r3, [r3, #8]
   b6208:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b620a:	2601      	movs	r6, #1
    while(n--) {
   b620c:	42af      	cmp	r7, r5
        wire->endTransmission();
   b620e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6210:	d017      	beq.n	b6242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6212:	2e1f      	cmp	r6, #31
   b6214:	d90c      	bls.n	b6230 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b6216:	f001 fb54 	bl	b78c2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b621a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b621e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6220:	f001 fb48 	bl	b78b4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6224:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6226:	6803      	ldr	r3, [r0, #0]
   b6228:	2100      	movs	r1, #0
   b622a:	689b      	ldr	r3, [r3, #8]
   b622c:	4798      	blx	r3
        bytesOut = 1;
   b622e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6230:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6232:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6236:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6238:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b623a:	689b      	ldr	r3, [r3, #8]
   b623c:	4798      	blx	r3
      bytesOut++;
   b623e:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6240:	e7e4      	b.n	b620c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6242:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b6246:	f001 bb3c 	b.w	b78c2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b624a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b624e:	4601      	mov	r1, r0
   b6250:	b298      	uxth	r0, r3
   b6252:	f001 ff44 	bl	b80de <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6256:	42bd      	cmp	r5, r7
   b6258:	d022      	beq.n	b62a0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b625a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b625c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6260:	b118      	cbz	r0, b626a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6262:	4649      	mov	r1, r9
   b6264:	f000 ff08 	bl	b7078 <_ZN8SPIClass8transferEh>
   b6268:	e7f5      	b.n	b6256 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b626a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b626c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6270:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6274:	ea09 0108 	and.w	r1, r9, r8
   b6278:	b280      	uxth	r0, r0
   b627a:	f001 ff30 	bl	b80de <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b627e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6282:	2101      	movs	r1, #1
   b6284:	b280      	uxth	r0, r0
   b6286:	f001 ff2a 	bl	b80de <digitalWrite>
      digitalWrite(clkPin , LOW);
   b628a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b628e:	2100      	movs	r1, #0
   b6290:	b280      	uxth	r0, r0
   b6292:	f001 ff24 	bl	b80de <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6296:	3e01      	subs	r6, #1
   b6298:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b629c:	d1e8      	bne.n	b6270 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b629e:	e7da      	b.n	b6256 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b62a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b62a4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b62a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b62a8:	1dda      	adds	r2, r3, #7
   b62aa:	bf48      	it	mi
   b62ac:	f103 020e 	addmi.w	r2, r3, #14
   b62b0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b62b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b62b6:	10d2      	asrs	r2, r2, #3
   b62b8:	435a      	muls	r2, r3
   b62ba:	2100      	movs	r1, #0
   b62bc:	f002 b924 	b.w	b8508 <memset>

000b62c0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b62c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b62c4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b62c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b62c8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b62cc:	4604      	mov	r4, r0
   b62ce:	460f      	mov	r7, r1
   b62d0:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b62d2:	b1c3      	cbz	r3, b6306 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b62d4:	4620      	mov	r0, r4
   b62d6:	f7ff ffe5 	bl	b62a4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b62da:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b62de:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b62e2:	2820      	cmp	r0, #32
   b62e4:	dc21      	bgt.n	b632a <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b62e6:	2320      	movs	r3, #32
   b62e8:	2201      	movs	r2, #1
   b62ea:	3820      	subs	r0, #32
   b62ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b62f0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b62f4:	2373      	movs	r3, #115	; 0x73
   b62f6:	3973      	subs	r1, #115	; 0x73
   b62f8:	9300      	str	r3, [sp, #0]
   b62fa:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b62fe:	4b89      	ldr	r3, [pc, #548]	; (b6524 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6300:	f340 024f 	sbfx	r2, r0, #1, #16
   b6304:	e021      	b.n	b634a <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6306:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b630a:	1dd8      	adds	r0, r3, #7
   b630c:	bf48      	it	mi
   b630e:	f103 000e 	addmi.w	r0, r3, #14
   b6312:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b6316:	10c0      	asrs	r0, r0, #3
   b6318:	4358      	muls	r0, r3
   b631a:	f000 fd83 	bl	b6e24 <malloc>
   b631e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6320:	2800      	cmp	r0, #0
   b6322:	d1d7      	bne.n	b62d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b6324:	b004      	add	sp, #16
   b6326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b632a:	3840      	subs	r0, #64	; 0x40
   b632c:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b6330:	fa02 f280 	sxtah	r2, r2, r0
   b6334:	2340      	movs	r3, #64	; 0x40
   b6336:	2001      	movs	r0, #1
   b6338:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b633c:	2352      	movs	r3, #82	; 0x52
   b633e:	3952      	subs	r1, #82	; 0x52
   b6340:	9300      	str	r3, [sp, #0]
   b6342:	4b79      	ldr	r3, [pc, #484]	; (b6528 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b6344:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6348:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b634a:	4620      	mov	r0, r4
   b634c:	f341 014f 	sbfx	r1, r1, #1, #16
   b6350:	f7fe fea8 	bl	b50a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b6354:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b6356:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b635a:	2800      	cmp	r0, #0
   b635c:	d078      	beq.n	b6450 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b635e:	2d00      	cmp	r5, #0
   b6360:	d174      	bne.n	b644c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b6362:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6366:	2b20      	cmp	r3, #32
   b6368:	bf0c      	ite	eq
   b636a:	253c      	moveq	r5, #60	; 0x3c
   b636c:	253d      	movne	r5, #61	; 0x3d
   b636e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b6372:	f1b8 0f00 	cmp.w	r8, #0
   b6376:	d001      	beq.n	b637c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6378:	f001 fa92 	bl	b78a0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b637c:	b1fe      	cbz	r6, b63be <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b637e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6382:	2800      	cmp	r0, #0
   b6384:	db1b      	blt.n	b63be <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b6386:	2101      	movs	r1, #1
   b6388:	b280      	uxth	r0, r0
   b638a:	f001 fe97 	bl	b80bc <pinMode>
    digitalWrite(rstPin, HIGH);
   b638e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6392:	2101      	movs	r1, #1
   b6394:	b280      	uxth	r0, r0
   b6396:	f001 fea2 	bl	b80de <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b639a:	2001      	movs	r0, #1
   b639c:	f001 f816 	bl	b73cc <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b63a0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b63a4:	2100      	movs	r1, #0
   b63a6:	b280      	uxth	r0, r0
   b63a8:	f001 fe99 	bl	b80de <digitalWrite>
    delay(10);                  // Wait 10 ms
   b63ac:	200a      	movs	r0, #10
   b63ae:	f001 f80d 	bl	b73cc <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b63b2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b63b6:	2101      	movs	r1, #1
   b63b8:	b280      	uxth	r0, r0
   b63ba:	f001 fe90 	bl	b80de <digitalWrite>
  TRANSACTION_START
   b63be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b63c0:	2800      	cmp	r0, #0
   b63c2:	d074      	beq.n	b64ae <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b63c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b63c6:	f001 fa67 	bl	b7898 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b63ca:	2204      	movs	r2, #4
   b63cc:	4957      	ldr	r1, [pc, #348]	; (b652c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b63ce:	4620      	mov	r0, r4
   b63d0:	f7ff ff0b 	bl	b61ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b63d4:	8961      	ldrh	r1, [r4, #10]
   b63d6:	3901      	subs	r1, #1
   b63d8:	b2c9      	uxtb	r1, r1
   b63da:	4620      	mov	r0, r4
   b63dc:	f7ff fe96 	bl	b610c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b63e0:	4953      	ldr	r1, [pc, #332]	; (b6530 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b63e2:	2204      	movs	r2, #4
   b63e4:	4620      	mov	r0, r4
   b63e6:	f7ff ff00 	bl	b61ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b63ea:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b63ee:	2b01      	cmp	r3, #1
   b63f0:	bf0c      	ite	eq
   b63f2:	2110      	moveq	r1, #16
   b63f4:	2114      	movne	r1, #20
   b63f6:	4620      	mov	r0, r4
   b63f8:	f7ff fe88 	bl	b610c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b63fc:	2204      	movs	r2, #4
   b63fe:	494d      	ldr	r1, [pc, #308]	; (b6534 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b6400:	4620      	mov	r0, r4
   b6402:	f7ff fef2 	bl	b61ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b6406:	68a3      	ldr	r3, [r4, #8]
   b6408:	4a4b      	ldr	r2, [pc, #300]	; (b6538 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b640a:	4293      	cmp	r3, r2
   b640c:	d15c      	bne.n	b64c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b640e:	494b      	ldr	r1, [pc, #300]	; (b653c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6410:	2204      	movs	r2, #4
   b6412:	4620      	mov	r0, r4
   b6414:	f7ff fee9 	bl	b61ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6418:	21d9      	movs	r1, #217	; 0xd9
   b641a:	4620      	mov	r0, r4
   b641c:	f7ff fe76 	bl	b610c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6420:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6424:	2b01      	cmp	r3, #1
   b6426:	bf0c      	ite	eq
   b6428:	2122      	moveq	r1, #34	; 0x22
   b642a:	21f1      	movne	r1, #241	; 0xf1
   b642c:	4620      	mov	r0, r4
   b642e:	f7ff fe6d 	bl	b610c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b6432:	4620      	mov	r0, r4
   b6434:	4942      	ldr	r1, [pc, #264]	; (b6540 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b6436:	2206      	movs	r2, #6
   b6438:	f7ff fed7 	bl	b61ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b643c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b643e:	2800      	cmp	r0, #0
   b6440:	d063      	beq.n	b650a <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b6442:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6444:	f001 fa28 	bl	b7898 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b6448:	2001      	movs	r0, #1
   b644a:	e76b      	b.n	b6324 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b644c:	b26d      	sxtb	r5, r5
   b644e:	e78e      	b.n	b636e <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6450:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6454:	2101      	movs	r1, #1
   b6456:	b280      	uxth	r0, r0
   b6458:	f001 fe30 	bl	b80bc <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b645c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6460:	2101      	movs	r1, #1
   b6462:	b280      	uxth	r0, r0
   b6464:	f001 fe2a 	bl	b80bc <pinMode>
    SSD1306_DESELECT
   b6468:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b646c:	2101      	movs	r1, #1
   b646e:	b280      	uxth	r0, r0
   b6470:	f001 fe35 	bl	b80de <digitalWrite>
    if(spi) { // Hardware SPI
   b6474:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b6476:	b13d      	cbz	r5, b6488 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b6478:	f1b8 0f00 	cmp.w	r8, #0
   b647c:	f43f af7e 	beq.w	b637c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6480:	4628      	mov	r0, r5
   b6482:	f000 fd5d 	bl	b6f40 <_ZN8SPIClass5beginEv>
   b6486:	e779      	b.n	b637c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b6488:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b648c:	2101      	movs	r1, #1
   b648e:	b280      	uxth	r0, r0
   b6490:	f001 fe14 	bl	b80bc <pinMode>
      pinMode(clkPin , OUTPUT);
   b6494:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6498:	2101      	movs	r1, #1
   b649a:	b280      	uxth	r0, r0
   b649c:	f001 fe0e 	bl	b80bc <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b64a0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b64a4:	4629      	mov	r1, r5
   b64a6:	b280      	uxth	r0, r0
   b64a8:	f001 fe19 	bl	b80de <digitalWrite>
   b64ac:	e766      	b.n	b637c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b64ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b64b0:	b118      	cbz	r0, b64ba <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b64b2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b64b6:	f000 fd71 	bl	b6f9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b64ba:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b64be:	2100      	movs	r1, #0
   b64c0:	b280      	uxth	r0, r0
   b64c2:	f001 fe0c 	bl	b80de <digitalWrite>
   b64c6:	e780      	b.n	b63ca <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b64c8:	4a1e      	ldr	r2, [pc, #120]	; (b6544 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b64ca:	4293      	cmp	r3, r2
   b64cc:	d10e      	bne.n	b64ec <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b64ce:	491e      	ldr	r1, [pc, #120]	; (b6548 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b64d0:	2203      	movs	r2, #3
   b64d2:	4620      	mov	r0, r4
   b64d4:	f7ff fe89 	bl	b61ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b64d8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b64dc:	2b01      	cmp	r3, #1
   b64de:	bf0c      	ite	eq
   b64e0:	219f      	moveq	r1, #159	; 0x9f
   b64e2:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b64e4:	4620      	mov	r0, r4
   b64e6:	f7ff fe11 	bl	b610c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b64ea:	e795      	b.n	b6418 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b64ec:	4a17      	ldr	r2, [pc, #92]	; (b654c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b64ee:	4293      	cmp	r3, r2
   b64f0:	d192      	bne.n	b6418 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b64f2:	4917      	ldr	r1, [pc, #92]	; (b6550 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b64f4:	2203      	movs	r2, #3
   b64f6:	4620      	mov	r0, r4
   b64f8:	f7ff fe77 	bl	b61ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b64fc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6500:	2b01      	cmp	r3, #1
   b6502:	bf0c      	ite	eq
   b6504:	2110      	moveq	r1, #16
   b6506:	21af      	movne	r1, #175	; 0xaf
   b6508:	e7ec      	b.n	b64e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b650a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b650e:	2101      	movs	r1, #1
   b6510:	b280      	uxth	r0, r0
   b6512:	f001 fde4 	bl	b80de <digitalWrite>
   b6516:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6518:	2800      	cmp	r0, #0
   b651a:	d095      	beq.n	b6448 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b651c:	f000 fd24 	bl	b6f68 <_ZN8SPIClass14endTransactionEv>
   b6520:	e792      	b.n	b6448 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6522:	bf00      	nop
   b6524:	000b91e4 	.word	0x000b91e4
   b6528:	000b8f24 	.word	0x000b8f24
   b652c:	000b942c 	.word	0x000b942c
   b6530:	000b9430 	.word	0x000b9430
   b6534:	000b9434 	.word	0x000b9434
   b6538:	00200080 	.word	0x00200080
   b653c:	000b943e 	.word	0x000b943e
   b6540:	000b9438 	.word	0x000b9438
   b6544:	00400080 	.word	0x00400080
   b6548:	000b9442 	.word	0x000b9442
   b654c:	00100060 	.word	0x00100060
   b6550:	000b9445 	.word	0x000b9445

000b6554 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6554:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6556:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6558:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b655c:	db3d      	blt.n	b65da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b655e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6562:	4294      	cmp	r4, r2
   b6564:	dd39      	ble.n	b65da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b6566:	2900      	cmp	r1, #0
      w += x;
   b6568:	bfbe      	ittt	lt
   b656a:	185b      	addlt	r3, r3, r1
   b656c:	b21b      	sxthlt	r3, r3
      x  = 0;
   b656e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b6570:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b6574:	18ce      	adds	r6, r1, r3
   b6576:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b6578:	bfc4      	itt	gt
   b657a:	1a63      	subgt	r3, r4, r1
   b657c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b657e:	2b00      	cmp	r3, #0
   b6580:	dd2b      	ble.n	b65da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b6582:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6584:	10d6      	asrs	r6, r2, #3
   b6586:	fb14 1106 	smlabb	r1, r4, r6, r1
   b658a:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b658c:	f002 0007 	and.w	r0, r2, #7
   b6590:	2201      	movs	r2, #1
   b6592:	4082      	lsls	r2, r0
      switch(color) {
   b6594:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b6596:	b2d2      	uxtb	r2, r2
      switch(color) {
   b6598:	d016      	beq.n	b65c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b659a:	2d02      	cmp	r5, #2
   b659c:	d00b      	beq.n	b65b6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b659e:	b9e5      	cbnz	r5, b65da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b65a0:	43d2      	mvns	r2, r2
   b65a2:	b2d2      	uxtb	r2, r2
   b65a4:	440b      	add	r3, r1
   b65a6:	4299      	cmp	r1, r3
   b65a8:	d017      	beq.n	b65da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b65aa:	f811 0b01 	ldrb.w	r0, [r1], #1
   b65ae:	4010      	ands	r0, r2
   b65b0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b65b4:	e7f7      	b.n	b65a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b65b6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b65b8:	4299      	cmp	r1, r3
   b65ba:	d00e      	beq.n	b65da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b65bc:	f811 0b01 	ldrb.w	r0, [r1], #1
   b65c0:	4050      	eors	r0, r2
   b65c2:	f801 0c01 	strb.w	r0, [r1, #-1]
   b65c6:	e7f7      	b.n	b65b8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b65c8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b65ca:	4299      	cmp	r1, r3
   b65cc:	d005      	beq.n	b65da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b65ce:	f811 0b01 	ldrb.w	r0, [r1], #1
   b65d2:	4310      	orrs	r0, r2
   b65d4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b65d8:	e7f7      	b.n	b65ca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b65da:	bd70      	pop	{r4, r5, r6, pc}

000b65dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b65dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b65de:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b65e0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b65e4:	db76      	blt.n	b66d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b65e6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b65ea:	42b1      	cmp	r1, r6
   b65ec:	da72      	bge.n	b66d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b65ee:	2a00      	cmp	r2, #0
      __h += __y;
   b65f0:	bfbe      	ittt	lt
   b65f2:	189b      	addlt	r3, r3, r2
   b65f4:	b21b      	sxthlt	r3, r3
      __y = 0;
   b65f6:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b65f8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b65fc:	18d7      	adds	r7, r2, r3
   b65fe:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b6600:	bfc4      	itt	gt
   b6602:	1aa3      	subgt	r3, r4, r2
   b6604:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b6606:	2b00      	cmp	r3, #0
   b6608:	dd64      	ble.n	b66d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b660a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b660e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b6610:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b6614:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b6618:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b661a:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b661e:	d023      	beq.n	b6668 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b6620:	f1c2 0208 	rsb	r2, r2, #8
   b6624:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b6626:	492d      	ldr	r1, [pc, #180]	; (b66dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6628:	4293      	cmp	r3, r2
   b662a:	bf3c      	itt	cc
   b662c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b6630:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b6634:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6636:	bf3c      	itt	cc
   b6638:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b663c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b6640:	2d01      	cmp	r5, #1
   b6642:	d007      	beq.n	b6654 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b6644:	2d02      	cmp	r5, #2
   b6646:	d02e      	beq.n	b66a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b6648:	b94d      	cbnz	r5, b665e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b664a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b664e:	ea2c 0101 	bic.w	r1, ip, r1
   b6652:	e003      	b.n	b665c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b6654:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6658:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b665c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b665e:	4293      	cmp	r3, r2
   b6660:	d338      	bcc.n	b66d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b6662:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b6666:	440c      	add	r4, r1
        h -= mod;
   b6668:	1a9a      	subs	r2, r3, r2
   b666a:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b666c:	2a07      	cmp	r2, #7
   b666e:	d90e      	bls.n	b668e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6670:	2d02      	cmp	r5, #2
   b6672:	d11d      	bne.n	b66b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b6674:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b6676:	7821      	ldrb	r1, [r4, #0]
   b6678:	43c9      	mvns	r1, r1
   b667a:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b667c:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b667e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b6682:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6684:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6686:	440c      	add	r4, r1
            } while(h >= 8);
   b6688:	d8f5      	bhi.n	b6676 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b668a:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b668e:	b30a      	cbz	r2, b66d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6690:	4b13      	ldr	r3, [pc, #76]	; (b66e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b6692:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6694:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b6696:	d01a      	beq.n	b66ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6698:	2d02      	cmp	r5, #2
   b669a:	d01c      	beq.n	b66d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b669c:	b9d5      	cbnz	r5, b66d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b669e:	7822      	ldrb	r2, [r4, #0]
   b66a0:	ea22 0303 	bic.w	r3, r2, r3
   b66a4:	e015      	b.n	b66d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b66a6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b66aa:	ea81 010c 	eor.w	r1, r1, ip
   b66ae:	e7d5      	b.n	b665c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b66b0:	1e29      	subs	r1, r5, #0
   b66b2:	bf18      	it	ne
   b66b4:	2101      	movne	r1, #1
   b66b6:	4249      	negs	r1, r1
   b66b8:	b2c9      	uxtb	r1, r1
   b66ba:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b66bc:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b66be:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b66c0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b66c4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b66c6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b66c8:	4434      	add	r4, r6
            } while(h >= 8);
   b66ca:	d8f7      	bhi.n	b66bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b66cc:	e7dd      	b.n	b668a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b66ce:	7822      	ldrb	r2, [r4, #0]
   b66d0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b66d2:	7023      	strb	r3, [r4, #0]
}
   b66d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b66d6:	7822      	ldrb	r2, [r4, #0]
   b66d8:	4053      	eors	r3, r2
   b66da:	e7fa      	b.n	b66d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b66dc:	000b941c 	.word	0x000b941c
   b66e0:	000b9424 	.word	0x000b9424

000b66e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b66e4:	b470      	push	{r4, r5, r6}
   b66e6:	4614      	mov	r4, r2
  switch(rotation) {
   b66e8:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b66ea:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b66ee:	2a02      	cmp	r2, #2
   b66f0:	d00d      	beq.n	b670e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b66f2:	2a03      	cmp	r2, #3
   b66f4:	d018      	beq.n	b6728 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b66f6:	2a01      	cmp	r2, #1
   b66f8:	d111      	bne.n	b671e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b66fa:	8902      	ldrh	r2, [r0, #8]
   b66fc:	43e4      	mvns	r4, r4
   b66fe:	4414      	add	r4, r2
   b6700:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6702:	9603      	str	r6, [sp, #12]
   b6704:	460a      	mov	r2, r1
   b6706:	4621      	mov	r1, r4
}
   b6708:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b670a:	f7ff bf67 	b.w	b65dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b670e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b6710:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b6712:	43e4      	mvns	r4, r4
    x -= (w-1);
   b6714:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b6716:	4414      	add	r4, r2
    x -= (w-1);
   b6718:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b671a:	b224      	sxth	r4, r4
    x -= (w-1);
   b671c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b671e:	9603      	str	r6, [sp, #12]
   b6720:	4622      	mov	r2, r4
}
   b6722:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b6724:	f7ff bf16 	b.w	b6554 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6728:	8945      	ldrh	r5, [r0, #10]
   b672a:	4419      	add	r1, r3
   b672c:	1a69      	subs	r1, r5, r1
   b672e:	b209      	sxth	r1, r1
    break;
   b6730:	e7e7      	b.n	b6702 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b6732 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6732:	b430      	push	{r4, r5}
   b6734:	4614      	mov	r4, r2
  switch(rotation) {
   b6736:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6738:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b673c:	2a02      	cmp	r2, #2
   b673e:	d00d      	beq.n	b675c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6740:	2a03      	cmp	r2, #3
   b6742:	d018      	beq.n	b6776 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b6744:	2a01      	cmp	r2, #1
   b6746:	d111      	bne.n	b676c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6748:	18e2      	adds	r2, r4, r3
   b674a:	8904      	ldrh	r4, [r0, #8]
   b674c:	1aa4      	subs	r4, r4, r2
   b674e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6750:	9502      	str	r5, [sp, #8]
   b6752:	460a      	mov	r2, r1
   b6754:	4621      	mov	r1, r4
}
   b6756:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6758:	f7ff befc 	b.w	b6554 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b675c:	8902      	ldrh	r2, [r0, #8]
   b675e:	43c9      	mvns	r1, r1
   b6760:	4411      	add	r1, r2
    y -= (h-1);
   b6762:	18e2      	adds	r2, r4, r3
   b6764:	8944      	ldrh	r4, [r0, #10]
   b6766:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6768:	b209      	sxth	r1, r1
    y -= (h-1);
   b676a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b676c:	9502      	str	r5, [sp, #8]
   b676e:	4622      	mov	r2, r4
}
   b6770:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b6772:	f7ff bf33 	b.w	b65dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b6776:	8942      	ldrh	r2, [r0, #10]
   b6778:	43c9      	mvns	r1, r1
   b677a:	4411      	add	r1, r2
   b677c:	b209      	sxth	r1, r1
    break;
   b677e:	e7e7      	b.n	b6750 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6780 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6784:	4604      	mov	r4, r0
  TRANSACTION_START
   b6786:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6788:	2800      	cmp	r0, #0
   b678a:	d042      	beq.n	b6812 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b678c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b678e:	f001 f883 	bl	b7898 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b6792:	4947      	ldr	r1, [pc, #284]	; (b68b0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b6794:	2205      	movs	r2, #5
   b6796:	4620      	mov	r0, r4
   b6798:	f7ff fd27 	bl	b61ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b679c:	8921      	ldrh	r1, [r4, #8]
   b679e:	3901      	subs	r1, #1
   b67a0:	4620      	mov	r0, r4
   b67a2:	b2c9      	uxtb	r1, r1
   b67a4:	f7ff fcb2 	bl	b610c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b67a8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b67ac:	1dde      	adds	r6, r3, #7
   b67ae:	bf48      	it	mi
   b67b0:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b67b4:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b67b8:	8923      	ldrh	r3, [r4, #8]
   b67ba:	10f6      	asrs	r6, r6, #3
   b67bc:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b67c0:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b67c4:	2800      	cmp	r0, #0
   b67c6:	d03a      	beq.n	b683e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b67c8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b67cc:	f001 f872 	bl	b78b4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b67d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b67d2:	6803      	ldr	r3, [r0, #0]
   b67d4:	2140      	movs	r1, #64	; 0x40
   b67d6:	689b      	ldr	r3, [r3, #8]
   b67d8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b67da:	2701      	movs	r7, #1
    while(count--) {
   b67dc:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b67de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b67e0:	d024      	beq.n	b682c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b67e2:	2f1f      	cmp	r7, #31
   b67e4:	d90c      	bls.n	b6800 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b67e6:	f001 f86c 	bl	b78c2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b67ea:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b67ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b67f0:	f001 f860 	bl	b78b4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b67f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b67f6:	6803      	ldr	r3, [r0, #0]
   b67f8:	2140      	movs	r1, #64	; 0x40
   b67fa:	689b      	ldr	r3, [r3, #8]
   b67fc:	4798      	blx	r3
        bytesOut = 1;
   b67fe:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b6800:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6802:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6806:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6808:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b680a:	689b      	ldr	r3, [r3, #8]
   b680c:	4798      	blx	r3
      bytesOut++;
   b680e:	b2ff      	uxtb	r7, r7
    while(count--) {
   b6810:	e7e4      	b.n	b67dc <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b6812:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6814:	b118      	cbz	r0, b681e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b6816:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b681a:	f000 fbbf 	bl	b6f9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b681e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6822:	2100      	movs	r1, #0
   b6824:	b280      	uxth	r0, r0
   b6826:	f001 fc5a 	bl	b80de <digitalWrite>
   b682a:	e7b2      	b.n	b6792 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b682c:	f001 f849 	bl	b78c2 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6830:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6832:	b378      	cbz	r0, b6894 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b6834:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6836:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b683a:	f001 b82d 	b.w	b7898 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b683e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6842:	2101      	movs	r1, #1
   b6844:	b280      	uxth	r0, r0
   b6846:	f001 fc4a 	bl	b80de <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b684a:	42ae      	cmp	r6, r5
   b684c:	d0f0      	beq.n	b6830 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b684e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6850:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6854:	b118      	cbz	r0, b685e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b6856:	4649      	mov	r1, r9
   b6858:	f000 fc0e 	bl	b7078 <_ZN8SPIClass8transferEh>
   b685c:	e7f5      	b.n	b684a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b685e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6860:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6864:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6868:	ea09 0108 	and.w	r1, r9, r8
   b686c:	b280      	uxth	r0, r0
   b686e:	f001 fc36 	bl	b80de <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6872:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6876:	2101      	movs	r1, #1
   b6878:	b280      	uxth	r0, r0
   b687a:	f001 fc30 	bl	b80de <digitalWrite>
      digitalWrite(clkPin , LOW);
   b687e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6882:	2100      	movs	r1, #0
   b6884:	b280      	uxth	r0, r0
   b6886:	f001 fc2a 	bl	b80de <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b688a:	3f01      	subs	r7, #1
   b688c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6890:	d1e8      	bne.n	b6864 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b6892:	e7da      	b.n	b684a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6894:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6898:	2101      	movs	r1, #1
   b689a:	b280      	uxth	r0, r0
   b689c:	f001 fc1f 	bl	b80de <digitalWrite>
   b68a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b68a2:	b118      	cbz	r0, b68ac <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b68a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b68a8:	f000 bb5e 	b.w	b6f68 <_ZN8SPIClass14endTransactionEv>
}
   b68ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b68b0:	000b9448 	.word	0x000b9448

000b68b4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b68b4:	f000 bd8a 	b.w	b73cc <delay>

000b68b8 <_Z11BlynkMillisv>:
   b68b8:	f000 b880 	b.w	b69bc <HAL_Timer_Get_Milli_Seconds>

000b68bc <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b68bc:	4770      	bx	lr

000b68be <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b68be:	4770      	bx	lr

000b68c0 <BlynkNoOpCbk>:
{}
   b68c0:	4770      	bx	lr
	...

000b68c4 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b68c4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b68c6:	bf5a      	itte	pl
   b68c8:	4b02      	ldrpl	r3, [pc, #8]	; (b68d4 <GetReadHandler+0x10>)
   b68ca:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b68ce:	2000      	movmi	r0, #0
#endif
}
   b68d0:	4770      	bx	lr
   b68d2:	bf00      	nop
   b68d4:	000b9450 	.word	0x000b9450

000b68d8 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b68d8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b68da:	bf5a      	itte	pl
   b68dc:	4b02      	ldrpl	r3, [pc, #8]	; (b68e8 <GetWriteHandler+0x10>)
   b68de:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b68e2:	2000      	movmi	r0, #0
#endif
}
   b68e4:	4770      	bx	lr
   b68e6:	bf00      	nop
   b68e8:	000b9650 	.word	0x000b9650

000b68ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b68ec:	b508      	push	{r3, lr}
   b68ee:	4b02      	ldr	r3, [pc, #8]	; (b68f8 <netdb_freeaddrinfo+0xc>)
   b68f0:	681b      	ldr	r3, [r3, #0]
   b68f2:	689b      	ldr	r3, [r3, #8]
   b68f4:	9301      	str	r3, [sp, #4]
   b68f6:	bd08      	pop	{r3, pc}
   b68f8:	00030268 	.word	0x00030268

000b68fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b68fc:	b508      	push	{r3, lr}
   b68fe:	4b02      	ldr	r3, [pc, #8]	; (b6908 <netdb_getaddrinfo+0xc>)
   b6900:	681b      	ldr	r3, [r3, #0]
   b6902:	68db      	ldr	r3, [r3, #12]
   b6904:	9301      	str	r3, [sp, #4]
   b6906:	bd08      	pop	{r3, pc}
   b6908:	00030268 	.word	0x00030268

000b690c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b690c:	b508      	push	{r3, lr}
   b690e:	4b02      	ldr	r3, [pc, #8]	; (b6918 <HAL_Validate_Pin_Function+0xc>)
   b6910:	681b      	ldr	r3, [r3, #0]
   b6912:	685b      	ldr	r3, [r3, #4]
   b6914:	9301      	str	r3, [sp, #4]
   b6916:	bd08      	pop	{r3, pc}
   b6918:	0003022c 	.word	0x0003022c

000b691c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b691c:	b508      	push	{r3, lr}
   b691e:	4b02      	ldr	r3, [pc, #8]	; (b6928 <HAL_Pin_Mode+0xc>)
   b6920:	681b      	ldr	r3, [r3, #0]
   b6922:	689b      	ldr	r3, [r3, #8]
   b6924:	9301      	str	r3, [sp, #4]
   b6926:	bd08      	pop	{r3, pc}
   b6928:	0003022c 	.word	0x0003022c

000b692c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b692c:	b508      	push	{r3, lr}
   b692e:	4b02      	ldr	r3, [pc, #8]	; (b6938 <HAL_Get_Pin_Mode+0xc>)
   b6930:	681b      	ldr	r3, [r3, #0]
   b6932:	68db      	ldr	r3, [r3, #12]
   b6934:	9301      	str	r3, [sp, #4]
   b6936:	bd08      	pop	{r3, pc}
   b6938:	0003022c 	.word	0x0003022c

000b693c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b693c:	b508      	push	{r3, lr}
   b693e:	4b02      	ldr	r3, [pc, #8]	; (b6948 <HAL_GPIO_Write+0xc>)
   b6940:	681b      	ldr	r3, [r3, #0]
   b6942:	691b      	ldr	r3, [r3, #16]
   b6944:	9301      	str	r3, [sp, #4]
   b6946:	bd08      	pop	{r3, pc}
   b6948:	0003022c 	.word	0x0003022c

000b694c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b694c:	b508      	push	{r3, lr}
   b694e:	4b02      	ldr	r3, [pc, #8]	; (b6958 <HAL_GPIO_Read+0xc>)
   b6950:	681b      	ldr	r3, [r3, #0]
   b6952:	695b      	ldr	r3, [r3, #20]
   b6954:	9301      	str	r3, [sp, #4]
   b6956:	bd08      	pop	{r3, pc}
   b6958:	0003022c 	.word	0x0003022c

000b695c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b695c:	b508      	push	{r3, lr}
   b695e:	4b02      	ldr	r3, [pc, #8]	; (b6968 <HAL_DAC_Write+0xc>)
   b6960:	681b      	ldr	r3, [r3, #0]
   b6962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6964:	9301      	str	r3, [sp, #4]
   b6966:	bd08      	pop	{r3, pc}
   b6968:	0003022c 	.word	0x0003022c

000b696c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b696c:	b508      	push	{r3, lr}
   b696e:	4b02      	ldr	r3, [pc, #8]	; (b6978 <hal_adc_read+0xc>)
   b6970:	681b      	ldr	r3, [r3, #0]
   b6972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6974:	9301      	str	r3, [sp, #4]
   b6976:	bd08      	pop	{r3, pc}
   b6978:	0003022c 	.word	0x0003022c

000b697c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b697c:	b508      	push	{r3, lr}
   b697e:	4b02      	ldr	r3, [pc, #8]	; (b6988 <hal_pwm_write_ext+0xc>)
   b6980:	681b      	ldr	r3, [r3, #0]
   b6982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6984:	9301      	str	r3, [sp, #4]
   b6986:	bd08      	pop	{r3, pc}
   b6988:	0003022c 	.word	0x0003022c

000b698c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b698c:	b508      	push	{r3, lr}
   b698e:	4b02      	ldr	r3, [pc, #8]	; (b6998 <if_index_to_name+0xc>)
   b6990:	681b      	ldr	r3, [r3, #0]
   b6992:	695b      	ldr	r3, [r3, #20]
   b6994:	9301      	str	r3, [sp, #4]
   b6996:	bd08      	pop	{r3, pc}
   b6998:	0003026c 	.word	0x0003026c

000b699c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b699c:	b508      	push	{r3, lr}
   b699e:	4b02      	ldr	r3, [pc, #8]	; (b69a8 <HAL_RNG_GetRandomNumber+0xc>)
   b69a0:	681b      	ldr	r3, [r3, #0]
   b69a2:	685b      	ldr	r3, [r3, #4]
   b69a4:	9301      	str	r3, [sp, #4]
   b69a6:	bd08      	pop	{r3, pc}
   b69a8:	00030218 	.word	0x00030218

000b69ac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b69ac:	b508      	push	{r3, lr}
   b69ae:	4b02      	ldr	r3, [pc, #8]	; (b69b8 <HAL_Delay_Microseconds+0xc>)
   b69b0:	681b      	ldr	r3, [r3, #0]
   b69b2:	68db      	ldr	r3, [r3, #12]
   b69b4:	9301      	str	r3, [sp, #4]
   b69b6:	bd08      	pop	{r3, pc}
   b69b8:	00030218 	.word	0x00030218

000b69bc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b69bc:	b508      	push	{r3, lr}
   b69be:	4b02      	ldr	r3, [pc, #8]	; (b69c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b69c0:	681b      	ldr	r3, [r3, #0]
   b69c2:	695b      	ldr	r3, [r3, #20]
   b69c4:	9301      	str	r3, [sp, #4]
   b69c6:	bd08      	pop	{r3, pc}
   b69c8:	00030218 	.word	0x00030218

000b69cc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b69cc:	b508      	push	{r3, lr}
   b69ce:	4b02      	ldr	r3, [pc, #8]	; (b69d8 <os_mutex_create+0xc>)
   b69d0:	681b      	ldr	r3, [r3, #0]
   b69d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b69d4:	9301      	str	r3, [sp, #4]
   b69d6:	bd08      	pop	{r3, pc}
   b69d8:	00030248 	.word	0x00030248

000b69dc <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b69dc:	b508      	push	{r3, lr}
   b69de:	4b02      	ldr	r3, [pc, #8]	; (b69e8 <os_mutex_destroy+0xc>)
   b69e0:	681b      	ldr	r3, [r3, #0]
   b69e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b69e4:	9301      	str	r3, [sp, #4]
   b69e6:	bd08      	pop	{r3, pc}
   b69e8:	00030248 	.word	0x00030248

000b69ec <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b69ec:	b508      	push	{r3, lr}
   b69ee:	4b02      	ldr	r3, [pc, #8]	; (b69f8 <os_mutex_lock+0xc>)
   b69f0:	681b      	ldr	r3, [r3, #0]
   b69f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b69f4:	9301      	str	r3, [sp, #4]
   b69f6:	bd08      	pop	{r3, pc}
   b69f8:	00030248 	.word	0x00030248

000b69fc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b69fc:	b508      	push	{r3, lr}
   b69fe:	4b02      	ldr	r3, [pc, #8]	; (b6a08 <os_mutex_unlock+0xc>)
   b6a00:	681b      	ldr	r3, [r3, #0]
   b6a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a04:	9301      	str	r3, [sp, #4]
   b6a06:	bd08      	pop	{r3, pc}
   b6a08:	00030248 	.word	0x00030248

000b6a0c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6a0c:	b508      	push	{r3, lr}
   b6a0e:	4b02      	ldr	r3, [pc, #8]	; (b6a18 <os_mutex_recursive_create+0xc>)
   b6a10:	681b      	ldr	r3, [r3, #0]
   b6a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6a14:	9301      	str	r3, [sp, #4]
   b6a16:	bd08      	pop	{r3, pc}
   b6a18:	00030248 	.word	0x00030248

000b6a1c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6a1c:	b508      	push	{r3, lr}
   b6a1e:	4b02      	ldr	r3, [pc, #8]	; (b6a28 <inet_inet_ntop+0xc>)
   b6a20:	681b      	ldr	r3, [r3, #0]
   b6a22:	695b      	ldr	r3, [r3, #20]
   b6a24:	9301      	str	r3, [sp, #4]
   b6a26:	bd08      	pop	{r3, pc}
   b6a28:	00030264 	.word	0x00030264

000b6a2c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6a2c:	b508      	push	{r3, lr}
   b6a2e:	4b02      	ldr	r3, [pc, #8]	; (b6a38 <inet_htonl+0xc>)
   b6a30:	681b      	ldr	r3, [r3, #0]
   b6a32:	6a1b      	ldr	r3, [r3, #32]
   b6a34:	9301      	str	r3, [sp, #4]
   b6a36:	bd08      	pop	{r3, pc}
   b6a38:	00030264 	.word	0x00030264

000b6a3c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6a3c:	b508      	push	{r3, lr}
   b6a3e:	4b02      	ldr	r3, [pc, #8]	; (b6a48 <inet_htons+0xc>)
   b6a40:	681b      	ldr	r3, [r3, #0]
   b6a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a44:	9301      	str	r3, [sp, #4]
   b6a46:	bd08      	pop	{r3, pc}
   b6a48:	00030264 	.word	0x00030264

000b6a4c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6a4c:	b508      	push	{r3, lr}
   b6a4e:	4b02      	ldr	r3, [pc, #8]	; (b6a58 <hal_usart_write+0xc>)
   b6a50:	681b      	ldr	r3, [r3, #0]
   b6a52:	68db      	ldr	r3, [r3, #12]
   b6a54:	9301      	str	r3, [sp, #4]
   b6a56:	bd08      	pop	{r3, pc}
   b6a58:	0003023c 	.word	0x0003023c

000b6a5c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6a5c:	b508      	push	{r3, lr}
   b6a5e:	4b02      	ldr	r3, [pc, #8]	; (b6a68 <hal_usart_available+0xc>)
   b6a60:	681b      	ldr	r3, [r3, #0]
   b6a62:	691b      	ldr	r3, [r3, #16]
   b6a64:	9301      	str	r3, [sp, #4]
   b6a66:	bd08      	pop	{r3, pc}
   b6a68:	0003023c 	.word	0x0003023c

000b6a6c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6a6c:	b508      	push	{r3, lr}
   b6a6e:	4b02      	ldr	r3, [pc, #8]	; (b6a78 <hal_usart_read+0xc>)
   b6a70:	681b      	ldr	r3, [r3, #0]
   b6a72:	695b      	ldr	r3, [r3, #20]
   b6a74:	9301      	str	r3, [sp, #4]
   b6a76:	bd08      	pop	{r3, pc}
   b6a78:	0003023c 	.word	0x0003023c

000b6a7c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6a7c:	b508      	push	{r3, lr}
   b6a7e:	4b02      	ldr	r3, [pc, #8]	; (b6a88 <hal_usart_peek+0xc>)
   b6a80:	681b      	ldr	r3, [r3, #0]
   b6a82:	699b      	ldr	r3, [r3, #24]
   b6a84:	9301      	str	r3, [sp, #4]
   b6a86:	bd08      	pop	{r3, pc}
   b6a88:	0003023c 	.word	0x0003023c

000b6a8c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6a8c:	b508      	push	{r3, lr}
   b6a8e:	4b02      	ldr	r3, [pc, #8]	; (b6a98 <hal_usart_flush+0xc>)
   b6a90:	681b      	ldr	r3, [r3, #0]
   b6a92:	69db      	ldr	r3, [r3, #28]
   b6a94:	9301      	str	r3, [sp, #4]
   b6a96:	bd08      	pop	{r3, pc}
   b6a98:	0003023c 	.word	0x0003023c

000b6a9c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6a9c:	b508      	push	{r3, lr}
   b6a9e:	4b02      	ldr	r3, [pc, #8]	; (b6aa8 <hal_usart_is_enabled+0xc>)
   b6aa0:	681b      	ldr	r3, [r3, #0]
   b6aa2:	6a1b      	ldr	r3, [r3, #32]
   b6aa4:	9301      	str	r3, [sp, #4]
   b6aa6:	bd08      	pop	{r3, pc}
   b6aa8:	0003023c 	.word	0x0003023c

000b6aac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6aac:	b508      	push	{r3, lr}
   b6aae:	4b02      	ldr	r3, [pc, #8]	; (b6ab8 <hal_usart_available_data_for_write+0xc>)
   b6ab0:	681b      	ldr	r3, [r3, #0]
   b6ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ab4:	9301      	str	r3, [sp, #4]
   b6ab6:	bd08      	pop	{r3, pc}
   b6ab8:	0003023c 	.word	0x0003023c

000b6abc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6abc:	b508      	push	{r3, lr}
   b6abe:	4b02      	ldr	r3, [pc, #8]	; (b6ac8 <hal_usart_init_ex+0xc>)
   b6ac0:	681b      	ldr	r3, [r3, #0]
   b6ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ac4:	9301      	str	r3, [sp, #4]
   b6ac6:	bd08      	pop	{r3, pc}
   b6ac8:	0003023c 	.word	0x0003023c

000b6acc <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6acc:	b508      	push	{r3, lr}
   b6ace:	4b02      	ldr	r3, [pc, #8]	; (b6ad8 <hal_i2c_set_speed+0xc>)
   b6ad0:	681b      	ldr	r3, [r3, #0]
   b6ad2:	681b      	ldr	r3, [r3, #0]
   b6ad4:	9301      	str	r3, [sp, #4]
   b6ad6:	bd08      	pop	{r3, pc}
   b6ad8:	00030228 	.word	0x00030228

000b6adc <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6adc:	b508      	push	{r3, lr}
   b6ade:	4b02      	ldr	r3, [pc, #8]	; (b6ae8 <hal_i2c_begin+0xc>)
   b6ae0:	681b      	ldr	r3, [r3, #0]
   b6ae2:	68db      	ldr	r3, [r3, #12]
   b6ae4:	9301      	str	r3, [sp, #4]
   b6ae6:	bd08      	pop	{r3, pc}
   b6ae8:	00030228 	.word	0x00030228

000b6aec <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6aec:	b508      	push	{r3, lr}
   b6aee:	4b02      	ldr	r3, [pc, #8]	; (b6af8 <hal_i2c_begin_transmission+0xc>)
   b6af0:	681b      	ldr	r3, [r3, #0]
   b6af2:	699b      	ldr	r3, [r3, #24]
   b6af4:	9301      	str	r3, [sp, #4]
   b6af6:	bd08      	pop	{r3, pc}
   b6af8:	00030228 	.word	0x00030228

000b6afc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6afc:	b508      	push	{r3, lr}
   b6afe:	4b02      	ldr	r3, [pc, #8]	; (b6b08 <hal_i2c_end_transmission+0xc>)
   b6b00:	681b      	ldr	r3, [r3, #0]
   b6b02:	69db      	ldr	r3, [r3, #28]
   b6b04:	9301      	str	r3, [sp, #4]
   b6b06:	bd08      	pop	{r3, pc}
   b6b08:	00030228 	.word	0x00030228

000b6b0c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6b0c:	b508      	push	{r3, lr}
   b6b0e:	4b02      	ldr	r3, [pc, #8]	; (b6b18 <hal_i2c_write+0xc>)
   b6b10:	681b      	ldr	r3, [r3, #0]
   b6b12:	6a1b      	ldr	r3, [r3, #32]
   b6b14:	9301      	str	r3, [sp, #4]
   b6b16:	bd08      	pop	{r3, pc}
   b6b18:	00030228 	.word	0x00030228

000b6b1c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6b1c:	b508      	push	{r3, lr}
   b6b1e:	4b02      	ldr	r3, [pc, #8]	; (b6b28 <hal_i2c_available+0xc>)
   b6b20:	681b      	ldr	r3, [r3, #0]
   b6b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6b24:	9301      	str	r3, [sp, #4]
   b6b26:	bd08      	pop	{r3, pc}
   b6b28:	00030228 	.word	0x00030228

000b6b2c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6b2c:	b508      	push	{r3, lr}
   b6b2e:	4b02      	ldr	r3, [pc, #8]	; (b6b38 <hal_i2c_read+0xc>)
   b6b30:	681b      	ldr	r3, [r3, #0]
   b6b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b34:	9301      	str	r3, [sp, #4]
   b6b36:	bd08      	pop	{r3, pc}
   b6b38:	00030228 	.word	0x00030228

000b6b3c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6b3c:	b508      	push	{r3, lr}
   b6b3e:	4b02      	ldr	r3, [pc, #8]	; (b6b48 <hal_i2c_peek+0xc>)
   b6b40:	681b      	ldr	r3, [r3, #0]
   b6b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b44:	9301      	str	r3, [sp, #4]
   b6b46:	bd08      	pop	{r3, pc}
   b6b48:	00030228 	.word	0x00030228

000b6b4c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6b4c:	b508      	push	{r3, lr}
   b6b4e:	4b02      	ldr	r3, [pc, #8]	; (b6b58 <hal_i2c_flush+0xc>)
   b6b50:	681b      	ldr	r3, [r3, #0]
   b6b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b54:	9301      	str	r3, [sp, #4]
   b6b56:	bd08      	pop	{r3, pc}
   b6b58:	00030228 	.word	0x00030228

000b6b5c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6b5c:	b508      	push	{r3, lr}
   b6b5e:	4b02      	ldr	r3, [pc, #8]	; (b6b68 <hal_i2c_is_enabled+0xc>)
   b6b60:	681b      	ldr	r3, [r3, #0]
   b6b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b64:	9301      	str	r3, [sp, #4]
   b6b66:	bd08      	pop	{r3, pc}
   b6b68:	00030228 	.word	0x00030228

000b6b6c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6b6c:	b508      	push	{r3, lr}
   b6b6e:	4b02      	ldr	r3, [pc, #8]	; (b6b78 <hal_i2c_init+0xc>)
   b6b70:	681b      	ldr	r3, [r3, #0]
   b6b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b74:	9301      	str	r3, [sp, #4]
   b6b76:	bd08      	pop	{r3, pc}
   b6b78:	00030228 	.word	0x00030228

000b6b7c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6b7c:	b508      	push	{r3, lr}
   b6b7e:	4b02      	ldr	r3, [pc, #8]	; (b6b88 <sock_setsockopt+0xc>)
   b6b80:	681b      	ldr	r3, [r3, #0]
   b6b82:	699b      	ldr	r3, [r3, #24]
   b6b84:	9301      	str	r3, [sp, #4]
   b6b86:	bd08      	pop	{r3, pc}
   b6b88:	00030238 	.word	0x00030238

000b6b8c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6b8c:	b508      	push	{r3, lr}
   b6b8e:	4b02      	ldr	r3, [pc, #8]	; (b6b98 <sock_close+0xc>)
   b6b90:	681b      	ldr	r3, [r3, #0]
   b6b92:	69db      	ldr	r3, [r3, #28]
   b6b94:	9301      	str	r3, [sp, #4]
   b6b96:	bd08      	pop	{r3, pc}
   b6b98:	00030238 	.word	0x00030238

000b6b9c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6b9c:	b508      	push	{r3, lr}
   b6b9e:	4b02      	ldr	r3, [pc, #8]	; (b6ba8 <sock_connect+0xc>)
   b6ba0:	681b      	ldr	r3, [r3, #0]
   b6ba2:	6a1b      	ldr	r3, [r3, #32]
   b6ba4:	9301      	str	r3, [sp, #4]
   b6ba6:	bd08      	pop	{r3, pc}
   b6ba8:	00030238 	.word	0x00030238

000b6bac <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6bac:	b508      	push	{r3, lr}
   b6bae:	4b02      	ldr	r3, [pc, #8]	; (b6bb8 <sock_recv+0xc>)
   b6bb0:	681b      	ldr	r3, [r3, #0]
   b6bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6bb4:	9301      	str	r3, [sp, #4]
   b6bb6:	bd08      	pop	{r3, pc}
   b6bb8:	00030238 	.word	0x00030238

000b6bbc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6bbc:	b508      	push	{r3, lr}
   b6bbe:	4b02      	ldr	r3, [pc, #8]	; (b6bc8 <sock_send+0xc>)
   b6bc0:	681b      	ldr	r3, [r3, #0]
   b6bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6bc4:	9301      	str	r3, [sp, #4]
   b6bc6:	bd08      	pop	{r3, pc}
   b6bc8:	00030238 	.word	0x00030238

000b6bcc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6bcc:	b508      	push	{r3, lr}
   b6bce:	4b02      	ldr	r3, [pc, #8]	; (b6bd8 <sock_socket+0xc>)
   b6bd0:	681b      	ldr	r3, [r3, #0]
   b6bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6bd4:	9301      	str	r3, [sp, #4]
   b6bd6:	bd08      	pop	{r3, pc}
   b6bd8:	00030238 	.word	0x00030238

000b6bdc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6bdc:	b508      	push	{r3, lr}
   b6bde:	4b02      	ldr	r3, [pc, #8]	; (b6be8 <hal_spi_begin+0xc>)
   b6be0:	681b      	ldr	r3, [r3, #0]
   b6be2:	681b      	ldr	r3, [r3, #0]
   b6be4:	9301      	str	r3, [sp, #4]
   b6be6:	bd08      	pop	{r3, pc}
   b6be8:	00030230 	.word	0x00030230

000b6bec <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6bec:	b508      	push	{r3, lr}
   b6bee:	4b02      	ldr	r3, [pc, #8]	; (b6bf8 <hal_spi_transfer+0xc>)
   b6bf0:	681b      	ldr	r3, [r3, #0]
   b6bf2:	695b      	ldr	r3, [r3, #20]
   b6bf4:	9301      	str	r3, [sp, #4]
   b6bf6:	bd08      	pop	{r3, pc}
   b6bf8:	00030230 	.word	0x00030230

000b6bfc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6bfc:	b508      	push	{r3, lr}
   b6bfe:	4b02      	ldr	r3, [pc, #8]	; (b6c08 <hal_spi_init+0xc>)
   b6c00:	681b      	ldr	r3, [r3, #0]
   b6c02:	69db      	ldr	r3, [r3, #28]
   b6c04:	9301      	str	r3, [sp, #4]
   b6c06:	bd08      	pop	{r3, pc}
   b6c08:	00030230 	.word	0x00030230

000b6c0c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6c0c:	b508      	push	{r3, lr}
   b6c0e:	4b02      	ldr	r3, [pc, #8]	; (b6c18 <hal_spi_is_enabled+0xc>)
   b6c10:	681b      	ldr	r3, [r3, #0]
   b6c12:	6a1b      	ldr	r3, [r3, #32]
   b6c14:	9301      	str	r3, [sp, #4]
   b6c16:	bd08      	pop	{r3, pc}
   b6c18:	00030230 	.word	0x00030230

000b6c1c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6c1c:	b508      	push	{r3, lr}
   b6c1e:	4b02      	ldr	r3, [pc, #8]	; (b6c28 <hal_spi_info+0xc>)
   b6c20:	681b      	ldr	r3, [r3, #0]
   b6c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6c24:	9301      	str	r3, [sp, #4]
   b6c26:	bd08      	pop	{r3, pc}
   b6c28:	00030230 	.word	0x00030230

000b6c2c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6c2c:	b508      	push	{r3, lr}
   b6c2e:	4b02      	ldr	r3, [pc, #8]	; (b6c38 <hal_spi_set_settings+0xc>)
   b6c30:	681b      	ldr	r3, [r3, #0]
   b6c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6c34:	9301      	str	r3, [sp, #4]
   b6c36:	bd08      	pop	{r3, pc}
   b6c38:	00030230 	.word	0x00030230

000b6c3c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6c3c:	b508      	push	{r3, lr}
   b6c3e:	4b02      	ldr	r3, [pc, #8]	; (b6c48 <hal_spi_acquire+0xc>)
   b6c40:	681b      	ldr	r3, [r3, #0]
   b6c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c44:	9301      	str	r3, [sp, #4]
   b6c46:	bd08      	pop	{r3, pc}
   b6c48:	00030230 	.word	0x00030230

000b6c4c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6c4c:	b508      	push	{r3, lr}
   b6c4e:	4b02      	ldr	r3, [pc, #8]	; (b6c58 <hal_spi_release+0xc>)
   b6c50:	681b      	ldr	r3, [r3, #0]
   b6c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c54:	9301      	str	r3, [sp, #4]
   b6c56:	bd08      	pop	{r3, pc}
   b6c58:	00030230 	.word	0x00030230

000b6c5c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6c5c:	b508      	push	{r3, lr}
   b6c5e:	4b02      	ldr	r3, [pc, #8]	; (b6c68 <HAL_USB_USART_Init+0xc>)
   b6c60:	681b      	ldr	r3, [r3, #0]
   b6c62:	681b      	ldr	r3, [r3, #0]
   b6c64:	9301      	str	r3, [sp, #4]
   b6c66:	bd08      	pop	{r3, pc}
   b6c68:	0003024c 	.word	0x0003024c

000b6c6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6c6c:	b508      	push	{r3, lr}
   b6c6e:	4b02      	ldr	r3, [pc, #8]	; (b6c78 <HAL_USB_USART_Available_Data+0xc>)
   b6c70:	681b      	ldr	r3, [r3, #0]
   b6c72:	691b      	ldr	r3, [r3, #16]
   b6c74:	9301      	str	r3, [sp, #4]
   b6c76:	bd08      	pop	{r3, pc}
   b6c78:	0003024c 	.word	0x0003024c

000b6c7c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6c7c:	b508      	push	{r3, lr}
   b6c7e:	4b02      	ldr	r3, [pc, #8]	; (b6c88 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6c80:	681b      	ldr	r3, [r3, #0]
   b6c82:	695b      	ldr	r3, [r3, #20]
   b6c84:	9301      	str	r3, [sp, #4]
   b6c86:	bd08      	pop	{r3, pc}
   b6c88:	0003024c 	.word	0x0003024c

000b6c8c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6c8c:	b508      	push	{r3, lr}
   b6c8e:	4b02      	ldr	r3, [pc, #8]	; (b6c98 <HAL_USB_USART_Receive_Data+0xc>)
   b6c90:	681b      	ldr	r3, [r3, #0]
   b6c92:	699b      	ldr	r3, [r3, #24]
   b6c94:	9301      	str	r3, [sp, #4]
   b6c96:	bd08      	pop	{r3, pc}
   b6c98:	0003024c 	.word	0x0003024c

000b6c9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6c9c:	b508      	push	{r3, lr}
   b6c9e:	4b02      	ldr	r3, [pc, #8]	; (b6ca8 <HAL_USB_USART_Send_Data+0xc>)
   b6ca0:	681b      	ldr	r3, [r3, #0]
   b6ca2:	69db      	ldr	r3, [r3, #28]
   b6ca4:	9301      	str	r3, [sp, #4]
   b6ca6:	bd08      	pop	{r3, pc}
   b6ca8:	0003024c 	.word	0x0003024c

000b6cac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6cac:	b508      	push	{r3, lr}
   b6cae:	4b02      	ldr	r3, [pc, #8]	; (b6cb8 <HAL_USB_USART_Flush_Data+0xc>)
   b6cb0:	681b      	ldr	r3, [r3, #0]
   b6cb2:	6a1b      	ldr	r3, [r3, #32]
   b6cb4:	9301      	str	r3, [sp, #4]
   b6cb6:	bd08      	pop	{r3, pc}
   b6cb8:	0003024c 	.word	0x0003024c

000b6cbc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6cbc:	b508      	push	{r3, lr}
   b6cbe:	4b02      	ldr	r3, [pc, #8]	; (b6cc8 <panic_+0xc>)
   b6cc0:	681b      	ldr	r3, [r3, #0]
   b6cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6cc4:	9301      	str	r3, [sp, #4]
   b6cc6:	bd08      	pop	{r3, pc}
   b6cc8:	00030260 	.word	0x00030260

000b6ccc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6ccc:	b508      	push	{r3, lr}
   b6cce:	4b02      	ldr	r3, [pc, #8]	; (b6cd8 <log_message+0xc>)
   b6cd0:	681b      	ldr	r3, [r3, #0]
   b6cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6cd4:	9301      	str	r3, [sp, #4]
   b6cd6:	bd08      	pop	{r3, pc}
   b6cd8:	00030260 	.word	0x00030260

000b6cdc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6cdc:	b508      	push	{r3, lr}
   b6cde:	4b02      	ldr	r3, [pc, #8]	; (b6ce8 <set_system_mode+0xc>)
   b6ce0:	681b      	ldr	r3, [r3, #0]
   b6ce2:	685b      	ldr	r3, [r3, #4]
   b6ce4:	9301      	str	r3, [sp, #4]
   b6ce6:	bd08      	pop	{r3, pc}
   b6ce8:	00030220 	.word	0x00030220

000b6cec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6cec:	b508      	push	{r3, lr}
   b6cee:	4b02      	ldr	r3, [pc, #8]	; (b6cf8 <system_delay_ms+0xc>)
   b6cf0:	681b      	ldr	r3, [r3, #0]
   b6cf2:	695b      	ldr	r3, [r3, #20]
   b6cf4:	9301      	str	r3, [sp, #4]
   b6cf6:	bd08      	pop	{r3, pc}
   b6cf8:	00030220 	.word	0x00030220

000b6cfc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6cfc:	b508      	push	{r3, lr}
   b6cfe:	4b02      	ldr	r3, [pc, #8]	; (b6d08 <system_thread_set_state+0xc>)
   b6d00:	681b      	ldr	r3, [r3, #0]
   b6d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d04:	9301      	str	r3, [sp, #4]
   b6d06:	bd08      	pop	{r3, pc}
   b6d08:	00030220 	.word	0x00030220

000b6d0c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6d0c:	b508      	push	{r3, lr}
   b6d0e:	4b03      	ldr	r3, [pc, #12]	; (b6d1c <system_ctrl_set_app_request_handler+0x10>)
   b6d10:	681b      	ldr	r3, [r3, #0]
   b6d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6d16:	9301      	str	r3, [sp, #4]
   b6d18:	bd08      	pop	{r3, pc}
   b6d1a:	0000      	.short	0x0000
   b6d1c:	00030220 	.word	0x00030220

000b6d20 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6d20:	b508      	push	{r3, lr}
   b6d22:	4b03      	ldr	r3, [pc, #12]	; (b6d30 <system_ctrl_set_result+0x10>)
   b6d24:	681b      	ldr	r3, [r3, #0]
   b6d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6d2a:	9301      	str	r3, [sp, #4]
   b6d2c:	bd08      	pop	{r3, pc}
   b6d2e:	0000      	.short	0x0000
   b6d30:	00030220 	.word	0x00030220

000b6d34 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d34:	b508      	push	{r3, lr}
   b6d36:	4b02      	ldr	r3, [pc, #8]	; (b6d40 <network_connect+0xc>)
   b6d38:	681b      	ldr	r3, [r3, #0]
   b6d3a:	685b      	ldr	r3, [r3, #4]
   b6d3c:	9301      	str	r3, [sp, #4]
   b6d3e:	bd08      	pop	{r3, pc}
   b6d40:	00030240 	.word	0x00030240

000b6d44 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6d44:	b508      	push	{r3, lr}
   b6d46:	4b02      	ldr	r3, [pc, #8]	; (b6d50 <network_connecting+0xc>)
   b6d48:	681b      	ldr	r3, [r3, #0]
   b6d4a:	689b      	ldr	r3, [r3, #8]
   b6d4c:	9301      	str	r3, [sp, #4]
   b6d4e:	bd08      	pop	{r3, pc}
   b6d50:	00030240 	.word	0x00030240

000b6d54 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6d54:	b508      	push	{r3, lr}
   b6d56:	4b02      	ldr	r3, [pc, #8]	; (b6d60 <network_disconnect+0xc>)
   b6d58:	681b      	ldr	r3, [r3, #0]
   b6d5a:	68db      	ldr	r3, [r3, #12]
   b6d5c:	9301      	str	r3, [sp, #4]
   b6d5e:	bd08      	pop	{r3, pc}
   b6d60:	00030240 	.word	0x00030240

000b6d64 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6d64:	b508      	push	{r3, lr}
   b6d66:	4b02      	ldr	r3, [pc, #8]	; (b6d70 <network_ready+0xc>)
   b6d68:	681b      	ldr	r3, [r3, #0]
   b6d6a:	691b      	ldr	r3, [r3, #16]
   b6d6c:	9301      	str	r3, [sp, #4]
   b6d6e:	bd08      	pop	{r3, pc}
   b6d70:	00030240 	.word	0x00030240

000b6d74 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d74:	b508      	push	{r3, lr}
   b6d76:	4b02      	ldr	r3, [pc, #8]	; (b6d80 <network_on+0xc>)
   b6d78:	681b      	ldr	r3, [r3, #0]
   b6d7a:	695b      	ldr	r3, [r3, #20]
   b6d7c:	9301      	str	r3, [sp, #4]
   b6d7e:	bd08      	pop	{r3, pc}
   b6d80:	00030240 	.word	0x00030240

000b6d84 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d84:	b508      	push	{r3, lr}
   b6d86:	4b02      	ldr	r3, [pc, #8]	; (b6d90 <network_off+0xc>)
   b6d88:	681b      	ldr	r3, [r3, #0]
   b6d8a:	699b      	ldr	r3, [r3, #24]
   b6d8c:	9301      	str	r3, [sp, #4]
   b6d8e:	bd08      	pop	{r3, pc}
   b6d90:	00030240 	.word	0x00030240

000b6d94 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6d94:	b508      	push	{r3, lr}
   b6d96:	4b02      	ldr	r3, [pc, #8]	; (b6da0 <network_listen+0xc>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	69db      	ldr	r3, [r3, #28]
   b6d9c:	9301      	str	r3, [sp, #4]
   b6d9e:	bd08      	pop	{r3, pc}
   b6da0:	00030240 	.word	0x00030240

000b6da4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6da4:	b508      	push	{r3, lr}
   b6da6:	4b02      	ldr	r3, [pc, #8]	; (b6db0 <network_listening+0xc>)
   b6da8:	681b      	ldr	r3, [r3, #0]
   b6daa:	6a1b      	ldr	r3, [r3, #32]
   b6dac:	9301      	str	r3, [sp, #4]
   b6dae:	bd08      	pop	{r3, pc}
   b6db0:	00030240 	.word	0x00030240

000b6db4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6db4:	b508      	push	{r3, lr}
   b6db6:	4b02      	ldr	r3, [pc, #8]	; (b6dc0 <network_set_listen_timeout+0xc>)
   b6db8:	681b      	ldr	r3, [r3, #0]
   b6dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6dbc:	9301      	str	r3, [sp, #4]
   b6dbe:	bd08      	pop	{r3, pc}
   b6dc0:	00030240 	.word	0x00030240

000b6dc4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6dc4:	b508      	push	{r3, lr}
   b6dc6:	4b02      	ldr	r3, [pc, #8]	; (b6dd0 <network_get_listen_timeout+0xc>)
   b6dc8:	681b      	ldr	r3, [r3, #0]
   b6dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6dcc:	9301      	str	r3, [sp, #4]
   b6dce:	bd08      	pop	{r3, pc}
   b6dd0:	00030240 	.word	0x00030240

000b6dd4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6dd4:	b508      	push	{r3, lr}
   b6dd6:	4b02      	ldr	r3, [pc, #8]	; (b6de0 <network_is_on+0xc>)
   b6dd8:	681b      	ldr	r3, [r3, #0]
   b6dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ddc:	9301      	str	r3, [sp, #4]
   b6dde:	bd08      	pop	{r3, pc}
   b6de0:	00030240 	.word	0x00030240

000b6de4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6de4:	b508      	push	{r3, lr}
   b6de6:	4b02      	ldr	r3, [pc, #8]	; (b6df0 <network_is_off+0xc>)
   b6de8:	681b      	ldr	r3, [r3, #0]
   b6dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6dec:	9301      	str	r3, [sp, #4]
   b6dee:	bd08      	pop	{r3, pc}
   b6df0:	00030240 	.word	0x00030240

000b6df4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6df4:	b508      	push	{r3, lr}
   b6df6:	4b02      	ldr	r3, [pc, #8]	; (b6e00 <spark_process+0xc>)
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	689b      	ldr	r3, [r3, #8]
   b6dfc:	9301      	str	r3, [sp, #4]
   b6dfe:	bd08      	pop	{r3, pc}
   b6e00:	00030244 	.word	0x00030244

000b6e04 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6e04:	b508      	push	{r3, lr}
   b6e06:	4b02      	ldr	r3, [pc, #8]	; (b6e10 <spark_deviceID+0xc>)
   b6e08:	681b      	ldr	r3, [r3, #0]
   b6e0a:	69db      	ldr	r3, [r3, #28]
   b6e0c:	9301      	str	r3, [sp, #4]
   b6e0e:	bd08      	pop	{r3, pc}
   b6e10:	00030244 	.word	0x00030244

000b6e14 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6e14:	b508      	push	{r3, lr}
   b6e16:	4b02      	ldr	r3, [pc, #8]	; (b6e20 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6e18:	681b      	ldr	r3, [r3, #0]
   b6e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e1c:	9301      	str	r3, [sp, #4]
   b6e1e:	bd08      	pop	{r3, pc}
   b6e20:	00030244 	.word	0x00030244

000b6e24 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6e24:	b508      	push	{r3, lr}
   b6e26:	4b02      	ldr	r3, [pc, #8]	; (b6e30 <malloc+0xc>)
   b6e28:	681b      	ldr	r3, [r3, #0]
   b6e2a:	681b      	ldr	r3, [r3, #0]
   b6e2c:	9301      	str	r3, [sp, #4]
   b6e2e:	bd08      	pop	{r3, pc}
   b6e30:	0003021c 	.word	0x0003021c

000b6e34 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6e34:	b508      	push	{r3, lr}
   b6e36:	4b02      	ldr	r3, [pc, #8]	; (b6e40 <free+0xc>)
   b6e38:	681b      	ldr	r3, [r3, #0]
   b6e3a:	685b      	ldr	r3, [r3, #4]
   b6e3c:	9301      	str	r3, [sp, #4]
   b6e3e:	bd08      	pop	{r3, pc}
   b6e40:	0003021c 	.word	0x0003021c

000b6e44 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6e44:	b508      	push	{r3, lr}
   b6e46:	4b02      	ldr	r3, [pc, #8]	; (b6e50 <realloc+0xc>)
   b6e48:	681b      	ldr	r3, [r3, #0]
   b6e4a:	689b      	ldr	r3, [r3, #8]
   b6e4c:	9301      	str	r3, [sp, #4]
   b6e4e:	bd08      	pop	{r3, pc}
   b6e50:	0003021c 	.word	0x0003021c

000b6e54 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6e54:	b508      	push	{r3, lr}
   b6e56:	4b02      	ldr	r3, [pc, #8]	; (b6e60 <snprintf+0xc>)
   b6e58:	681b      	ldr	r3, [r3, #0]
   b6e5a:	69db      	ldr	r3, [r3, #28]
   b6e5c:	9301      	str	r3, [sp, #4]
   b6e5e:	bd08      	pop	{r3, pc}
   b6e60:	0003021c 	.word	0x0003021c

000b6e64 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6e64:	b508      	push	{r3, lr}
   b6e66:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <vsnprintf+0xc>)
   b6e68:	681b      	ldr	r3, [r3, #0]
   b6e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e6c:	9301      	str	r3, [sp, #4]
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	0003021c 	.word	0x0003021c

000b6e74 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6e74:	b508      	push	{r3, lr}
   b6e76:	4b02      	ldr	r3, [pc, #8]	; (b6e80 <__errno+0xc>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e7c:	9301      	str	r3, [sp, #4]
   b6e7e:	bd08      	pop	{r3, pc}
   b6e80:	0003021c 	.word	0x0003021c

000b6e84 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6e84:	b508      	push	{r3, lr}
   b6e86:	4b02      	ldr	r3, [pc, #8]	; (b6e90 <__assert_func+0xc>)
   b6e88:	681b      	ldr	r3, [r3, #0]
   b6e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e8c:	9301      	str	r3, [sp, #4]
   b6e8e:	bd08      	pop	{r3, pc}
   b6e90:	0003021c 	.word	0x0003021c

000b6e94 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b02      	ldr	r3, [pc, #8]	; (b6ea0 <newlib_impure_ptr_callback+0xc>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e9c:	9301      	str	r3, [sp, #4]
   b6e9e:	bd08      	pop	{r3, pc}
   b6ea0:	0003021c 	.word	0x0003021c

000b6ea4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6ea4:	2200      	movs	r2, #0
   b6ea6:	6840      	ldr	r0, [r0, #4]
   b6ea8:	4611      	mov	r1, r2
   b6eaa:	f7ff bf7b 	b.w	b6da4 <network_listening>

000b6eae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6eae:	2200      	movs	r2, #0
   b6eb0:	6840      	ldr	r0, [r0, #4]
   b6eb2:	4611      	mov	r1, r2
   b6eb4:	f7ff bf86 	b.w	b6dc4 <network_get_listen_timeout>

000b6eb8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6eb8:	6840      	ldr	r0, [r0, #4]
   b6eba:	2200      	movs	r2, #0
   b6ebc:	f7ff bf7a 	b.w	b6db4 <network_set_listen_timeout>

000b6ec0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6ec0:	6840      	ldr	r0, [r0, #4]
   b6ec2:	2200      	movs	r2, #0
   b6ec4:	f081 0101 	eor.w	r1, r1, #1
   b6ec8:	f7ff bf64 	b.w	b6d94 <network_listen>

000b6ecc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ecc:	2300      	movs	r3, #0
   b6ece:	6840      	ldr	r0, [r0, #4]
   b6ed0:	461a      	mov	r2, r3
   b6ed2:	4619      	mov	r1, r3
   b6ed4:	f7ff bf56 	b.w	b6d84 <network_off>

000b6ed8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ed8:	2300      	movs	r3, #0
   b6eda:	6840      	ldr	r0, [r0, #4]
   b6edc:	461a      	mov	r2, r3
   b6ede:	4619      	mov	r1, r3
   b6ee0:	f7ff bf48 	b.w	b6d74 <network_on>

000b6ee4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6ee4:	2200      	movs	r2, #0
   b6ee6:	6840      	ldr	r0, [r0, #4]
   b6ee8:	4611      	mov	r1, r2
   b6eea:	f7ff bf3b 	b.w	b6d64 <network_ready>

000b6eee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6eee:	2200      	movs	r2, #0
   b6ef0:	6840      	ldr	r0, [r0, #4]
   b6ef2:	4611      	mov	r1, r2
   b6ef4:	f7ff bf26 	b.w	b6d44 <network_connecting>

000b6ef8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ef8:	6840      	ldr	r0, [r0, #4]
   b6efa:	2200      	movs	r2, #0
   b6efc:	2102      	movs	r1, #2
   b6efe:	f7ff bf29 	b.w	b6d54 <network_disconnect>

000b6f02 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6f02:	2300      	movs	r3, #0
   b6f04:	6840      	ldr	r0, [r0, #4]
   b6f06:	461a      	mov	r2, r3
   b6f08:	f7ff bf14 	b.w	b6d34 <network_connect>

000b6f0c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6f0c:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6f0e:	2203      	movs	r2, #3
   b6f10:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6f12:	4a02      	ldr	r2, [pc, #8]	; (b6f1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6f14:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6f16:	4770      	bx	lr
   b6f18:	2003e6c4 	.word	0x2003e6c4
   b6f1c:	000b9858 	.word	0x000b9858

000b6f20 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6f20:	2100      	movs	r1, #0
   b6f22:	f7ff be93 	b.w	b6c4c <hal_spi_release>

000b6f26 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6f26:	2100      	movs	r1, #0
   b6f28:	f7ff be88 	b.w	b6c3c <hal_spi_acquire>

000b6f2c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6f2c:	b510      	push	{r4, lr}
   b6f2e:	4604      	mov	r4, r0
   b6f30:	4608      	mov	r0, r1
{
    _spi = spi;
   b6f32:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6f34:	f7ff fe62 	bl	b6bfc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6f38:	2300      	movs	r3, #0
   b6f3a:	6063      	str	r3, [r4, #4]
}
   b6f3c:	4620      	mov	r0, r4
   b6f3e:	bd10      	pop	{r4, pc}

000b6f40 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6f40:	b513      	push	{r0, r1, r4, lr}
   b6f42:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6f44:	7800      	ldrb	r0, [r0, #0]
   b6f46:	f7ff ffee 	bl	b6f26 <_ZN8SPIClass4lockEv.isra.0>
   b6f4a:	b958      	cbnz	r0, b6f64 <_ZN8SPIClass5beginEv+0x24>
   b6f4c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6f4e:	9001      	str	r0, [sp, #4]
   b6f50:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6f54:	f7ff fe42 	bl	b6bdc <hal_spi_begin>
        unlock();
   b6f58:	9801      	ldr	r0, [sp, #4]
    }
}
   b6f5a:	b002      	add	sp, #8
   b6f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f60:	f7ff bfde 	b.w	b6f20 <_ZN8SPIClass6unlockEv.isra.0>
   b6f64:	b002      	add	sp, #8
   b6f66:	bd10      	pop	{r4, pc}

000b6f68 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6f68:	7800      	ldrb	r0, [r0, #0]
   b6f6a:	f7ff bfd9 	b.w	b6f20 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6f70 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6f70:	0840      	lsrs	r0, r0, #1
{
   b6f72:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6f74:	6018      	str	r0, [r3, #0]
   b6f76:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6f78:	6818      	ldr	r0, [r3, #0]
   b6f7a:	4288      	cmp	r0, r1
   b6f7c:	b2e5      	uxtb	r5, r4
   b6f7e:	d906      	bls.n	b6f8e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6f80:	3401      	adds	r4, #1
   b6f82:	2c08      	cmp	r4, #8
   b6f84:	d002      	beq.n	b6f8c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6f86:	0840      	lsrs	r0, r0, #1
   b6f88:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6f8a:	e7f5      	b.n	b6f78 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6f8c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6f90:	5d5b      	ldrb	r3, [r3, r5]
   b6f92:	7013      	strb	r3, [r2, #0]
}
   b6f94:	bd30      	pop	{r4, r5, pc}
   b6f96:	bf00      	nop
   b6f98:	000b988c 	.word	0x000b988c

000b6f9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6fa0:	4606      	mov	r6, r0
   b6fa2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6fa4:	7800      	ldrb	r0, [r0, #0]
{
   b6fa6:	460c      	mov	r4, r1
    CHECK(lock());
   b6fa8:	f7ff ffbd 	bl	b6f26 <_ZN8SPIClass4lockEv.isra.0>
   b6fac:	2800      	cmp	r0, #0
   b6fae:	db1b      	blt.n	b6fe8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6fb0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6fb2:	2214      	movs	r2, #20
   b6fb4:	2100      	movs	r1, #0
   b6fb6:	a809      	add	r0, sp, #36	; 0x24
   b6fb8:	f001 faa6 	bl	b8508 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6fbc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6fbe:	2200      	movs	r2, #0
   b6fc0:	a909      	add	r1, sp, #36	; 0x24
   b6fc2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6fc4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6fc8:	f7ff fe28 	bl	b6c1c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6fcc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6fd0:	b113      	cbz	r3, b6fd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6fd2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6fd6:	b155      	cbz	r5, b6fee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6fd8:	2700      	movs	r7, #0
   b6fda:	46b9      	mov	r9, r7
   b6fdc:	46b8      	mov	r8, r7
   b6fde:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6fe0:	7923      	ldrb	r3, [r4, #4]
   b6fe2:	b15d      	cbz	r5, b6ffc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6fe4:	b1c3      	cbz	r3, b7018 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6fe6:	2000      	movs	r0, #0
}
   b6fe8:	b00f      	add	sp, #60	; 0x3c
   b6fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6fee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6ff2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6ff6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6ffa:	e7f1      	b.n	b6fe0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6ffc:	2b00      	cmp	r3, #0
   b6ffe:	d135      	bne.n	b706c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7000:	68a3      	ldr	r3, [r4, #8]
   b7002:	4543      	cmp	r3, r8
   b7004:	d108      	bne.n	b7018 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7006:	f88d 9020 	strb.w	r9, [sp, #32]
   b700a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b700e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7012:	89a3      	ldrh	r3, [r4, #12]
   b7014:	429a      	cmp	r2, r3
   b7016:	d0e6      	beq.n	b6fe6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7018:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b701a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b701c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7020:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7022:	ab04      	add	r3, sp, #16
   b7024:	f10d 020f 	add.w	r2, sp, #15
   b7028:	f7ff ffa2 	bl	b6f70 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b702c:	7921      	ldrb	r1, [r4, #4]
   b702e:	b985      	cbnz	r5, b7052 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7030:	b989      	cbnz	r1, b7056 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7032:	68a3      	ldr	r3, [r4, #8]
   b7034:	4543      	cmp	r3, r8
   b7036:	d30e      	bcc.n	b7056 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7038:	f88d 9020 	strb.w	r9, [sp, #32]
   b703c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7040:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7044:	89a3      	ldrh	r3, [r4, #12]
   b7046:	429a      	cmp	r2, r3
   b7048:	d105      	bne.n	b7056 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b704a:	9b04      	ldr	r3, [sp, #16]
   b704c:	4543      	cmp	r3, r8
   b704e:	d102      	bne.n	b7056 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7050:	e7c9      	b.n	b6fe6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7052:	2900      	cmp	r1, #0
   b7054:	d1f9      	bne.n	b704a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7056:	2300      	movs	r3, #0
   b7058:	9301      	str	r3, [sp, #4]
   b705a:	7b63      	ldrb	r3, [r4, #13]
   b705c:	9300      	str	r3, [sp, #0]
   b705e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7062:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7064:	7830      	ldrb	r0, [r6, #0]
   b7066:	f7ff fde1 	bl	b6c2c <hal_spi_set_settings>
   b706a:	e7bc      	b.n	b6fe6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b706c:	e9cd 5500 	strd	r5, r5, [sp]
   b7070:	462b      	mov	r3, r5
   b7072:	462a      	mov	r2, r5
   b7074:	2101      	movs	r1, #1
   b7076:	e7f5      	b.n	b7064 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7078 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7078:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b707a:	7800      	ldrb	r0, [r0, #0]
   b707c:	f7ff fdb6 	bl	b6bec <hal_spi_transfer>
}
   b7080:	b2c0      	uxtb	r0, r0
   b7082:	bd08      	pop	{r3, pc}

000b7084 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7084:	4b05      	ldr	r3, [pc, #20]	; (b709c <_GLOBAL__sub_I_System+0x18>)
   b7086:	2202      	movs	r2, #2
   b7088:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b708a:	4b05      	ldr	r3, [pc, #20]	; (b70a0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b708c:	4a05      	ldr	r2, [pc, #20]	; (b70a4 <_GLOBAL__sub_I_System+0x20>)
   b708e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7090:	2000      	movs	r0, #0
   b7092:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7096:	f7ff be21 	b.w	b6cdc <set_system_mode>
   b709a:	bf00      	nop
   b709c:	2003e6d8 	.word	0x2003e6d8
   b70a0:	2003e6cc 	.word	0x2003e6cc
   b70a4:	ffff0000 	.word	0xffff0000

000b70a8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b70a8:	b510      	push	{r4, lr}
   b70aa:	4604      	mov	r4, r0
{
	free(buffer);
   b70ac:	6800      	ldr	r0, [r0, #0]
   b70ae:	f7ff fec1 	bl	b6e34 <free>
}
   b70b2:	4620      	mov	r0, r4
   b70b4:	bd10      	pop	{r4, pc}

000b70b6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b70b6:	b510      	push	{r4, lr}
   b70b8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b70ba:	6800      	ldr	r0, [r0, #0]
   b70bc:	b108      	cbz	r0, b70c2 <_ZN6String10invalidateEv+0xc>
   b70be:	f7ff feb9 	bl	b6e34 <free>
	buffer = NULL;
   b70c2:	2300      	movs	r3, #0
	capacity = len = 0;
   b70c4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b70c8:	6023      	str	r3, [r4, #0]
}
   b70ca:	bd10      	pop	{r4, pc}

000b70cc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b70cc:	b538      	push	{r3, r4, r5, lr}
   b70ce:	4604      	mov	r4, r0
   b70d0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b70d2:	6800      	ldr	r0, [r0, #0]
   b70d4:	3101      	adds	r1, #1
   b70d6:	f7ff feb5 	bl	b6e44 <realloc>
	if (newbuffer) {
   b70da:	b110      	cbz	r0, b70e2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b70dc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b70e0:	2001      	movs	r0, #1
	}
	return 0;
}
   b70e2:	bd38      	pop	{r3, r4, r5, pc}

000b70e4 <_ZN6String7reserveEj>:
{
   b70e4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b70e6:	6803      	ldr	r3, [r0, #0]
{
   b70e8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b70ea:	b123      	cbz	r3, b70f6 <_ZN6String7reserveEj+0x12>
   b70ec:	6843      	ldr	r3, [r0, #4]
   b70ee:	428b      	cmp	r3, r1
   b70f0:	d301      	bcc.n	b70f6 <_ZN6String7reserveEj+0x12>
   b70f2:	2001      	movs	r0, #1
}
   b70f4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b70f6:	4620      	mov	r0, r4
   b70f8:	f7ff ffe8 	bl	b70cc <_ZN6String12changeBufferEj>
   b70fc:	2800      	cmp	r0, #0
   b70fe:	d0f9      	beq.n	b70f4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7100:	68a3      	ldr	r3, [r4, #8]
   b7102:	2b00      	cmp	r3, #0
   b7104:	d1f5      	bne.n	b70f2 <_ZN6String7reserveEj+0xe>
   b7106:	6822      	ldr	r2, [r4, #0]
   b7108:	7013      	strb	r3, [r2, #0]
   b710a:	e7f2      	b.n	b70f2 <_ZN6String7reserveEj+0xe>

000b710c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b710c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b710e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7110:	4611      	mov	r1, r2
   b7112:	9201      	str	r2, [sp, #4]
{
   b7114:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7116:	f7ff ffe5 	bl	b70e4 <_ZN6String7reserveEj>
   b711a:	9a01      	ldr	r2, [sp, #4]
   b711c:	b928      	cbnz	r0, b712a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b711e:	4620      	mov	r0, r4
   b7120:	f7ff ffc9 	bl	b70b6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7124:	4620      	mov	r0, r4
   b7126:	b003      	add	sp, #12
   b7128:	bd30      	pop	{r4, r5, pc}
	len = length;
   b712a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b712c:	4629      	mov	r1, r5
   b712e:	6820      	ldr	r0, [r4, #0]
   b7130:	f001 f9dc 	bl	b84ec <memcpy>
	buffer[len] = 0;
   b7134:	6822      	ldr	r2, [r4, #0]
   b7136:	68a3      	ldr	r3, [r4, #8]
   b7138:	2100      	movs	r1, #0
   b713a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b713c:	e7f2      	b.n	b7124 <_ZN6String4copyEPKcj+0x18>

000b713e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b713e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7140:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7142:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7146:	4604      	mov	r4, r0
	len = 0;
   b7148:	6083      	str	r3, [r0, #8]
	flags = 0;
   b714a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b714c:	b141      	cbz	r1, b7160 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b714e:	4608      	mov	r0, r1
   b7150:	9101      	str	r1, [sp, #4]
   b7152:	f001 fa19 	bl	b8588 <strlen>
   b7156:	9901      	ldr	r1, [sp, #4]
   b7158:	4602      	mov	r2, r0
   b715a:	4620      	mov	r0, r4
   b715c:	f7ff ffd6 	bl	b710c <_ZN6String4copyEPKcj>
}
   b7160:	4620      	mov	r0, r4
   b7162:	b002      	add	sp, #8
   b7164:	bd10      	pop	{r4, pc}

000b7166 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7166:	b513      	push	{r0, r1, r4, lr}
   b7168:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b716a:	b159      	cbz	r1, b7184 <_ZN6StringaSEPKc+0x1e>
   b716c:	4608      	mov	r0, r1
   b716e:	9101      	str	r1, [sp, #4]
   b7170:	f001 fa0a 	bl	b8588 <strlen>
   b7174:	9901      	ldr	r1, [sp, #4]
   b7176:	4602      	mov	r2, r0
   b7178:	4620      	mov	r0, r4
   b717a:	f7ff ffc7 	bl	b710c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b717e:	4620      	mov	r0, r4
   b7180:	b002      	add	sp, #8
   b7182:	bd10      	pop	{r4, pc}
	else invalidate();
   b7184:	f7ff ff97 	bl	b70b6 <_ZN6String10invalidateEv>
   b7188:	e7f9      	b.n	b717e <_ZN6StringaSEPKc+0x18>

000b718a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b718a:	6802      	ldr	r2, [r0, #0]
{
   b718c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b718e:	6809      	ldr	r1, [r1, #0]
   b7190:	b162      	cbz	r2, b71ac <_ZNK6String9compareToERKS_+0x22>
   b7192:	b941      	cbnz	r1, b71a6 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b7194:	6880      	ldr	r0, [r0, #8]
   b7196:	b160      	cbz	r0, b71b2 <_ZNK6String9compareToERKS_+0x28>
   b7198:	7810      	ldrb	r0, [r2, #0]
   b719a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b719c:	6898      	ldr	r0, [r3, #8]
   b719e:	b140      	cbz	r0, b71b2 <_ZNK6String9compareToERKS_+0x28>
   b71a0:	7809      	ldrb	r1, [r1, #0]
   b71a2:	4248      	negs	r0, r1
   b71a4:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b71a6:	4610      	mov	r0, r2
   b71a8:	f001 b9e4 	b.w	b8574 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b71ac:	2900      	cmp	r1, #0
   b71ae:	d1f5      	bne.n	b719c <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b71b0:	4608      	mov	r0, r1
}
   b71b2:	4770      	bx	lr

000b71b4 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b71b4:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b71b6:	6882      	ldr	r2, [r0, #8]
   b71b8:	688b      	ldr	r3, [r1, #8]
   b71ba:	429a      	cmp	r2, r3
   b71bc:	d105      	bne.n	b71ca <_ZNK6String6equalsERKS_+0x16>
   b71be:	f7ff ffe4 	bl	b718a <_ZNK6String9compareToERKS_>
   b71c2:	fab0 f080 	clz	r0, r0
   b71c6:	0940      	lsrs	r0, r0, #5
}
   b71c8:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b71ca:	2000      	movs	r0, #0
   b71cc:	e7fc      	b.n	b71c8 <_ZNK6String6equalsERKS_+0x14>

000b71ce <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   b71ce:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b71d0:	6882      	ldr	r2, [r0, #8]
   b71d2:	b93a      	cbnz	r2, b71e4 <_ZNK6String6equalsEPKc+0x16>
   b71d4:	b121      	cbz	r1, b71e0 <_ZNK6String6equalsEPKc+0x12>
   b71d6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b71d8:	fab0 f080 	clz	r0, r0
   b71dc:	0940      	lsrs	r0, r0, #5
   b71de:	e000      	b.n	b71e2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b71e0:	2001      	movs	r0, #1
}
   b71e2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b71e4:	6800      	ldr	r0, [r0, #0]
   b71e6:	b909      	cbnz	r1, b71ec <_ZNK6String6equalsEPKc+0x1e>
   b71e8:	7800      	ldrb	r0, [r0, #0]
   b71ea:	e7f5      	b.n	b71d8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b71ec:	f001 f9c2 	bl	b8574 <strcmp>
   b71f0:	e7f2      	b.n	b71d8 <_ZNK6String6equalsEPKc+0xa>

000b71f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b71f2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b71f4:	6843      	ldr	r3, [r0, #4]
   b71f6:	3b01      	subs	r3, #1
    {
   b71f8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b71fa:	6043      	str	r3, [r0, #4]
   b71fc:	b963      	cbnz	r3, b7218 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b71fe:	6803      	ldr	r3, [r0, #0]
   b7200:	689b      	ldr	r3, [r3, #8]
   b7202:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7204:	68a3      	ldr	r3, [r4, #8]
   b7206:	3b01      	subs	r3, #1
   b7208:	60a3      	str	r3, [r4, #8]
   b720a:	b92b      	cbnz	r3, b7218 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b720c:	6823      	ldr	r3, [r4, #0]
   b720e:	4620      	mov	r0, r4
   b7210:	68db      	ldr	r3, [r3, #12]
        }
    }
   b7212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7216:	4718      	bx	r3
    }
   b7218:	bd10      	pop	{r4, pc}
	...

000b721c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b721c:	4802      	ldr	r0, [pc, #8]	; (b7228 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b721e:	2300      	movs	r3, #0
   b7220:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7222:	f7ff bbf3 	b.w	b6a0c <os_mutex_recursive_create>
   b7226:	bf00      	nop
   b7228:	2003e6dc 	.word	0x2003e6dc

000b722c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b722e:	4606      	mov	r6, r0
   b7230:	460d      	mov	r5, r1
  size_t n = 0;
   b7232:	188f      	adds	r7, r1, r2
   b7234:	2400      	movs	r4, #0
  while (size--) {
   b7236:	42bd      	cmp	r5, r7
   b7238:	d00c      	beq.n	b7254 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b723a:	6833      	ldr	r3, [r6, #0]
   b723c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7240:	689b      	ldr	r3, [r3, #8]
   b7242:	4630      	mov	r0, r6
   b7244:	4798      	blx	r3
     if (chunk>=0)
   b7246:	1e03      	subs	r3, r0, #0
   b7248:	db01      	blt.n	b724e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b724a:	441c      	add	r4, r3
  while (size--) {
   b724c:	e7f3      	b.n	b7236 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b724e:	2c00      	cmp	r4, #0
   b7250:	bf08      	it	eq
   b7252:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7254:	4620      	mov	r0, r4
   b7256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7258 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7258:	b513      	push	{r0, r1, r4, lr}
   b725a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b725c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b725e:	b159      	cbz	r1, b7278 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7260:	9101      	str	r1, [sp, #4]
   b7262:	f001 f991 	bl	b8588 <strlen>
   b7266:	6823      	ldr	r3, [r4, #0]
   b7268:	9901      	ldr	r1, [sp, #4]
   b726a:	68db      	ldr	r3, [r3, #12]
   b726c:	4602      	mov	r2, r0
   b726e:	4620      	mov	r0, r4
    }
   b7270:	b002      	add	sp, #8
   b7272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7276:	4718      	bx	r3
    }
   b7278:	b002      	add	sp, #8
   b727a:	bd10      	pop	{r4, pc}

000b727c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b727c:	b508      	push	{r3, lr}
  return write(str);
   b727e:	f7ff ffeb 	bl	b7258 <_ZN5Print5writeEPKc>
}
   b7282:	bd08      	pop	{r3, pc}

000b7284 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7284:	6803      	ldr	r3, [r0, #0]
   b7286:	689b      	ldr	r3, [r3, #8]
   b7288:	4718      	bx	r3

000b728a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b728a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b728c:	210d      	movs	r1, #13
{
   b728e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7290:	f7ff fff8 	bl	b7284 <_ZN5Print5printEc>
  n += print('\n');
   b7294:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7296:	4604      	mov	r4, r0
  n += print('\n');
   b7298:	4628      	mov	r0, r5
   b729a:	f7ff fff3 	bl	b7284 <_ZN5Print5printEc>
  return n;
}
   b729e:	4420      	add	r0, r4
   b72a0:	bd38      	pop	{r3, r4, r5, pc}

000b72a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b72a2:	b538      	push	{r3, r4, r5, lr}
   b72a4:	4605      	mov	r5, r0
  return write(str);
   b72a6:	f7ff ffd7 	bl	b7258 <_ZN5Print5writeEPKc>
   b72aa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b72ac:	4628      	mov	r0, r5
   b72ae:	f7ff ffec 	bl	b728a <_ZN5Print7printlnEv>
  return n;
}
   b72b2:	4420      	add	r0, r4
   b72b4:	bd38      	pop	{r3, r4, r5, pc}

000b72b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b72b6:	b530      	push	{r4, r5, lr}
   b72b8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b72ba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b72bc:	2a01      	cmp	r2, #1
  *str = '\0';
   b72be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b72c2:	bf98      	it	ls
   b72c4:	220a      	movls	r2, #10
   b72c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b72c8:	460d      	mov	r5, r1
   b72ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b72ce:	fb01 5312 	mls	r3, r1, r2, r5
   b72d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b72d6:	2b09      	cmp	r3, #9
   b72d8:	bf94      	ite	ls
   b72da:	3330      	addls	r3, #48	; 0x30
   b72dc:	3337      	addhi	r3, #55	; 0x37
   b72de:	b2db      	uxtb	r3, r3
  } while(n);
   b72e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b72e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b72e6:	d9ef      	bls.n	b72c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b72e8:	4621      	mov	r1, r4
   b72ea:	f7ff ffb5 	bl	b7258 <_ZN5Print5writeEPKc>
}
   b72ee:	b00b      	add	sp, #44	; 0x2c
   b72f0:	bd30      	pop	{r4, r5, pc}

000b72f2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b72f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b72f6:	b086      	sub	sp, #24
   b72f8:	af00      	add	r7, sp, #0
   b72fa:	4605      	mov	r5, r0
   b72fc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b72fe:	1d38      	adds	r0, r7, #4
   b7300:	2114      	movs	r1, #20
{
   b7302:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7304:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7306:	f7ff fdad 	bl	b6e64 <vsnprintf>

    if (n<bufsize)
   b730a:	2813      	cmp	r0, #19
   b730c:	d80e      	bhi.n	b732c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b730e:	1d39      	adds	r1, r7, #4
   b7310:	4628      	mov	r0, r5
   b7312:	f7ff ffa1 	bl	b7258 <_ZN5Print5writeEPKc>
   b7316:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7318:	b11e      	cbz	r6, b7322 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b731a:	4628      	mov	r0, r5
   b731c:	f7ff ffb5 	bl	b728a <_ZN5Print7printlnEv>
   b7320:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7322:	4620      	mov	r0, r4
   b7324:	3718      	adds	r7, #24
   b7326:	46bd      	mov	sp, r7
   b7328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b732c:	f100 0308 	add.w	r3, r0, #8
   b7330:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7334:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7336:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b733a:	4622      	mov	r2, r4
   b733c:	1c41      	adds	r1, r0, #1
   b733e:	683b      	ldr	r3, [r7, #0]
   b7340:	4668      	mov	r0, sp
   b7342:	f7ff fd8f 	bl	b6e64 <vsnprintf>
  return write(str);
   b7346:	4669      	mov	r1, sp
   b7348:	4628      	mov	r0, r5
   b734a:	f7ff ff85 	bl	b7258 <_ZN5Print5writeEPKc>
   b734e:	4604      	mov	r4, r0
   b7350:	46c5      	mov	sp, r8
   b7352:	e7e1      	b.n	b7318 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7354 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7354:	b510      	push	{r4, lr}
   b7356:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7358:	f7ff fb30 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b735c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b735e:	6823      	ldr	r3, [r4, #0]
   b7360:	4620      	mov	r0, r4
   b7362:	695b      	ldr	r3, [r3, #20]
   b7364:	4798      	blx	r3
    if (c >= 0) return c;
   b7366:	2800      	cmp	r0, #0
   b7368:	da08      	bge.n	b737c <_ZN6Stream9timedReadEv+0x28>
   b736a:	f7ff fb27 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b736e:	68e3      	ldr	r3, [r4, #12]
   b7370:	1ac0      	subs	r0, r0, r3
   b7372:	68a3      	ldr	r3, [r4, #8]
   b7374:	4298      	cmp	r0, r3
   b7376:	d3f2      	bcc.n	b735e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b7378:	f04f 30ff 	mov.w	r0, #4294967295
}
   b737c:	bd10      	pop	{r4, pc}

000b737e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b737e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7382:	4607      	mov	r7, r0
   b7384:	460c      	mov	r4, r1
   b7386:	188e      	adds	r6, r1, r2
   b7388:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b738a:	42b5      	cmp	r5, r6
   b738c:	eba5 0804 	sub.w	r8, r5, r4
   b7390:	d007      	beq.n	b73a2 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b7392:	4638      	mov	r0, r7
   b7394:	f7ff ffde 	bl	b7354 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b7398:	1e03      	subs	r3, r0, #0
   b739a:	db02      	blt.n	b73a2 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b739c:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b73a0:	e7f3      	b.n	b738a <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b73a2:	4640      	mov	r0, r8
   b73a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b73a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b73a8:	4b01      	ldr	r3, [pc, #4]	; (b73b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b73aa:	4a02      	ldr	r2, [pc, #8]	; (b73b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b73ac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b73ae:	4770      	bx	lr
   b73b0:	2003e6e0 	.word	0x2003e6e0
   b73b4:	000b989c 	.word	0x000b989c

000b73b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b73b8:	4b02      	ldr	r3, [pc, #8]	; (b73c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b73ba:	681a      	ldr	r2, [r3, #0]
   b73bc:	4b02      	ldr	r3, [pc, #8]	; (b73c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b73be:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b73c0:	4770      	bx	lr
   b73c2:	bf00      	nop
   b73c4:	2003e510 	.word	0x2003e510
   b73c8:	2003e6e4 	.word	0x2003e6e4

000b73cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b73cc:	2100      	movs	r1, #0
   b73ce:	f7ff bc8d 	b.w	b6cec <system_delay_ms>
	...

000b73d4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b73d4:	b510      	push	{r4, lr}
   b73d6:	4b04      	ldr	r3, [pc, #16]	; (b73e8 <_ZN9TCPClientD1Ev+0x14>)
   b73d8:	6003      	str	r3, [r0, #0]
   b73da:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b73dc:	6980      	ldr	r0, [r0, #24]
   b73de:	b108      	cbz	r0, b73e4 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b73e0:	f7ff ff07 	bl	b71f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b73e4:	4620      	mov	r0, r4
   b73e6:	bd10      	pop	{r4, pc}
   b73e8:	000b9994 	.word	0x000b9994

000b73ec <_ZN9TCPClientD0Ev>:
   b73ec:	b510      	push	{r4, lr}
   b73ee:	4604      	mov	r4, r0
   b73f0:	f7ff fff0 	bl	b73d4 <_ZN9TCPClientD1Ev>
   b73f4:	4620      	mov	r0, r4
   b73f6:	211c      	movs	r1, #28
   b73f8:	f7fc fe51 	bl	b409e <_ZdlPvj>
   b73fc:	4620      	mov	r0, r4
   b73fe:	bd10      	pop	{r4, pc}

000b7400 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7400:	4b01      	ldr	r3, [pc, #4]	; (b7408 <_GLOBAL__sub_I_RGB+0x8>)
   b7402:	2200      	movs	r2, #0
   b7404:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7406:	4770      	bx	lr
   b7408:	2003e6e8 	.word	0x2003e6e8

000b740c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b740c:	4b01      	ldr	r3, [pc, #4]	; (b7414 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b740e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7410:	4770      	bx	lr
   b7412:	bf00      	nop
   b7414:	2003e514 	.word	0x2003e514

000b7418 <serialEventRun>:
{
   b7418:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b741a:	4b0b      	ldr	r3, [pc, #44]	; (b7448 <serialEventRun+0x30>)
   b741c:	b143      	cbz	r3, b7430 <serialEventRun+0x18>
   b741e:	f000 f985 	bl	b772c <_Z16_fetch_usbserialv>
   b7422:	6803      	ldr	r3, [r0, #0]
   b7424:	691b      	ldr	r3, [r3, #16]
   b7426:	4798      	blx	r3
   b7428:	2800      	cmp	r0, #0
   b742a:	dd01      	ble.n	b7430 <serialEventRun+0x18>
        serialEvent();
   b742c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7430:	4b06      	ldr	r3, [pc, #24]	; (b744c <serialEventRun+0x34>)
   b7432:	b143      	cbz	r3, b7446 <serialEventRun+0x2e>
   b7434:	f000 fed8 	bl	b81e8 <_Z22__fetch_global_Serial1v>
   b7438:	6803      	ldr	r3, [r0, #0]
   b743a:	691b      	ldr	r3, [r3, #16]
   b743c:	4798      	blx	r3
   b743e:	2800      	cmp	r0, #0
   b7440:	dd01      	ble.n	b7446 <serialEventRun+0x2e>
        serialEvent1();
   b7442:	f3af 8000 	nop.w
}
   b7446:	bd08      	pop	{r3, pc}
	...

000b7450 <_post_loop>:
{
   b7450:	b508      	push	{r3, lr}
	serialEventRun();
   b7452:	f7ff ffe1 	bl	b7418 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7456:	f7ff fab1 	bl	b69bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b745a:	4b01      	ldr	r3, [pc, #4]	; (b7460 <_post_loop+0x10>)
   b745c:	6018      	str	r0, [r3, #0]
}
   b745e:	bd08      	pop	{r3, pc}
   b7460:	2003e740 	.word	0x2003e740

000b7464 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7464:	4805      	ldr	r0, [pc, #20]	; (b747c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7466:	4a06      	ldr	r2, [pc, #24]	; (b7480 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7468:	4906      	ldr	r1, [pc, #24]	; (b7484 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b746a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b746c:	1a12      	subs	r2, r2, r0
   b746e:	f001 f83d 	bl	b84ec <memcpy>
    __backup_sram_signature = signature;
   b7472:	4b05      	ldr	r3, [pc, #20]	; (b7488 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7474:	4a05      	ldr	r2, [pc, #20]	; (b748c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7476:	601a      	str	r2, [r3, #0]
}
   b7478:	bd08      	pop	{r3, pc}
   b747a:	bf00      	nop
   b747c:	2003f400 	.word	0x2003f400
   b7480:	2003f404 	.word	0x2003f404
   b7484:	000b9d24 	.word	0x000b9d24
   b7488:	2003f400 	.word	0x2003f400
   b748c:	9a271c1e 	.word	0x9a271c1e

000b7490 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7490:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7492:	2300      	movs	r3, #0
   b7494:	9300      	str	r3, [sp, #0]
   b7496:	461a      	mov	r2, r3
   b7498:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b749c:	f7ff fc40 	bl	b6d20 <system_ctrl_set_result>
}
   b74a0:	b003      	add	sp, #12
   b74a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b74a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b74a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b74aa:	8843      	ldrh	r3, [r0, #2]
   b74ac:	2b0a      	cmp	r3, #10
   b74ae:	d008      	beq.n	b74c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b74b0:	2b50      	cmp	r3, #80	; 0x50
   b74b2:	d10b      	bne.n	b74cc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b74b4:	4b09      	ldr	r3, [pc, #36]	; (b74dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b74b6:	681b      	ldr	r3, [r3, #0]
   b74b8:	b14b      	cbz	r3, b74ce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b74ba:	b003      	add	sp, #12
   b74bc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b74c0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b74c2:	f7ff ffe5 	bl	b7490 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b74c6:	b003      	add	sp, #12
   b74c8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b74cc:	2300      	movs	r3, #0
   b74ce:	9300      	str	r3, [sp, #0]
   b74d0:	461a      	mov	r2, r3
   b74d2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b74d6:	f7ff fc23 	bl	b6d20 <system_ctrl_set_result>
}
   b74da:	e7f4      	b.n	b74c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b74dc:	2003e6fc 	.word	0x2003e6fc

000b74e0 <module_user_init_hook>:
{
   b74e0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b74e2:	4812      	ldr	r0, [pc, #72]	; (b752c <module_user_init_hook+0x4c>)
   b74e4:	2100      	movs	r1, #0
   b74e6:	f7ff fcd5 	bl	b6e94 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b74ea:	4b11      	ldr	r3, [pc, #68]	; (b7530 <module_user_init_hook+0x50>)
   b74ec:	681a      	ldr	r2, [r3, #0]
   b74ee:	4b11      	ldr	r3, [pc, #68]	; (b7534 <module_user_init_hook+0x54>)
   b74f0:	429a      	cmp	r2, r3
   b74f2:	4b11      	ldr	r3, [pc, #68]	; (b7538 <module_user_init_hook+0x58>)
   b74f4:	bf0c      	ite	eq
   b74f6:	2201      	moveq	r2, #1
   b74f8:	2200      	movne	r2, #0
   b74fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b74fc:	d001      	beq.n	b7502 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b74fe:	f7ff ffb1 	bl	b7464 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7502:	f7ff fa4b 	bl	b699c <HAL_RNG_GetRandomNumber>
   b7506:	4604      	mov	r4, r0
    srand(seed);
   b7508:	f001 f806 	bl	b8518 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b750c:	4b0b      	ldr	r3, [pc, #44]	; (b753c <module_user_init_hook+0x5c>)
   b750e:	b113      	cbz	r3, b7516 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7510:	4620      	mov	r0, r4
   b7512:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7516:	2100      	movs	r1, #0
   b7518:	4808      	ldr	r0, [pc, #32]	; (b753c <module_user_init_hook+0x5c>)
   b751a:	f7ff fc7b 	bl	b6e14 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b751e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7522:	4807      	ldr	r0, [pc, #28]	; (b7540 <module_user_init_hook+0x60>)
   b7524:	2100      	movs	r1, #0
   b7526:	f7ff bbf1 	b.w	b6d0c <system_ctrl_set_app_request_handler>
   b752a:	bf00      	nop
   b752c:	000b740d 	.word	0x000b740d
   b7530:	2003f400 	.word	0x2003f400
   b7534:	9a271c1e 	.word	0x9a271c1e
   b7538:	2003e6f8 	.word	0x2003e6f8
   b753c:	00000000 	.word	0x00000000
   b7540:	000b74a9 	.word	0x000b74a9

000b7544 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7544:	4770      	bx	lr

000b7546 <_ZN9IPAddressD0Ev>:
   b7546:	b510      	push	{r4, lr}
   b7548:	2118      	movs	r1, #24
   b754a:	4604      	mov	r4, r0
   b754c:	f7fc fda7 	bl	b409e <_ZdlPvj>
   b7550:	4620      	mov	r0, r4
   b7552:	bd10      	pop	{r4, pc}

000b7554 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7554:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7556:	7d03      	ldrb	r3, [r0, #20]
   b7558:	2b06      	cmp	r3, #6
{
   b755a:	b08d      	sub	sp, #52	; 0x34
   b755c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b755e:	f100 0704 	add.w	r7, r0, #4
   b7562:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7566:	d012      	beq.n	b758e <_ZNK9IPAddress7printToER5Print+0x3a>
   b7568:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b756c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7570:	220a      	movs	r2, #10
   b7572:	4630      	mov	r0, r6
   b7574:	f7ff fe9f 	bl	b72b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7578:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b757a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b757c:	d019      	beq.n	b75b2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b757e:	2c00      	cmp	r4, #0
   b7580:	d0f4      	beq.n	b756c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7582:	212e      	movs	r1, #46	; 0x2e
   b7584:	4630      	mov	r0, r6
   b7586:	f7ff fe7d 	bl	b7284 <_ZN5Print5printEc>
   b758a:	4404      	add	r4, r0
   b758c:	e7ee      	b.n	b756c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b758e:	232f      	movs	r3, #47	; 0x2f
   b7590:	466a      	mov	r2, sp
   b7592:	4639      	mov	r1, r7
   b7594:	200a      	movs	r0, #10
		buf[0] = 0;
   b7596:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b759a:	f7ff fa3f 	bl	b6a1c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b759e:	4668      	mov	r0, sp
   b75a0:	f000 fff2 	bl	b8588 <strlen>
   b75a4:	6833      	ldr	r3, [r6, #0]
   b75a6:	4602      	mov	r2, r0
   b75a8:	68db      	ldr	r3, [r3, #12]
   b75aa:	4669      	mov	r1, sp
   b75ac:	4630      	mov	r0, r6
   b75ae:	4798      	blx	r3
   b75b0:	4604      	mov	r4, r0
    }
    return n;
}
   b75b2:	4620      	mov	r0, r4
   b75b4:	b00d      	add	sp, #52	; 0x34
   b75b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b75b8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b75b8:	b510      	push	{r4, lr}
   b75ba:	4b05      	ldr	r3, [pc, #20]	; (b75d0 <_ZN9IPAddressC1Ev+0x18>)
   b75bc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b75be:	2211      	movs	r2, #17
   b75c0:	f840 3b04 	str.w	r3, [r0], #4
   b75c4:	2100      	movs	r1, #0
   b75c6:	f000 ff9f 	bl	b8508 <memset>
}
   b75ca:	4620      	mov	r0, r4
   b75cc:	bd10      	pop	{r4, pc}
   b75ce:	bf00      	nop
   b75d0:	000b98c4 	.word	0x000b98c4

000b75d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b75d4:	4603      	mov	r3, r0
   b75d6:	4a07      	ldr	r2, [pc, #28]	; (b75f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b75d8:	b510      	push	{r4, lr}
   b75da:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b75de:	f101 0210 	add.w	r2, r1, #16
   b75e2:	f851 4b04 	ldr.w	r4, [r1], #4
   b75e6:	f843 4b04 	str.w	r4, [r3], #4
   b75ea:	4291      	cmp	r1, r2
   b75ec:	d1f9      	bne.n	b75e2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b75ee:	780a      	ldrb	r2, [r1, #0]
   b75f0:	701a      	strb	r2, [r3, #0]
}
   b75f2:	bd10      	pop	{r4, pc}
   b75f4:	000b98c4 	.word	0x000b98c4

000b75f8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b75f8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b75fa:	2b04      	cmp	r3, #4
   b75fc:	d104      	bne.n	b7608 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b75fe:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7600:	3800      	subs	r0, #0
   b7602:	bf18      	it	ne
   b7604:	2001      	movne	r0, #1
   b7606:	4770      	bx	lr
    } else if (version() == 6) {
   b7608:	2b06      	cmp	r3, #6
   b760a:	d107      	bne.n	b761c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b760c:	6843      	ldr	r3, [r0, #4]
   b760e:	b93b      	cbnz	r3, b7620 <_ZNK9IPAddresscvbEv+0x28>
   b7610:	6883      	ldr	r3, [r0, #8]
   b7612:	b92b      	cbnz	r3, b7620 <_ZNK9IPAddresscvbEv+0x28>
   b7614:	68c3      	ldr	r3, [r0, #12]
   b7616:	b91b      	cbnz	r3, b7620 <_ZNK9IPAddresscvbEv+0x28>
   b7618:	6900      	ldr	r0, [r0, #16]
   b761a:	e7f1      	b.n	b7600 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b761c:	2000      	movs	r0, #0
   b761e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7620:	2001      	movs	r0, #1
}
   b7622:	4770      	bx	lr

000b7624 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7624:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7626:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b762a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b762e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7632:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7636:	2304      	movs	r3, #4
   b7638:	6041      	str	r1, [r0, #4]
   b763a:	7503      	strb	r3, [r0, #20]
}
   b763c:	bd10      	pop	{r4, pc}
	...

000b7640 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b7640:	b513      	push	{r0, r1, r4, lr}
   b7642:	4c04      	ldr	r4, [pc, #16]	; (b7654 <_ZN9IPAddressC1Ehhhh+0x14>)
   b7644:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b7646:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b764a:	9400      	str	r4, [sp, #0]
   b764c:	f7ff ffea 	bl	b7624 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7650:	b002      	add	sp, #8
   b7652:	bd10      	pop	{r4, pc}
   b7654:	000b98c4 	.word	0x000b98c4

000b7658 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7658:	b507      	push	{r0, r1, r2, lr}
   b765a:	4b06      	ldr	r3, [pc, #24]	; (b7674 <_ZN9IPAddressC1EPKh+0x1c>)
   b765c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b765e:	78cb      	ldrb	r3, [r1, #3]
   b7660:	9300      	str	r3, [sp, #0]
   b7662:	788b      	ldrb	r3, [r1, #2]
   b7664:	784a      	ldrb	r2, [r1, #1]
   b7666:	7809      	ldrb	r1, [r1, #0]
   b7668:	f7ff ffdc 	bl	b7624 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b766c:	b003      	add	sp, #12
   b766e:	f85d fb04 	ldr.w	pc, [sp], #4
   b7672:	bf00      	nop
   b7674:	000b98c4 	.word	0x000b98c4

000b7678 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7678:	7441      	strb	r1, [r0, #17]
}
   b767a:	4770      	bx	lr

000b767c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b767c:	4770      	bx	lr

000b767e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b767e:	4770      	bx	lr

000b7680 <_ZN9USBSerial4readEv>:
{
   b7680:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7682:	2100      	movs	r1, #0
   b7684:	7c00      	ldrb	r0, [r0, #16]
   b7686:	f7ff fb01 	bl	b6c8c <HAL_USB_USART_Receive_Data>
}
   b768a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b768e:	bd08      	pop	{r3, pc}

000b7690 <_ZN9USBSerial4peekEv>:
{
   b7690:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7692:	2101      	movs	r1, #1
   b7694:	7c00      	ldrb	r0, [r0, #16]
   b7696:	f7ff faf9 	bl	b6c8c <HAL_USB_USART_Receive_Data>
}
   b769a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b769e:	bd08      	pop	{r3, pc}

000b76a0 <_ZN9USBSerial17availableForWriteEv>:
{
   b76a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b76a2:	7c00      	ldrb	r0, [r0, #16]
   b76a4:	f7ff faea 	bl	b6c7c <HAL_USB_USART_Available_Data_For_Write>
}
   b76a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b76ac:	bd08      	pop	{r3, pc}

000b76ae <_ZN9USBSerial9availableEv>:
{
   b76ae:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b76b0:	7c00      	ldrb	r0, [r0, #16]
   b76b2:	f7ff fadb 	bl	b6c6c <HAL_USB_USART_Available_Data>
}
   b76b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b76ba:	bd08      	pop	{r3, pc}

000b76bc <_ZN9USBSerial5writeEh>:
{
   b76bc:	b513      	push	{r0, r1, r4, lr}
   b76be:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b76c0:	7c00      	ldrb	r0, [r0, #16]
{
   b76c2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b76c4:	f7ff fada 	bl	b6c7c <HAL_USB_USART_Available_Data_For_Write>
   b76c8:	2800      	cmp	r0, #0
   b76ca:	9901      	ldr	r1, [sp, #4]
   b76cc:	dc01      	bgt.n	b76d2 <_ZN9USBSerial5writeEh+0x16>
   b76ce:	7c60      	ldrb	r0, [r4, #17]
   b76d0:	b120      	cbz	r0, b76dc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b76d2:	7c20      	ldrb	r0, [r4, #16]
   b76d4:	f7ff fae2 	bl	b6c9c <HAL_USB_USART_Send_Data>
   b76d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b76dc:	b002      	add	sp, #8
   b76de:	bd10      	pop	{r4, pc}

000b76e0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b76e0:	7c00      	ldrb	r0, [r0, #16]
   b76e2:	f7ff bae3 	b.w	b6cac <HAL_USB_USART_Flush_Data>

000b76e6 <_ZN9USBSerialD0Ev>:
   b76e6:	b510      	push	{r4, lr}
   b76e8:	2114      	movs	r1, #20
   b76ea:	4604      	mov	r4, r0
   b76ec:	f7fc fcd7 	bl	b409e <_ZdlPvj>
   b76f0:	4620      	mov	r0, r4
   b76f2:	bd10      	pop	{r4, pc}

000b76f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b76f4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b76f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b76fa:	4604      	mov	r4, r0
   b76fc:	4608      	mov	r0, r1
   b76fe:	2100      	movs	r1, #0
   b7700:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7704:	4b04      	ldr	r3, [pc, #16]	; (b7718 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7706:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7708:	2301      	movs	r3, #1
  _serial = serial;
   b770a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b770c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b770e:	4611      	mov	r1, r2
   b7710:	f7ff faa4 	bl	b6c5c <HAL_USB_USART_Init>
}
   b7714:	4620      	mov	r0, r4
   b7716:	bd10      	pop	{r4, pc}
   b7718:	000b98d8 	.word	0x000b98d8

000b771c <_Z19acquireSerialBufferv>:
{
   b771c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b771e:	2214      	movs	r2, #20
{
   b7720:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7722:	2100      	movs	r1, #0
   b7724:	f000 fef0 	bl	b8508 <memset>
}
   b7728:	4620      	mov	r0, r4
   b772a:	bd10      	pop	{r4, pc}

000b772c <_Z16_fetch_usbserialv>:
{
   b772c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b772e:	4c0f      	ldr	r4, [pc, #60]	; (b776c <_Z16_fetch_usbserialv+0x40>)
{
   b7730:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7732:	a803      	add	r0, sp, #12
   b7734:	f7ff fff2 	bl	b771c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7738:	7821      	ldrb	r1, [r4, #0]
   b773a:	f3bf 8f5b 	dmb	ish
   b773e:	f011 0101 	ands.w	r1, r1, #1
   b7742:	d10f      	bne.n	b7764 <_Z16_fetch_usbserialv+0x38>
   b7744:	4620      	mov	r0, r4
   b7746:	9101      	str	r1, [sp, #4]
   b7748:	f7fc fcb8 	bl	b40bc <__cxa_guard_acquire>
   b774c:	9901      	ldr	r1, [sp, #4]
   b774e:	b148      	cbz	r0, b7764 <_Z16_fetch_usbserialv+0x38>
   b7750:	aa03      	add	r2, sp, #12
   b7752:	4807      	ldr	r0, [pc, #28]	; (b7770 <_Z16_fetch_usbserialv+0x44>)
   b7754:	f7ff ffce 	bl	b76f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7758:	4620      	mov	r0, r4
   b775a:	f7fc fcb4 	bl	b40c6 <__cxa_guard_release>
   b775e:	4805      	ldr	r0, [pc, #20]	; (b7774 <_Z16_fetch_usbserialv+0x48>)
   b7760:	f000 feb6 	bl	b84d0 <atexit>
	return _usbserial;
}
   b7764:	4802      	ldr	r0, [pc, #8]	; (b7770 <_Z16_fetch_usbserialv+0x44>)
   b7766:	b008      	add	sp, #32
   b7768:	bd10      	pop	{r4, pc}
   b776a:	bf00      	nop
   b776c:	2003e700 	.word	0x2003e700
   b7770:	2003e704 	.word	0x2003e704
   b7774:	000b767d 	.word	0x000b767d

000b7778 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7778:	4770      	bx	lr

000b777a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b777a:	7441      	strb	r1, [r0, #17]
}
   b777c:	4770      	bx	lr

000b777e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b777e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7780:	7c00      	ldrb	r0, [r0, #16]
   b7782:	f7ff f993 	bl	b6aac <hal_usart_available_data_for_write>
}
   b7786:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b778a:	bd08      	pop	{r3, pc}

000b778c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b778c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b778e:	7c00      	ldrb	r0, [r0, #16]
   b7790:	f7ff f964 	bl	b6a5c <hal_usart_available>
}
   b7794:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7798:	bd08      	pop	{r3, pc}

000b779a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b779a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b779c:	7c00      	ldrb	r0, [r0, #16]
   b779e:	f7ff f96d 	bl	b6a7c <hal_usart_peek>
}
   b77a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b77a6:	bd08      	pop	{r3, pc}

000b77a8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b77a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b77aa:	7c00      	ldrb	r0, [r0, #16]
   b77ac:	f7ff f95e 	bl	b6a6c <hal_usart_read>
}
   b77b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b77b4:	bd08      	pop	{r3, pc}

000b77b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b77b6:	7c00      	ldrb	r0, [r0, #16]
   b77b8:	f7ff b968 	b.w	b6a8c <hal_usart_flush>

000b77bc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b77bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b77be:	7c45      	ldrb	r5, [r0, #17]
{
   b77c0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b77c2:	b12d      	cbz	r5, b77d0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b77c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b77c6:	b003      	add	sp, #12
   b77c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b77cc:	f7ff b93e 	b.w	b6a4c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b77d0:	7c00      	ldrb	r0, [r0, #16]
   b77d2:	9101      	str	r1, [sp, #4]
   b77d4:	f7ff f96a 	bl	b6aac <hal_usart_available_data_for_write>
   b77d8:	2800      	cmp	r0, #0
   b77da:	9901      	ldr	r1, [sp, #4]
   b77dc:	dcf2      	bgt.n	b77c4 <_ZN11USARTSerial5writeEh+0x8>
}
   b77de:	4628      	mov	r0, r5
   b77e0:	b003      	add	sp, #12
   b77e2:	bd30      	pop	{r4, r5, pc}

000b77e4 <_ZN11USARTSerialD0Ev>:
   b77e4:	b510      	push	{r4, lr}
   b77e6:	2114      	movs	r1, #20
   b77e8:	4604      	mov	r4, r0
   b77ea:	f7fc fc58 	bl	b409e <_ZdlPvj>
   b77ee:	4620      	mov	r0, r4
   b77f0:	bd10      	pop	{r4, pc}
	...

000b77f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b77f4:	b510      	push	{r4, lr}
   b77f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77fa:	4604      	mov	r4, r0
   b77fc:	4608      	mov	r0, r1
   b77fe:	4611      	mov	r1, r2
   b7800:	2200      	movs	r2, #0
   b7802:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7806:	4b04      	ldr	r3, [pc, #16]	; (b7818 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7808:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b780a:	2301      	movs	r3, #1
  _serial = serial;
   b780c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b780e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7810:	f7ff f954 	bl	b6abc <hal_usart_init_ex>
}
   b7814:	4620      	mov	r0, r4
   b7816:	bd10      	pop	{r4, pc}
   b7818:	000b9908 	.word	0x000b9908

000b781c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b781c:	4770      	bx	lr

000b781e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b781e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7820:	4606      	mov	r6, r0
   b7822:	4615      	mov	r5, r2
   b7824:	460c      	mov	r4, r1
   b7826:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7828:	42bc      	cmp	r4, r7
   b782a:	d006      	beq.n	b783a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b782c:	6833      	ldr	r3, [r6, #0]
   b782e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7832:	689b      	ldr	r3, [r3, #8]
   b7834:	4630      	mov	r0, r6
   b7836:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7838:	e7f6      	b.n	b7828 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b783a:	4628      	mov	r0, r5
   b783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b783e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b783e:	7c00      	ldrb	r0, [r0, #16]
   b7840:	2200      	movs	r2, #0
   b7842:	f7ff b963 	b.w	b6b0c <hal_i2c_write>

000b7846 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7846:	7c00      	ldrb	r0, [r0, #16]
   b7848:	2100      	movs	r1, #0
   b784a:	f7ff b967 	b.w	b6b1c <hal_i2c_available>

000b784e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b784e:	7c00      	ldrb	r0, [r0, #16]
   b7850:	2100      	movs	r1, #0
   b7852:	f7ff b96b 	b.w	b6b2c <hal_i2c_read>

000b7856 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7856:	7c00      	ldrb	r0, [r0, #16]
   b7858:	2100      	movs	r1, #0
   b785a:	f7ff b96f 	b.w	b6b3c <hal_i2c_peek>

000b785e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b785e:	7c00      	ldrb	r0, [r0, #16]
   b7860:	2100      	movs	r1, #0
   b7862:	f7ff b973 	b.w	b6b4c <hal_i2c_flush>

000b7866 <_ZN7TwoWireD0Ev>:
   b7866:	b510      	push	{r4, lr}
   b7868:	2114      	movs	r1, #20
   b786a:	4604      	mov	r4, r0
   b786c:	f7fc fc17 	bl	b409e <_ZdlPvj>
   b7870:	4620      	mov	r0, r4
   b7872:	bd10      	pop	{r4, pc}

000b7874 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7874:	b510      	push	{r4, lr}
   b7876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b787a:	4604      	mov	r4, r0
   b787c:	4608      	mov	r0, r1
   b787e:	2100      	movs	r1, #0
   b7880:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7884:	4b03      	ldr	r3, [pc, #12]	; (b7894 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7886:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7888:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b788a:	4611      	mov	r1, r2
   b788c:	f7ff f96e 	bl	b6b6c <hal_i2c_init>
}
   b7890:	4620      	mov	r0, r4
   b7892:	bd10      	pop	{r4, pc}
   b7894:	000b9938 	.word	0x000b9938

000b7898 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7898:	7c00      	ldrb	r0, [r0, #16]
   b789a:	2200      	movs	r2, #0
   b789c:	f7ff b916 	b.w	b6acc <hal_i2c_set_speed>

000b78a0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b78a0:	2300      	movs	r3, #0
   b78a2:	7c00      	ldrb	r0, [r0, #16]
   b78a4:	461a      	mov	r2, r3
   b78a6:	4619      	mov	r1, r3
   b78a8:	f7ff b918 	b.w	b6adc <hal_i2c_begin>

000b78ac <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b78ac:	7c00      	ldrb	r0, [r0, #16]
   b78ae:	2200      	movs	r2, #0
   b78b0:	f7ff b91c 	b.w	b6aec <hal_i2c_begin_transmission>

000b78b4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b78b4:	b2c9      	uxtb	r1, r1
   b78b6:	f7ff bff9 	b.w	b78ac <_ZN7TwoWire17beginTransmissionEh>

000b78ba <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b78ba:	7c00      	ldrb	r0, [r0, #16]
   b78bc:	2200      	movs	r2, #0
   b78be:	f7ff b91d 	b.w	b6afc <hal_i2c_end_transmission>

000b78c2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b78c2:	2101      	movs	r1, #1
   b78c4:	f7ff bff9 	b.w	b78ba <_ZN7TwoWire15endTransmissionEh>

000b78c8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b78c8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b78ca:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b78cc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b78d0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b78d2:	2201      	movs	r2, #1
   b78d4:	f04f 33ff 	mov.w	r3, #4294967295
   b78d8:	f10d 0107 	add.w	r1, sp, #7
   b78dc:	47a0      	blx	r4
}
   b78de:	b002      	add	sp, #8
   b78e0:	bd10      	pop	{r4, pc}

000b78e2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b78e2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b78e4:	6803      	ldr	r3, [r0, #0]
   b78e6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b78e8:	f04f 33ff 	mov.w	r3, #4294967295
   b78ec:	46a4      	mov	ip, r4
}
   b78ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b78f2:	4760      	bx	ip

000b78f4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b78f4:	b513      	push	{r0, r1, r4, lr}
   b78f6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b78f8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b78fa:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b78fe:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7900:	f10d 0107 	add.w	r1, sp, #7
   b7904:	2201      	movs	r2, #1
   b7906:	47a0      	blx	r4
}
   b7908:	b002      	add	sp, #8
   b790a:	bd10      	pop	{r4, pc}

000b790c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b790c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b790e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7910:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7914:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7918:	429a      	cmp	r2, r3
int TCPClient::read() {
   b791a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b791c:	d008      	beq.n	b7930 <_ZN9TCPClient4readEv+0x24>
   b791e:	6963      	ldr	r3, [r4, #20]
   b7920:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7924:	1c51      	adds	r1, r2, #1
   b7926:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b792a:	4413      	add	r3, r2
   b792c:	7918      	ldrb	r0, [r3, #4]
}
   b792e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7930:	6803      	ldr	r3, [r0, #0]
   b7932:	691b      	ldr	r3, [r3, #16]
   b7934:	4798      	blx	r3
   b7936:	2800      	cmp	r0, #0
   b7938:	d1f1      	bne.n	b791e <_ZN9TCPClient4readEv+0x12>
   b793a:	f04f 30ff 	mov.w	r0, #4294967295
   b793e:	e7f6      	b.n	b792e <_ZN9TCPClient4readEv+0x22>

000b7940 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7940:	4770      	bx	lr

000b7942 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7942:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7944:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7946:	43c0      	mvns	r0, r0
   b7948:	0fc0      	lsrs	r0, r0, #31
   b794a:	4770      	bx	lr

000b794c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b794c:	4770      	bx	lr
	...

000b7950 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7950:	4b06      	ldr	r3, [pc, #24]	; (b796c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7952:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7954:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7956:	f100 040c 	add.w	r4, r0, #12
	    ||
   b795a:	d005      	beq.n	b7968 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b795c:	4608      	mov	r0, r1
   b795e:	f000 fca5 	bl	b82ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7962:	2800      	cmp	r0, #0
   b7964:	bf08      	it	eq
   b7966:	2400      	moveq	r4, #0
      }
   b7968:	4620      	mov	r0, r4
   b796a:	bd10      	pop	{r4, pc}
   b796c:	000b9894 	.word	0x000b9894

000b7970 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7970:	b510      	push	{r4, lr}
   b7972:	21ac      	movs	r1, #172	; 0xac
   b7974:	4604      	mov	r4, r0
   b7976:	f7fc fb92 	bl	b409e <_ZdlPvj>
   b797a:	4620      	mov	r0, r4
   b797c:	bd10      	pop	{r4, pc}

000b797e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b797e:	21ac      	movs	r1, #172	; 0xac
   b7980:	f7fc bb8d 	b.w	b409e <_ZdlPvj>

000b7984 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7988:	f04f 0800 	mov.w	r8, #0
   b798c:	b086      	sub	sp, #24
   b798e:	461c      	mov	r4, r3
   b7990:	f8c0 8004 	str.w	r8, [r0, #4]
   b7994:	4605      	mov	r5, r0
   b7996:	460e      	mov	r6, r1
   b7998:	4617      	mov	r7, r2
    struct timeval tv = {};
   b799a:	4641      	mov	r1, r8
   b799c:	2210      	movs	r2, #16
   b799e:	a802      	add	r0, sp, #8
   b79a0:	f000 fdb2 	bl	b8508 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b79a4:	1c63      	adds	r3, r4, #1
   b79a6:	d009      	beq.n	b79bc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b79a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b79ac:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b79b0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b79b4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b79b8:	435c      	muls	r4, r3
   b79ba:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b79bc:	6968      	ldr	r0, [r5, #20]
   b79be:	2310      	movs	r3, #16
   b79c0:	9300      	str	r3, [sp, #0]
   b79c2:	6800      	ldr	r0, [r0, #0]
   b79c4:	ab02      	add	r3, sp, #8
   b79c6:	f241 0205 	movw	r2, #4101	; 0x1005
   b79ca:	f640 71ff 	movw	r1, #4095	; 0xfff
   b79ce:	f7ff f8d5 	bl	b6b7c <sock_setsockopt>
    if (ret < 0) {
   b79d2:	2800      	cmp	r0, #0
   b79d4:	da07      	bge.n	b79e6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b79d6:	f7ff fa4d 	bl	b6e74 <__errno>
   b79da:	6803      	ldr	r3, [r0, #0]
   b79dc:	606b      	str	r3, [r5, #4]
        return 0;
   b79de:	2000      	movs	r0, #0
}
   b79e0:	b006      	add	sp, #24
   b79e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b79e6:	6968      	ldr	r0, [r5, #20]
   b79e8:	2300      	movs	r3, #0
   b79ea:	6800      	ldr	r0, [r0, #0]
   b79ec:	463a      	mov	r2, r7
   b79ee:	4631      	mov	r1, r6
   b79f0:	f7ff f8e4 	bl	b6bbc <sock_send>
    if (ret < 0) {
   b79f4:	1e03      	subs	r3, r0, #0
   b79f6:	dbee      	blt.n	b79d6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b79f8:	4618      	mov	r0, r3
   b79fa:	e7f1      	b.n	b79e0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b79fc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b79fc:	b530      	push	{r4, r5, lr}
   b79fe:	b087      	sub	sp, #28
   b7a00:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7a02:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7a04:	4668      	mov	r0, sp
   b7a06:	f7ff fe27 	bl	b7658 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a0c:	3404      	adds	r4, #4
   b7a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a10:	682b      	ldr	r3, [r5, #0]
   b7a12:	7023      	strb	r3, [r4, #0]
    }
   b7a14:	b007      	add	sp, #28
   b7a16:	bd30      	pop	{r4, r5, pc}

000b7a18 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7a18:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7a1a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7a1c:	4b05      	ldr	r3, [pc, #20]	; (b7a34 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7a1e:	4604      	mov	r4, r0
   b7a20:	358c      	adds	r5, #140	; 0x8c
   b7a22:	f844 3b04 	str.w	r3, [r4], #4
   b7a26:	4606      	mov	r6, r0
   b7a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a2c:	682b      	ldr	r3, [r5, #0]
   b7a2e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7a30:	4630      	mov	r0, r6
   b7a32:	bd70      	pop	{r4, r5, r6, pc}
   b7a34:	000b98c4 	.word	0x000b98c4

000b7a38 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7a3c:	4698      	mov	r8, r3
    stop();
   b7a3e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7a40:	b093      	sub	sp, #76	; 0x4c
   b7a42:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7a44:	2400      	movs	r4, #0
    stop();
   b7a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7a48:	4606      	mov	r6, r0
   b7a4a:	4617      	mov	r7, r2
    stop();
   b7a4c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7a4e:	4628      	mov	r0, r5
   b7a50:	466b      	mov	r3, sp
   b7a52:	4622      	mov	r2, r4
   b7a54:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7a56:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7a58:	f7fe ff50 	bl	b68fc <netdb_getaddrinfo>
   b7a5c:	4605      	mov	r5, r0
   b7a5e:	2800      	cmp	r0, #0
   b7a60:	d163      	bne.n	b7b2a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7a62:	9b00      	ldr	r3, [sp, #0]
   b7a64:	2b00      	cmp	r3, #0
   b7a66:	d04b      	beq.n	b7b00 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7a68:	695b      	ldr	r3, [r3, #20]
   b7a6a:	2b00      	cmp	r3, #0
   b7a6c:	d048      	beq.n	b7b00 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7a6e:	a806      	add	r0, sp, #24
   b7a70:	f7ff fda2 	bl	b75b8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7a74:	9b00      	ldr	r3, [sp, #0]
   b7a76:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7a78:	7863      	ldrb	r3, [r4, #1]
   b7a7a:	2b02      	cmp	r3, #2
   b7a7c:	d104      	bne.n	b7a88 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7a7e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7a80:	a806      	add	r0, sp, #24
   b7a82:	f7ff ffbb 	bl	b79fc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7a86:	e026      	b.n	b7ad6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7a88:	2b0a      	cmp	r3, #10
   b7a8a:	d124      	bne.n	b7ad6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7a8c:	2211      	movs	r2, #17
   b7a8e:	4629      	mov	r1, r5
   b7a90:	a801      	add	r0, sp, #4
   b7a92:	f000 fd39 	bl	b8508 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7a96:	68a3      	ldr	r3, [r4, #8]
   b7a98:	2b00      	cmp	r3, #0
   b7a9a:	d038      	beq.n	b7b0e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7a9c:	f104 0308 	add.w	r3, r4, #8
   b7aa0:	f10d 0c04 	add.w	ip, sp, #4
   b7aa4:	3418      	adds	r4, #24
   b7aa6:	6818      	ldr	r0, [r3, #0]
   b7aa8:	6859      	ldr	r1, [r3, #4]
   b7aaa:	4662      	mov	r2, ip
   b7aac:	c203      	stmia	r2!, {r0, r1}
   b7aae:	3308      	adds	r3, #8
   b7ab0:	42a3      	cmp	r3, r4
   b7ab2:	4694      	mov	ip, r2
   b7ab4:	d1f7      	bne.n	b7aa6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7ab6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7ab8:	a901      	add	r1, sp, #4
   b7aba:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7abc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7ac0:	f7ff fd88 	bl	b75d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7ac4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7ac8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7acc:	ac07      	add	r4, sp, #28
   b7ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ad0:	f8dc 3000 	ldr.w	r3, [ip]
   b7ad4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7ad6:	a806      	add	r0, sp, #24
   b7ad8:	f7ff fd8e 	bl	b75f8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7adc:	b180      	cbz	r0, b7b00 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7ade:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7ae0:	ad07      	add	r5, sp, #28
   b7ae2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7ae6:	4b12      	ldr	r3, [pc, #72]	; (b7b30 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7ae8:	930c      	str	r3, [sp, #48]	; 0x30
   b7aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7aec:	ac0d      	add	r4, sp, #52	; 0x34
   b7aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7af0:	682b      	ldr	r3, [r5, #0]
   b7af2:	7023      	strb	r3, [r4, #0]
   b7af4:	463a      	mov	r2, r7
   b7af6:	4643      	mov	r3, r8
   b7af8:	a90c      	add	r1, sp, #48	; 0x30
   b7afa:	4630      	mov	r0, r6
   b7afc:	47c8      	blx	r9
   b7afe:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7b00:	9800      	ldr	r0, [sp, #0]
   b7b02:	f7fe fef3 	bl	b68ec <netdb_freeaddrinfo>
}
   b7b06:	4628      	mov	r0, r5
   b7b08:	b013      	add	sp, #76	; 0x4c
   b7b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7b0e:	68e3      	ldr	r3, [r4, #12]
   b7b10:	2b00      	cmp	r3, #0
   b7b12:	d1c3      	bne.n	b7a9c <_ZN9TCPClient7connectEPKctm+0x64>
   b7b14:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7b18:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7b1c:	f7fe ff86 	bl	b6a2c <inet_htonl>
   b7b20:	4581      	cmp	r9, r0
   b7b22:	d1bb      	bne.n	b7a9c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7b24:	f104 0114 	add.w	r1, r4, #20
   b7b28:	e7aa      	b.n	b7a80 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7b2a:	4625      	mov	r5, r4
   b7b2c:	e7e8      	b.n	b7b00 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7b2e:	bf00      	nop
   b7b30:	000b98c4 	.word	0x000b98c4

000b7b34 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7b34:	b538      	push	{r3, r4, r5, lr}
   b7b36:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7b38:	681a      	ldr	r2, [r3, #0]
   b7b3a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7b3c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7b3e:	da10      	bge.n	b7b62 <_ZN9TCPClient9connectedEv+0x2e>
   b7b40:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b44:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7b48:	429a      	cmp	r2, r3
   b7b4a:	d10a      	bne.n	b7b62 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7b4c:	6803      	ldr	r3, [r0, #0]
   b7b4e:	691b      	ldr	r3, [r3, #16]
   b7b50:	4798      	blx	r3
        if (!rv) {
   b7b52:	4604      	mov	r4, r0
   b7b54:	b928      	cbnz	r0, b7b62 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7b56:	682b      	ldr	r3, [r5, #0]
   b7b58:	4628      	mov	r0, r5
   b7b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b5c:	4798      	blx	r3
        rv = available();
   b7b5e:	4620      	mov	r0, r4
}
   b7b60:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7b62:	2001      	movs	r0, #1
   b7b64:	e7fc      	b.n	b7b60 <_ZN9TCPClient9connectedEv+0x2c>

000b7b66 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7b66:	b510      	push	{r4, lr}
   b7b68:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7b6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b6e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7b72:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7b74:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7b76:	d005      	beq.n	b7b84 <_ZN9TCPClient4peekEv+0x1e>
   b7b78:	6963      	ldr	r3, [r4, #20]
   b7b7a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7b7e:	4413      	add	r3, r2
   b7b80:	7918      	ldrb	r0, [r3, #4]
}
   b7b82:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7b84:	6803      	ldr	r3, [r0, #0]
   b7b86:	691b      	ldr	r3, [r3, #16]
   b7b88:	4798      	blx	r3
   b7b8a:	2800      	cmp	r0, #0
   b7b8c:	d1f4      	bne.n	b7b78 <_ZN9TCPClient4peekEv+0x12>
   b7b8e:	f04f 30ff 	mov.w	r0, #4294967295
   b7b92:	e7f6      	b.n	b7b82 <_ZN9TCPClient4peekEv+0x1c>

000b7b94 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b96:	6943      	ldr	r3, [r0, #20]
   b7b98:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7b9a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b9e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7ba2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7ba4:	4605      	mov	r5, r0
   b7ba6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7ba8:	d016      	beq.n	b7bd8 <_ZN9TCPClient4readEPhj+0x44>
   b7baa:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7bac:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7bb0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7bb4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7bb6:	42bc      	cmp	r4, r7
   b7bb8:	bf28      	it	cs
   b7bba:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7bbc:	3304      	adds	r3, #4
   b7bbe:	4622      	mov	r2, r4
   b7bc0:	4419      	add	r1, r3
   b7bc2:	4630      	mov	r0, r6
   b7bc4:	f000 fc92 	bl	b84ec <memcpy>
   b7bc8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7bca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7bce:	4423      	add	r3, r4
   b7bd0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7bd4:	4620      	mov	r0, r4
   b7bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7bd8:	6803      	ldr	r3, [r0, #0]
   b7bda:	691b      	ldr	r3, [r3, #16]
   b7bdc:	4798      	blx	r3
   b7bde:	2800      	cmp	r0, #0
   b7be0:	d1e3      	bne.n	b7baa <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7be2:	f04f 34ff 	mov.w	r4, #4294967295
   b7be6:	e7f5      	b.n	b7bd4 <_ZN9TCPClient4readEPhj+0x40>

000b7be8 <_ZN9TCPClient12flush_bufferEv>:
   b7be8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7bea:	2300      	movs	r3, #0
   b7bec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7bf0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7bf2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7bf6:	4770      	bx	lr

000b7bf8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7bfc:	461f      	mov	r7, r3
    stop();
   b7bfe:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7c00:	460c      	mov	r4, r1
    stop();
   b7c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7c04:	b08a      	sub	sp, #40	; 0x28
   b7c06:	4605      	mov	r5, r0
   b7c08:	4616      	mov	r6, r2
    stop();
   b7c0a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7c0c:	7d23      	ldrb	r3, [r4, #20]
   b7c0e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7c12:	2b04      	cmp	r3, #4
   b7c14:	bf0c      	ite	eq
   b7c16:	2002      	moveq	r0, #2
   b7c18:	200a      	movne	r0, #10
   b7c1a:	2206      	movs	r2, #6
   b7c1c:	2101      	movs	r1, #1
   b7c1e:	f7fe ffd5 	bl	b6bcc <sock_socket>
   b7c22:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7c26:	696b      	ldr	r3, [r5, #20]
   b7c28:	681b      	ldr	r3, [r3, #0]
   b7c2a:	2b00      	cmp	r3, #0
   b7c2c:	da08      	bge.n	b7c40 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7c2e:	682b      	ldr	r3, [r5, #0]
   b7c30:	4628      	mov	r0, r5
   b7c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7c34:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7c36:	4798      	blx	r3
}
   b7c38:	4620      	mov	r0, r4
   b7c3a:	b00a      	add	sp, #40	; 0x28
   b7c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7c40:	4628      	mov	r0, r5
   b7c42:	f7ff ffd1 	bl	b7be8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7c46:	b1b7      	cbz	r7, b7c76 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7c48:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7c4a:	a903      	add	r1, sp, #12
   b7c4c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7c4e:	9303      	str	r3, [sp, #12]
   b7c50:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7c54:	f7fe fe9a 	bl	b698c <if_index_to_name>
   b7c58:	2800      	cmp	r0, #0
   b7c5a:	d1e8      	bne.n	b7c2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7c5c:	6968      	ldr	r0, [r5, #20]
   b7c5e:	2306      	movs	r3, #6
   b7c60:	9300      	str	r3, [sp, #0]
   b7c62:	6800      	ldr	r0, [r0, #0]
   b7c64:	ab03      	add	r3, sp, #12
   b7c66:	f241 020b 	movw	r2, #4107	; 0x100b
   b7c6a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7c6e:	f7fe ff85 	bl	b6b7c <sock_setsockopt>
   b7c72:	2800      	cmp	r0, #0
   b7c74:	d1db      	bne.n	b7c2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7c76:	221c      	movs	r2, #28
   b7c78:	2100      	movs	r1, #0
   b7c7a:	a803      	add	r0, sp, #12
   b7c7c:	f000 fc44 	bl	b8508 <memset>
    if (ip.version() == 4) {
   b7c80:	7d23      	ldrb	r3, [r4, #20]
   b7c82:	2b04      	cmp	r3, #4
   b7c84:	d11d      	bne.n	b7cc2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7c86:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7c8a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7c8c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7c90:	f7fe fed4 	bl	b6a3c <inet_htons>
   b7c94:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7c98:	6860      	ldr	r0, [r4, #4]
   b7c9a:	f7fe fec7 	bl	b6a2c <inet_htonl>
   b7c9e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7ca0:	696b      	ldr	r3, [r5, #20]
   b7ca2:	221c      	movs	r2, #28
   b7ca4:	6818      	ldr	r0, [r3, #0]
   b7ca6:	a903      	add	r1, sp, #12
   b7ca8:	f7fe ff78 	bl	b6b9c <sock_connect>
   b7cac:	2800      	cmp	r0, #0
   b7cae:	d1be      	bne.n	b7c2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7cb0:	3404      	adds	r4, #4
   b7cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7cb4:	696d      	ldr	r5, [r5, #20]
   b7cb6:	358c      	adds	r5, #140	; 0x8c
   b7cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7cba:	6823      	ldr	r3, [r4, #0]
   b7cbc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7cbe:	2401      	movs	r4, #1
   b7cc0:	e7ba      	b.n	b7c38 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7cc2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7cc6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7cc8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7ccc:	f7fe feb6 	bl	b6a3c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7cd0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7cd2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7cd6:	1d23      	adds	r3, r4, #4
   b7cd8:	f104 0714 	add.w	r7, r4, #20
   b7cdc:	6818      	ldr	r0, [r3, #0]
   b7cde:	6859      	ldr	r1, [r3, #4]
   b7ce0:	4632      	mov	r2, r6
   b7ce2:	c203      	stmia	r2!, {r0, r1}
   b7ce4:	3308      	adds	r3, #8
   b7ce6:	42bb      	cmp	r3, r7
   b7ce8:	4616      	mov	r6, r2
   b7cea:	d1f7      	bne.n	b7cdc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7cec:	e7d8      	b.n	b7ca0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7cf0 <_ZN9TCPClient9availableEv>:
{
   b7cf0:	b530      	push	{r4, r5, lr}
   b7cf2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7cf4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7cf8:	b08b      	sub	sp, #44	; 0x2c
   b7cfa:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7cfc:	b12b      	cbz	r3, b7d0a <_ZN9TCPClient9availableEv+0x1a>
   b7cfe:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7d02:	429a      	cmp	r2, r3
   b7d04:	d101      	bne.n	b7d0a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7d06:	f7ff ff6f 	bl	b7be8 <_ZN9TCPClient12flush_bufferEv>
   b7d0a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7d0c:	6808      	ldr	r0, [r1, #0]
   b7d0e:	2800      	cmp	r0, #0
   b7d10:	db18      	blt.n	b7d44 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7d12:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7d16:	2d7f      	cmp	r5, #127	; 0x7f
   b7d18:	d814      	bhi.n	b7d44 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7d1a:	3104      	adds	r1, #4
   b7d1c:	2308      	movs	r3, #8
   b7d1e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7d22:	4429      	add	r1, r5
   b7d24:	f7fe ff42 	bl	b6bac <sock_recv>
            if (ret > 0) {
   b7d28:	2800      	cmp	r0, #0
   b7d2a:	dd13      	ble.n	b7d54 <_ZN9TCPClient9availableEv+0x64>
   b7d2c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7d2e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d32:	b90a      	cbnz	r2, b7d38 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7d34:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7d38:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7d3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d3e:	4410      	add	r0, r2
   b7d40:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7d44:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7d46:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7d4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7d4e:	1ac0      	subs	r0, r0, r3
   b7d50:	b00b      	add	sp, #44	; 0x2c
   b7d52:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7d54:	f7ff f88e 	bl	b6e74 <__errno>
   b7d58:	6803      	ldr	r3, [r0, #0]
   b7d5a:	2b0b      	cmp	r3, #11
   b7d5c:	d0f2      	beq.n	b7d44 <_ZN9TCPClient9availableEv+0x54>
   b7d5e:	f7ff f889 	bl	b6e74 <__errno>
   b7d62:	6803      	ldr	r3, [r0, #0]
   b7d64:	2b0b      	cmp	r3, #11
   b7d66:	d0ed      	beq.n	b7d44 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7d68:	2320      	movs	r3, #32
   b7d6a:	2500      	movs	r5, #0
   b7d6c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7d70:	f7ff f880 	bl	b6e74 <__errno>
   b7d74:	6803      	ldr	r3, [r0, #0]
   b7d76:	9301      	str	r3, [sp, #4]
   b7d78:	4b08      	ldr	r3, [pc, #32]	; (b7d9c <_ZN9TCPClient9availableEv+0xac>)
   b7d7a:	4909      	ldr	r1, [pc, #36]	; (b7da0 <_ZN9TCPClient9availableEv+0xb0>)
   b7d7c:	9300      	str	r3, [sp, #0]
   b7d7e:	aa02      	add	r2, sp, #8
   b7d80:	462b      	mov	r3, r5
   b7d82:	2032      	movs	r0, #50	; 0x32
   b7d84:	f7fe ffa2 	bl	b6ccc <log_message>
                    sock_close(d_->sock);
   b7d88:	6963      	ldr	r3, [r4, #20]
   b7d8a:	6818      	ldr	r0, [r3, #0]
   b7d8c:	f7fe fefe 	bl	b6b8c <sock_close>
   b7d90:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7d92:	f04f 32ff 	mov.w	r2, #4294967295
   b7d96:	601a      	str	r2, [r3, #0]
   b7d98:	e7d4      	b.n	b7d44 <_ZN9TCPClient9availableEv+0x54>
   b7d9a:	bf00      	nop
   b7d9c:	000b995f 	.word	0x000b995f
   b7da0:	000b9958 	.word	0x000b9958

000b7da4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7da4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7da6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7da8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7daa:	6818      	ldr	r0, [r3, #0]
   b7dac:	2800      	cmp	r0, #0
   b7dae:	db01      	blt.n	b7db4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7db0:	f7fe feec 	bl	b6b8c <sock_close>
   b7db4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7db6:	f04f 32ff 	mov.w	r2, #4294967295
   b7dba:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7dbc:	6960      	ldr	r0, [r4, #20]
   b7dbe:	2211      	movs	r2, #17
   b7dc0:	2100      	movs	r1, #0
   b7dc2:	308c      	adds	r0, #140	; 0x8c
   b7dc4:	f000 fba0 	bl	b8508 <memset>
    flush_buffer();
   b7dc8:	4620      	mov	r0, r4
}
   b7dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7dce:	f7ff bf0b 	b.w	b7be8 <_ZN9TCPClient12flush_bufferEv>

000b7dd2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7dd2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7dd4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7dd6:	4604      	mov	r4, r0
          total(0) {
   b7dd8:	6001      	str	r1, [r0, #0]
   b7dda:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7dde:	3088      	adds	r0, #136	; 0x88
   b7de0:	f7ff fbea 	bl	b75b8 <_ZN9IPAddressC1Ev>
}
   b7de4:	4620      	mov	r0, r4
   b7de6:	bd10      	pop	{r4, pc}

000b7de8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7dea:	2300      	movs	r3, #0
   b7dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7df0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7df4:	4a0e      	ldr	r2, [pc, #56]	; (b7e30 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7df6:	6103      	str	r3, [r0, #16]
   b7df8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7dfa:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7dfc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7dfe:	20ac      	movs	r0, #172	; 0xac
   b7e00:	9101      	str	r1, [sp, #4]
   b7e02:	f7fc f946 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7e06:	1e05      	subs	r5, r0, #0
   b7e08:	f105 060c 	add.w	r6, r5, #12
   b7e0c:	d008      	beq.n	b7e20 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7e0e:	2301      	movs	r3, #1
   b7e10:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7e14:	4b07      	ldr	r3, [pc, #28]	; (b7e34 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7e16:	9901      	ldr	r1, [sp, #4]
   b7e18:	602b      	str	r3, [r5, #0]
   b7e1a:	4630      	mov	r0, r6
   b7e1c:	f7ff ffd9 	bl	b7dd2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7e20:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7e22:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7e26:	f7ff fedf 	bl	b7be8 <_ZN9TCPClient12flush_bufferEv>
}
   b7e2a:	b002      	add	sp, #8
   b7e2c:	bd70      	pop	{r4, r5, r6, pc}
   b7e2e:	bf00      	nop
   b7e30:	000b9994 	.word	0x000b9994
   b7e34:	000b9978 	.word	0x000b9978

000b7e38 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7e38:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7e3a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7e3e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7e40:	f7ff ffd2 	bl	b7de8 <_ZN9TCPClientC1Ei>
}
   b7e44:	4620      	mov	r0, r4
   b7e46:	bd10      	pop	{r4, pc}

000b7e48 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7e48:	b510      	push	{r4, lr}
   b7e4a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7e4c:	6800      	ldr	r0, [r0, #0]
   b7e4e:	2800      	cmp	r0, #0
   b7e50:	db01      	blt.n	b7e56 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7e52:	f7fe fe9b 	bl	b6b8c <sock_close>
    }
}
   b7e56:	4620      	mov	r0, r4
   b7e58:	bd10      	pop	{r4, pc}

000b7e5a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7e5a:	300c      	adds	r0, #12
   b7e5c:	f7ff bff4 	b.w	b7e48 <_ZN9TCPClient4DataD1Ev>

000b7e60 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7e60:	2200      	movs	r2, #0
   b7e62:	6840      	ldr	r0, [r0, #4]
   b7e64:	4611      	mov	r1, r2
   b7e66:	f7fe bf7d 	b.w	b6d64 <network_ready>

000b7e6a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7e6a:	2200      	movs	r2, #0
   b7e6c:	6840      	ldr	r0, [r0, #4]
   b7e6e:	4611      	mov	r1, r2
   b7e70:	f7fe bf98 	b.w	b6da4 <network_listening>

000b7e74 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7e74:	2200      	movs	r2, #0
   b7e76:	6840      	ldr	r0, [r0, #4]
   b7e78:	4611      	mov	r1, r2
   b7e7a:	f7fe bfa3 	b.w	b6dc4 <network_get_listen_timeout>

000b7e7e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7e7e:	6840      	ldr	r0, [r0, #4]
   b7e80:	2200      	movs	r2, #0
   b7e82:	f7fe bf97 	b.w	b6db4 <network_set_listen_timeout>

000b7e86 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7e86:	6840      	ldr	r0, [r0, #4]
   b7e88:	2200      	movs	r2, #0
   b7e8a:	f081 0101 	eor.w	r1, r1, #1
   b7e8e:	f7fe bf81 	b.w	b6d94 <network_listen>

000b7e92 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7e92:	2300      	movs	r3, #0
   b7e94:	6840      	ldr	r0, [r0, #4]
   b7e96:	461a      	mov	r2, r3
   b7e98:	4619      	mov	r1, r3
   b7e9a:	f7fe bf73 	b.w	b6d84 <network_off>

000b7e9e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7e9e:	2300      	movs	r3, #0
   b7ea0:	6840      	ldr	r0, [r0, #4]
   b7ea2:	461a      	mov	r2, r3
   b7ea4:	4619      	mov	r1, r3
   b7ea6:	f7fe bf65 	b.w	b6d74 <network_on>

000b7eaa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7eaa:	2200      	movs	r2, #0
   b7eac:	6840      	ldr	r0, [r0, #4]
   b7eae:	4611      	mov	r1, r2
   b7eb0:	f7fe bf48 	b.w	b6d44 <network_connecting>

000b7eb4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7eb4:	6840      	ldr	r0, [r0, #4]
   b7eb6:	2200      	movs	r2, #0
   b7eb8:	2102      	movs	r1, #2
   b7eba:	f7fe bf4b 	b.w	b6d54 <network_disconnect>

000b7ebe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7ebe:	2300      	movs	r3, #0
   b7ec0:	6840      	ldr	r0, [r0, #4]
   b7ec2:	461a      	mov	r2, r3
   b7ec4:	f7fe bf36 	b.w	b6d34 <network_connect>

000b7ec8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7ec8:	4b02      	ldr	r3, [pc, #8]	; (b7ed4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7eca:	2204      	movs	r2, #4
   b7ecc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7ece:	4a02      	ldr	r2, [pc, #8]	; (b7ed8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7ed0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7ed2:	4770      	bx	lr
   b7ed4:	2003e718 	.word	0x2003e718
   b7ed8:	000b99e0 	.word	0x000b99e0

000b7edc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7edc:	2300      	movs	r3, #0
   b7ede:	6840      	ldr	r0, [r0, #4]
   b7ee0:	461a      	mov	r2, r3
   b7ee2:	f7fe bf27 	b.w	b6d34 <network_connect>

000b7ee6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7ee6:	6840      	ldr	r0, [r0, #4]
   b7ee8:	2200      	movs	r2, #0
   b7eea:	2102      	movs	r1, #2
   b7eec:	f7fe bf32 	b.w	b6d54 <network_disconnect>

000b7ef0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7ef0:	2200      	movs	r2, #0
   b7ef2:	6840      	ldr	r0, [r0, #4]
   b7ef4:	4611      	mov	r1, r2
   b7ef6:	f7fe bf25 	b.w	b6d44 <network_connecting>

000b7efa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7efa:	2200      	movs	r2, #0
   b7efc:	6840      	ldr	r0, [r0, #4]
   b7efe:	4611      	mov	r1, r2
   b7f00:	f7fe bf30 	b.w	b6d64 <network_ready>

000b7f04 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7f04:	2300      	movs	r3, #0
   b7f06:	6840      	ldr	r0, [r0, #4]
   b7f08:	461a      	mov	r2, r3
   b7f0a:	4619      	mov	r1, r3
   b7f0c:	f7fe bf32 	b.w	b6d74 <network_on>

000b7f10 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7f10:	2300      	movs	r3, #0
   b7f12:	6840      	ldr	r0, [r0, #4]
   b7f14:	461a      	mov	r2, r3
   b7f16:	4619      	mov	r1, r3
   b7f18:	f7fe bf34 	b.w	b6d84 <network_off>

000b7f1c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7f1c:	6840      	ldr	r0, [r0, #4]
   b7f1e:	2100      	movs	r1, #0
   b7f20:	f7fe bf58 	b.w	b6dd4 <network_is_on>

000b7f24 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7f24:	6840      	ldr	r0, [r0, #4]
   b7f26:	2100      	movs	r1, #0
   b7f28:	f7fe bf5c 	b.w	b6de4 <network_is_off>

000b7f2c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7f2c:	6840      	ldr	r0, [r0, #4]
   b7f2e:	2200      	movs	r2, #0
   b7f30:	f081 0101 	eor.w	r1, r1, #1
   b7f34:	f7fe bf2e 	b.w	b6d94 <network_listen>

000b7f38 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7f38:	6840      	ldr	r0, [r0, #4]
   b7f3a:	2200      	movs	r2, #0
   b7f3c:	f7fe bf3a 	b.w	b6db4 <network_set_listen_timeout>

000b7f40 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7f40:	2200      	movs	r2, #0
   b7f42:	6840      	ldr	r0, [r0, #4]
   b7f44:	4611      	mov	r1, r2
   b7f46:	f7fe bf3d 	b.w	b6dc4 <network_get_listen_timeout>

000b7f4a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7f4a:	2200      	movs	r2, #0
   b7f4c:	6840      	ldr	r0, [r0, #4]
   b7f4e:	4611      	mov	r1, r2
   b7f50:	f7fe bf28 	b.w	b6da4 <network_listening>

000b7f54 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7f58:	b095      	sub	sp, #84	; 0x54
   b7f5a:	4614      	mov	r4, r2
   b7f5c:	460d      	mov	r5, r1
   b7f5e:	4607      	mov	r7, r0
    IPAddress addr;
   b7f60:	f7ff fb2a 	bl	b75b8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7f64:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7f66:	221c      	movs	r2, #28
   b7f68:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7f6a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7f6c:	f000 facc 	bl	b8508 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7f70:	2340      	movs	r3, #64	; 0x40
   b7f72:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7f74:	4620      	mov	r0, r4
   b7f76:	466b      	mov	r3, sp
   b7f78:	aa0c      	add	r2, sp, #48	; 0x30
   b7f7a:	2100      	movs	r1, #0
   b7f7c:	f7fe fcbe 	bl	b68fc <netdb_getaddrinfo>
    if (!r) {
   b7f80:	4604      	mov	r4, r0
   b7f82:	2800      	cmp	r0, #0
   b7f84:	d14b      	bne.n	b801e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7f86:	4602      	mov	r2, r0
   b7f88:	2101      	movs	r1, #1
   b7f8a:	6868      	ldr	r0, [r5, #4]
   b7f8c:	f7fe feea 	bl	b6d64 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f90:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7f92:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f94:	4622      	mov	r2, r4
   b7f96:	6868      	ldr	r0, [r5, #4]
   b7f98:	f7fe fee4 	bl	b6d64 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f9c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f9e:	4681      	mov	r9, r0
        bool ok = false;
   b7fa0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7fa2:	2e00      	cmp	r6, #0
   b7fa4:	d03b      	beq.n	b801e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7fa6:	2900      	cmp	r1, #0
   b7fa8:	d139      	bne.n	b801e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7faa:	6873      	ldr	r3, [r6, #4]
   b7fac:	2b02      	cmp	r3, #2
   b7fae:	d003      	beq.n	b7fb8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7fb0:	2b0a      	cmp	r3, #10
   b7fb2:	d011      	beq.n	b7fd8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7fb4:	69f6      	ldr	r6, [r6, #28]
   b7fb6:	e7f4      	b.n	b7fa2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7fb8:	f1b8 0f00 	cmp.w	r8, #0
   b7fbc:	d0fa      	beq.n	b7fb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7fbe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7fc0:	a806      	add	r0, sp, #24
   b7fc2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7fc4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7fc6:	f7ff fb47 	bl	b7658 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7fcc:	1d3c      	adds	r4, r7, #4
   b7fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7fd0:	682b      	ldr	r3, [r5, #0]
   b7fd2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7fd4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7fd6:	e7ed      	b.n	b7fb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7fd8:	f1b9 0f00 	cmp.w	r9, #0
   b7fdc:	d0ea      	beq.n	b7fb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7fde:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7fe0:	2210      	movs	r2, #16
   b7fe2:	a801      	add	r0, sp, #4
   b7fe4:	f000 fa90 	bl	b8508 <memset>
                    a.v = 6;
   b7fe8:	2306      	movs	r3, #6
   b7fea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7fee:	ad01      	add	r5, sp, #4
   b7ff0:	f104 0308 	add.w	r3, r4, #8
   b7ff4:	3418      	adds	r4, #24
   b7ff6:	6818      	ldr	r0, [r3, #0]
   b7ff8:	6859      	ldr	r1, [r3, #4]
   b7ffa:	462a      	mov	r2, r5
   b7ffc:	c203      	stmia	r2!, {r0, r1}
   b7ffe:	3308      	adds	r3, #8
   b8000:	42a3      	cmp	r3, r4
   b8002:	4615      	mov	r5, r2
   b8004:	d1f7      	bne.n	b7ff6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8006:	a901      	add	r1, sp, #4
   b8008:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b800a:	ad07      	add	r5, sp, #28
   b800c:	f7ff fae2 	bl	b75d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8012:	1d3c      	adds	r4, r7, #4
   b8014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8016:	682b      	ldr	r3, [r5, #0]
   b8018:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b801a:	4649      	mov	r1, r9
   b801c:	e7ca      	b.n	b7fb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b801e:	9800      	ldr	r0, [sp, #0]
   b8020:	f7fe fc64 	bl	b68ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8024:	4638      	mov	r0, r7
   b8026:	b015      	add	sp, #84	; 0x54
   b8028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b802c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b802c:	4b02      	ldr	r3, [pc, #8]	; (b8038 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b802e:	4a03      	ldr	r2, [pc, #12]	; (b803c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8030:	601a      	str	r2, [r3, #0]
   b8032:	2200      	movs	r2, #0
   b8034:	605a      	str	r2, [r3, #4]

} // spark
   b8036:	4770      	bx	lr
   b8038:	2003e720 	.word	0x2003e720
   b803c:	000b9a1c 	.word	0x000b9a1c

000b8040 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8040:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8042:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8044:	d902      	bls.n	b804c <pinAvailable+0xc>
    return false;
   b8046:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8048:	b002      	add	sp, #8
   b804a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b804c:	f1a0 030b 	sub.w	r3, r0, #11
   b8050:	2b02      	cmp	r3, #2
   b8052:	d81a      	bhi.n	b808a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8054:	4c17      	ldr	r4, [pc, #92]	; (b80b4 <pinAvailable+0x74>)
   b8056:	7821      	ldrb	r1, [r4, #0]
   b8058:	f3bf 8f5b 	dmb	ish
   b805c:	f011 0101 	ands.w	r1, r1, #1
   b8060:	d10b      	bne.n	b807a <pinAvailable+0x3a>
   b8062:	4620      	mov	r0, r4
   b8064:	9101      	str	r1, [sp, #4]
   b8066:	f7fc f829 	bl	b40bc <__cxa_guard_acquire>
   b806a:	9901      	ldr	r1, [sp, #4]
   b806c:	b128      	cbz	r0, b807a <pinAvailable+0x3a>
   b806e:	4812      	ldr	r0, [pc, #72]	; (b80b8 <pinAvailable+0x78>)
   b8070:	f7fe ff5c 	bl	b6f2c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8074:	4620      	mov	r0, r4
   b8076:	f7fc f826 	bl	b40c6 <__cxa_guard_release>
   b807a:	4b0f      	ldr	r3, [pc, #60]	; (b80b8 <pinAvailable+0x78>)
   b807c:	7818      	ldrb	r0, [r3, #0]
   b807e:	f7fe fdc5 	bl	b6c0c <hal_spi_is_enabled>
   b8082:	2800      	cmp	r0, #0
   b8084:	d1df      	bne.n	b8046 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8086:	2001      	movs	r0, #1
   b8088:	e7de      	b.n	b8048 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b808a:	2801      	cmp	r0, #1
   b808c:	d809      	bhi.n	b80a2 <pinAvailable+0x62>
   b808e:	f000 f8e7 	bl	b8260 <_Z19__fetch_global_Wirev>
   b8092:	2100      	movs	r1, #0
   b8094:	7c00      	ldrb	r0, [r0, #16]
   b8096:	f7fe fd61 	bl	b6b5c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b809a:	f080 0001 	eor.w	r0, r0, #1
   b809e:	b2c0      	uxtb	r0, r0
   b80a0:	e7d2      	b.n	b8048 <pinAvailable+0x8>
   b80a2:	3809      	subs	r0, #9
   b80a4:	2801      	cmp	r0, #1
   b80a6:	d8ee      	bhi.n	b8086 <pinAvailable+0x46>
   b80a8:	f000 f89e 	bl	b81e8 <_Z22__fetch_global_Serial1v>
   b80ac:	7c00      	ldrb	r0, [r0, #16]
   b80ae:	f7fe fcf5 	bl	b6a9c <hal_usart_is_enabled>
   b80b2:	e7f2      	b.n	b809a <pinAvailable+0x5a>
   b80b4:	2003e6b8 	.word	0x2003e6b8
   b80b8:	2003e6bc 	.word	0x2003e6bc

000b80bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b80bc:	2823      	cmp	r0, #35	; 0x23
{
   b80be:	b538      	push	{r3, r4, r5, lr}
   b80c0:	4604      	mov	r4, r0
   b80c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b80c4:	d80a      	bhi.n	b80dc <pinMode+0x20>
   b80c6:	29ff      	cmp	r1, #255	; 0xff
   b80c8:	d008      	beq.n	b80dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b80ca:	f7ff ffb9 	bl	b8040 <pinAvailable>
   b80ce:	b128      	cbz	r0, b80dc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b80d0:	4629      	mov	r1, r5
   b80d2:	4620      	mov	r0, r4
}
   b80d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b80d8:	f7fe bc20 	b.w	b691c <HAL_Pin_Mode>
}
   b80dc:	bd38      	pop	{r3, r4, r5, pc}

000b80de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b80de:	b538      	push	{r3, r4, r5, lr}
   b80e0:	4604      	mov	r4, r0
   b80e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b80e4:	f7fe fc22 	bl	b692c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b80e8:	28ff      	cmp	r0, #255	; 0xff
   b80ea:	d010      	beq.n	b810e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b80ec:	2806      	cmp	r0, #6
   b80ee:	d804      	bhi.n	b80fa <digitalWrite+0x1c>
   b80f0:	234d      	movs	r3, #77	; 0x4d
   b80f2:	fa23 f000 	lsr.w	r0, r3, r0
   b80f6:	07c3      	lsls	r3, r0, #31
   b80f8:	d409      	bmi.n	b810e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b80fa:	4620      	mov	r0, r4
   b80fc:	f7ff ffa0 	bl	b8040 <pinAvailable>
   b8100:	b128      	cbz	r0, b810e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8102:	4629      	mov	r1, r5
   b8104:	4620      	mov	r0, r4
}
   b8106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b810a:	f7fe bc17 	b.w	b693c <HAL_GPIO_Write>
}
   b810e:	bd38      	pop	{r3, r4, r5, pc}

000b8110 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b8110:	b510      	push	{r4, lr}
   b8112:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8114:	f7fe fc0a 	bl	b692c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8118:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b811a:	b2db      	uxtb	r3, r3
   b811c:	2b01      	cmp	r3, #1
   b811e:	d908      	bls.n	b8132 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8120:	4620      	mov	r0, r4
   b8122:	f7ff ff8d 	bl	b8040 <pinAvailable>
   b8126:	b120      	cbz	r0, b8132 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8128:	4620      	mov	r0, r4
}
   b812a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b812e:	f7fe bc0d 	b.w	b694c <HAL_GPIO_Read>
}
   b8132:	2000      	movs	r0, #0
   b8134:	bd10      	pop	{r4, pc}

000b8136 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8136:	280d      	cmp	r0, #13
{
   b8138:	b510      	push	{r4, lr}
   b813a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b813c:	bf9c      	itt	ls
   b813e:	340e      	addls	r4, #14
   b8140:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8142:	4620      	mov	r0, r4
   b8144:	f7ff ff7c 	bl	b8040 <pinAvailable>
   b8148:	b150      	cbz	r0, b8160 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b814a:	2103      	movs	r1, #3
   b814c:	4620      	mov	r0, r4
   b814e:	f7fe fbdd 	bl	b690c <HAL_Validate_Pin_Function>
   b8152:	2803      	cmp	r0, #3
   b8154:	d104      	bne.n	b8160 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8156:	4620      	mov	r0, r4
}
   b8158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b815c:	f7fe bc06 	b.w	b696c <hal_adc_read>
}
   b8160:	2000      	movs	r0, #0
   b8162:	bd10      	pop	{r4, pc}

000b8164 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b8164:	b538      	push	{r3, r4, r5, lr}
   b8166:	4604      	mov	r4, r0
   b8168:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b816a:	f7ff ff69 	bl	b8040 <pinAvailable>
   b816e:	b1f0      	cbz	r0, b81ae <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b8170:	2104      	movs	r1, #4
   b8172:	4620      	mov	r0, r4
   b8174:	f7fe fbca 	bl	b690c <HAL_Validate_Pin_Function>
   b8178:	2804      	cmp	r0, #4
   b817a:	d105      	bne.n	b8188 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b817c:	b2a9      	uxth	r1, r5
   b817e:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b8180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8184:	f7fe bbea 	b.w	b695c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b8188:	2102      	movs	r1, #2
   b818a:	4620      	mov	r0, r4
   b818c:	f7fe fbbe 	bl	b690c <HAL_Validate_Pin_Function>
   b8190:	2802      	cmp	r0, #2
   b8192:	d10c      	bne.n	b81ae <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b8194:	4620      	mov	r0, r4
   b8196:	f7fe fbc9 	bl	b692c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b819a:	2801      	cmp	r0, #1
   b819c:	d001      	beq.n	b81a2 <_Z11analogWritetm+0x3e>
   b819e:	2804      	cmp	r0, #4
   b81a0:	d105      	bne.n	b81ae <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b81a2:	4629      	mov	r1, r5
   b81a4:	4620      	mov	r0, r4
}
   b81a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b81aa:	f7fe bbe7 	b.w	b697c <hal_pwm_write_ext>
}
   b81ae:	bd38      	pop	{r3, r4, r5, pc}

000b81b0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b81b0:	4770      	bx	lr
	...

000b81b4 <_Z20acquireSerial1Bufferv>:
{
   b81b4:	b538      	push	{r3, r4, r5, lr}
   b81b6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b81b8:	2514      	movs	r5, #20
   b81ba:	462a      	mov	r2, r5
   b81bc:	2100      	movs	r1, #0
   b81be:	f000 f9a3 	bl	b8508 <memset>
   b81c2:	8025      	strh	r5, [r4, #0]
   b81c4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81c6:	4907      	ldr	r1, [pc, #28]	; (b81e4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b81c8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81ca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b81cc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81ce:	f000 f86b 	bl	b82a8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81d2:	4904      	ldr	r1, [pc, #16]	; (b81e4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b81d4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81d6:	4628      	mov	r0, r5
   b81d8:	f000 f866 	bl	b82a8 <_ZnajRKSt9nothrow_t>
    };
   b81dc:	60e0      	str	r0, [r4, #12]
}
   b81de:	4620      	mov	r0, r4
   b81e0:	bd38      	pop	{r3, r4, r5, pc}
   b81e2:	bf00      	nop
   b81e4:	000b9a50 	.word	0x000b9a50

000b81e8 <_Z22__fetch_global_Serial1v>:
{
   b81e8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b81ea:	4d0e      	ldr	r5, [pc, #56]	; (b8224 <_Z22__fetch_global_Serial1v+0x3c>)
   b81ec:	7829      	ldrb	r1, [r5, #0]
   b81ee:	f3bf 8f5b 	dmb	ish
   b81f2:	f011 0401 	ands.w	r4, r1, #1
{
   b81f6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b81f8:	d111      	bne.n	b821e <_Z22__fetch_global_Serial1v+0x36>
   b81fa:	4628      	mov	r0, r5
   b81fc:	f7fb ff5e 	bl	b40bc <__cxa_guard_acquire>
   b8200:	b168      	cbz	r0, b821e <_Z22__fetch_global_Serial1v+0x36>
   b8202:	a801      	add	r0, sp, #4
   b8204:	f7ff ffd6 	bl	b81b4 <_Z20acquireSerial1Bufferv>
   b8208:	aa01      	add	r2, sp, #4
   b820a:	4621      	mov	r1, r4
   b820c:	4806      	ldr	r0, [pc, #24]	; (b8228 <_Z22__fetch_global_Serial1v+0x40>)
   b820e:	f7ff faf1 	bl	b77f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8212:	4628      	mov	r0, r5
   b8214:	f7fb ff57 	bl	b40c6 <__cxa_guard_release>
   b8218:	4804      	ldr	r0, [pc, #16]	; (b822c <_Z22__fetch_global_Serial1v+0x44>)
   b821a:	f000 f959 	bl	b84d0 <atexit>
    return serial1;
}
   b821e:	4802      	ldr	r0, [pc, #8]	; (b8228 <_Z22__fetch_global_Serial1v+0x40>)
   b8220:	b007      	add	sp, #28
   b8222:	bd30      	pop	{r4, r5, pc}
   b8224:	2003e728 	.word	0x2003e728
   b8228:	2003e72c 	.word	0x2003e72c
   b822c:	000b81b1 	.word	0x000b81b1

000b8230 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8230:	4770      	bx	lr
	...

000b8234 <_Z17acquireWireBufferv>:
{
   b8234:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8236:	2520      	movs	r5, #32
   b8238:	2314      	movs	r3, #20
{
   b823a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b823c:	6003      	str	r3, [r0, #0]
   b823e:	6085      	str	r5, [r0, #8]
   b8240:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8242:	4906      	ldr	r1, [pc, #24]	; (b825c <_Z17acquireWireBufferv+0x28>)
   b8244:	4628      	mov	r0, r5
   b8246:	f000 f82f 	bl	b82a8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b824a:	4904      	ldr	r1, [pc, #16]	; (b825c <_Z17acquireWireBufferv+0x28>)
	};
   b824c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b824e:	4628      	mov	r0, r5
   b8250:	f000 f82a 	bl	b82a8 <_ZnajRKSt9nothrow_t>
	};
   b8254:	60e0      	str	r0, [r4, #12]
}
   b8256:	4620      	mov	r0, r4
   b8258:	bd38      	pop	{r3, r4, r5, pc}
   b825a:	bf00      	nop
   b825c:	000b9a50 	.word	0x000b9a50

000b8260 <_Z19__fetch_global_Wirev>:
{
   b8260:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8262:	4d0e      	ldr	r5, [pc, #56]	; (b829c <_Z19__fetch_global_Wirev+0x3c>)
   b8264:	7829      	ldrb	r1, [r5, #0]
   b8266:	f3bf 8f5b 	dmb	ish
   b826a:	f011 0401 	ands.w	r4, r1, #1
{
   b826e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8270:	d111      	bne.n	b8296 <_Z19__fetch_global_Wirev+0x36>
   b8272:	4628      	mov	r0, r5
   b8274:	f7fb ff22 	bl	b40bc <__cxa_guard_acquire>
   b8278:	b168      	cbz	r0, b8296 <_Z19__fetch_global_Wirev+0x36>
   b827a:	a801      	add	r0, sp, #4
   b827c:	f7ff ffda 	bl	b8234 <_Z17acquireWireBufferv>
   b8280:	aa01      	add	r2, sp, #4
   b8282:	4621      	mov	r1, r4
   b8284:	4806      	ldr	r0, [pc, #24]	; (b82a0 <_Z19__fetch_global_Wirev+0x40>)
   b8286:	f7ff faf5 	bl	b7874 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b828a:	4628      	mov	r0, r5
   b828c:	f7fb ff1b 	bl	b40c6 <__cxa_guard_release>
   b8290:	4804      	ldr	r0, [pc, #16]	; (b82a4 <_Z19__fetch_global_Wirev+0x44>)
   b8292:	f000 f91d 	bl	b84d0 <atexit>
	return wire;
}
   b8296:	4802      	ldr	r0, [pc, #8]	; (b82a0 <_Z19__fetch_global_Wirev+0x40>)
   b8298:	b007      	add	sp, #28
   b829a:	bd30      	pop	{r4, r5, pc}
   b829c:	2003e744 	.word	0x2003e744
   b82a0:	2003e748 	.word	0x2003e748
   b82a4:	000b8231 	.word	0x000b8231

000b82a8 <_ZnajRKSt9nothrow_t>:
   b82a8:	f7fb bef5 	b.w	b4096 <_Znaj>

000b82ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b82ac:	4901      	ldr	r1, [pc, #4]	; (b82b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b82ae:	f000 b8f9 	b.w	b84a4 <_ZNKSt9type_infoeqERKS_>
   b82b2:	bf00      	nop
   b82b4:	000b9a6c 	.word	0x000b9a6c

000b82b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b82b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b82ba:	2400      	movs	r4, #0
   b82bc:	2310      	movs	r3, #16
   b82be:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b82c2:	6803      	ldr	r3, [r0, #0]
   b82c4:	4615      	mov	r5, r2
   b82c6:	699e      	ldr	r6, [r3, #24]
   b82c8:	6812      	ldr	r2, [r2, #0]
   b82ca:	466b      	mov	r3, sp
   b82cc:	e9cd 4400 	strd	r4, r4, [sp]
   b82d0:	47b0      	blx	r6
   b82d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b82d6:	f003 0306 	and.w	r3, r3, #6
   b82da:	2b06      	cmp	r3, #6
   b82dc:	bf03      	ittte	eq
   b82de:	9b00      	ldreq	r3, [sp, #0]
   b82e0:	602b      	streq	r3, [r5, #0]
   b82e2:	2001      	moveq	r0, #1
   b82e4:	4620      	movne	r0, r4
   b82e6:	b004      	add	sp, #16
   b82e8:	bd70      	pop	{r4, r5, r6, pc}

000b82ea <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b82ea:	9800      	ldr	r0, [sp, #0]
   b82ec:	4290      	cmp	r0, r2
   b82ee:	bf14      	ite	ne
   b82f0:	2001      	movne	r0, #1
   b82f2:	2006      	moveq	r0, #6
   b82f4:	4770      	bx	lr
	...

000b82f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b82f8:	b510      	push	{r4, lr}
   b82fa:	4b03      	ldr	r3, [pc, #12]	; (b8308 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b82fc:	6003      	str	r3, [r0, #0]
   b82fe:	4604      	mov	r4, r0
   b8300:	f000 f8cd 	bl	b849e <_ZNSt9type_infoD1Ev>
   b8304:	4620      	mov	r0, r4
   b8306:	bd10      	pop	{r4, pc}
   b8308:	000b9aac 	.word	0x000b9aac

000b830c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b830c:	b510      	push	{r4, lr}
   b830e:	4604      	mov	r4, r0
   b8310:	f7ff fff2 	bl	b82f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8314:	4620      	mov	r0, r4
   b8316:	2108      	movs	r1, #8
   b8318:	f7fb fec1 	bl	b409e <_ZdlPvj>
   b831c:	4620      	mov	r0, r4
   b831e:	bd10      	pop	{r4, pc}

000b8320 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8324:	461f      	mov	r7, r3
   b8326:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b832a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b832e:	4598      	cmp	r8, r3
   b8330:	4606      	mov	r6, r0
   b8332:	4615      	mov	r5, r2
   b8334:	d107      	bne.n	b8346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8336:	9907      	ldr	r1, [sp, #28]
   b8338:	f000 f8b4 	bl	b84a4 <_ZNKSt9type_infoeqERKS_>
   b833c:	b118      	cbz	r0, b8346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b833e:	7165      	strb	r5, [r4, #5]
   b8340:	2000      	movs	r0, #0
   b8342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8346:	4639      	mov	r1, r7
   b8348:	4630      	mov	r0, r6
   b834a:	f000 f8ab 	bl	b84a4 <_ZNKSt9type_infoeqERKS_>
   b834e:	2800      	cmp	r0, #0
   b8350:	d0f6      	beq.n	b8340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8352:	2301      	movs	r3, #1
   b8354:	f8c4 8000 	str.w	r8, [r4]
   b8358:	7125      	strb	r5, [r4, #4]
   b835a:	71a3      	strb	r3, [r4, #6]
   b835c:	e7f0      	b.n	b8340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b835e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b835e:	b538      	push	{r3, r4, r5, lr}
   b8360:	4615      	mov	r5, r2
   b8362:	461c      	mov	r4, r3
   b8364:	f000 f89e 	bl	b84a4 <_ZNKSt9type_infoeqERKS_>
   b8368:	b120      	cbz	r0, b8374 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b836a:	2308      	movs	r3, #8
   b836c:	60e3      	str	r3, [r4, #12]
   b836e:	2306      	movs	r3, #6
   b8370:	6025      	str	r5, [r4, #0]
   b8372:	7123      	strb	r3, [r4, #4]
   b8374:	bd38      	pop	{r3, r4, r5, pc}

000b8376 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8376:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8378:	4605      	mov	r5, r0
   b837a:	460c      	mov	r4, r1
   b837c:	9201      	str	r2, [sp, #4]
   b837e:	461e      	mov	r6, r3
   b8380:	f000 f890 	bl	b84a4 <_ZNKSt9type_infoeqERKS_>
   b8384:	b950      	cbnz	r0, b839c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8386:	2e03      	cmp	r6, #3
   b8388:	d808      	bhi.n	b839c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b838a:	6823      	ldr	r3, [r4, #0]
   b838c:	9a01      	ldr	r2, [sp, #4]
   b838e:	695b      	ldr	r3, [r3, #20]
   b8390:	4629      	mov	r1, r5
   b8392:	4620      	mov	r0, r4
   b8394:	b002      	add	sp, #8
   b8396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b839a:	4718      	bx	r3
   b839c:	b002      	add	sp, #8
   b839e:	bd70      	pop	{r4, r5, r6, pc}

000b83a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b83a0:	b510      	push	{r4, lr}
   b83a2:	4b03      	ldr	r3, [pc, #12]	; (b83b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b83a4:	6003      	str	r3, [r0, #0]
   b83a6:	4604      	mov	r4, r0
   b83a8:	f7ff ffa6 	bl	b82f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b83ac:	4620      	mov	r0, r4
   b83ae:	bd10      	pop	{r4, pc}
   b83b0:	000b9b0c 	.word	0x000b9b0c

000b83b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b83b4:	b510      	push	{r4, lr}
   b83b6:	4604      	mov	r4, r0
   b83b8:	f7ff fff2 	bl	b83a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b83bc:	4620      	mov	r0, r4
   b83be:	210c      	movs	r1, #12
   b83c0:	f7fb fe6d 	bl	b409e <_ZdlPvj>
   b83c4:	4620      	mov	r0, r4
   b83c6:	bd10      	pop	{r4, pc}

000b83c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b83c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b83ca:	9f08      	ldr	r7, [sp, #32]
   b83cc:	4297      	cmp	r7, r2
   b83ce:	4605      	mov	r5, r0
   b83d0:	460e      	mov	r6, r1
   b83d2:	4614      	mov	r4, r2
   b83d4:	d00a      	beq.n	b83ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b83d6:	68a8      	ldr	r0, [r5, #8]
   b83d8:	6802      	ldr	r2, [r0, #0]
   b83da:	9708      	str	r7, [sp, #32]
   b83dc:	6a15      	ldr	r5, [r2, #32]
   b83de:	4631      	mov	r1, r6
   b83e0:	4622      	mov	r2, r4
   b83e2:	46ac      	mov	ip, r5
   b83e4:	b003      	add	sp, #12
   b83e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b83ea:	4760      	bx	ip
   b83ec:	4619      	mov	r1, r3
   b83ee:	9301      	str	r3, [sp, #4]
   b83f0:	f000 f858 	bl	b84a4 <_ZNKSt9type_infoeqERKS_>
   b83f4:	9b01      	ldr	r3, [sp, #4]
   b83f6:	2800      	cmp	r0, #0
   b83f8:	d0ed      	beq.n	b83d6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b83fa:	2006      	movs	r0, #6
   b83fc:	b003      	add	sp, #12
   b83fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8400:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8404:	460d      	mov	r5, r1
   b8406:	4619      	mov	r1, r3
   b8408:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b840c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8410:	4681      	mov	r9, r0
   b8412:	4617      	mov	r7, r2
   b8414:	4698      	mov	r8, r3
   b8416:	f000 f845 	bl	b84a4 <_ZNKSt9type_infoeqERKS_>
   b841a:	b190      	cbz	r0, b8442 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b841c:	2d00      	cmp	r5, #0
   b841e:	6034      	str	r4, [r6, #0]
   b8420:	7137      	strb	r7, [r6, #4]
   b8422:	db09      	blt.n	b8438 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8424:	1961      	adds	r1, r4, r5
   b8426:	458a      	cmp	sl, r1
   b8428:	bf0c      	ite	eq
   b842a:	2106      	moveq	r1, #6
   b842c:	2101      	movne	r1, #1
   b842e:	71b1      	strb	r1, [r6, #6]
   b8430:	2000      	movs	r0, #0
   b8432:	b001      	add	sp, #4
   b8434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8438:	3502      	adds	r5, #2
   b843a:	d1f9      	bne.n	b8430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b843c:	2301      	movs	r3, #1
   b843e:	71b3      	strb	r3, [r6, #6]
   b8440:	e7f6      	b.n	b8430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8442:	4554      	cmp	r4, sl
   b8444:	d106      	bne.n	b8454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8446:	4659      	mov	r1, fp
   b8448:	4648      	mov	r0, r9
   b844a:	f000 f82b 	bl	b84a4 <_ZNKSt9type_infoeqERKS_>
   b844e:	b108      	cbz	r0, b8454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8450:	7177      	strb	r7, [r6, #5]
   b8452:	e7ed      	b.n	b8430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8454:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8458:	6803      	ldr	r3, [r0, #0]
   b845a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b845e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8462:	69dc      	ldr	r4, [r3, #28]
   b8464:	463a      	mov	r2, r7
   b8466:	4643      	mov	r3, r8
   b8468:	4629      	mov	r1, r5
   b846a:	46a4      	mov	ip, r4
   b846c:	b001      	add	sp, #4
   b846e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8472:	4760      	bx	ip

000b8474 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8478:	4607      	mov	r7, r0
   b847a:	460c      	mov	r4, r1
   b847c:	4615      	mov	r5, r2
   b847e:	461e      	mov	r6, r3
   b8480:	f7ff ff6d 	bl	b835e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8484:	b948      	cbnz	r0, b849a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8486:	68b8      	ldr	r0, [r7, #8]
   b8488:	6803      	ldr	r3, [r0, #0]
   b848a:	699f      	ldr	r7, [r3, #24]
   b848c:	462a      	mov	r2, r5
   b848e:	4633      	mov	r3, r6
   b8490:	4621      	mov	r1, r4
   b8492:	46bc      	mov	ip, r7
   b8494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8498:	4760      	bx	ip
   b849a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b849e <_ZNSt9type_infoD1Ev>:
   b849e:	4770      	bx	lr

000b84a0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b84a0:	2000      	movs	r0, #0
   b84a2:	4770      	bx	lr

000b84a4 <_ZNKSt9type_infoeqERKS_>:
   b84a4:	4281      	cmp	r1, r0
   b84a6:	b508      	push	{r3, lr}
   b84a8:	d00e      	beq.n	b84c8 <_ZNKSt9type_infoeqERKS_+0x24>
   b84aa:	6840      	ldr	r0, [r0, #4]
   b84ac:	7803      	ldrb	r3, [r0, #0]
   b84ae:	2b2a      	cmp	r3, #42	; 0x2a
   b84b0:	d00c      	beq.n	b84cc <_ZNKSt9type_infoeqERKS_+0x28>
   b84b2:	6849      	ldr	r1, [r1, #4]
   b84b4:	780b      	ldrb	r3, [r1, #0]
   b84b6:	2b2a      	cmp	r3, #42	; 0x2a
   b84b8:	bf08      	it	eq
   b84ba:	3101      	addeq	r1, #1
   b84bc:	f000 f85a 	bl	b8574 <strcmp>
   b84c0:	fab0 f080 	clz	r0, r0
   b84c4:	0940      	lsrs	r0, r0, #5
   b84c6:	bd08      	pop	{r3, pc}
   b84c8:	2001      	movs	r0, #1
   b84ca:	e7fc      	b.n	b84c6 <_ZNKSt9type_infoeqERKS_+0x22>
   b84cc:	2000      	movs	r0, #0
   b84ce:	e7fa      	b.n	b84c6 <_ZNKSt9type_infoeqERKS_+0x22>

000b84d0 <atexit>:
   b84d0:	2300      	movs	r3, #0
   b84d2:	4601      	mov	r1, r0
   b84d4:	461a      	mov	r2, r3
   b84d6:	4618      	mov	r0, r3
   b84d8:	f000 b8fe 	b.w	b86d8 <__register_exitproc>

000b84dc <atoi>:
   b84dc:	220a      	movs	r2, #10
   b84de:	2100      	movs	r1, #0
   b84e0:	f000 b8f0 	b.w	b86c4 <strtol>

000b84e4 <atol>:
   b84e4:	220a      	movs	r2, #10
   b84e6:	2100      	movs	r1, #0
   b84e8:	f000 b8ec 	b.w	b86c4 <strtol>

000b84ec <memcpy>:
   b84ec:	440a      	add	r2, r1
   b84ee:	4291      	cmp	r1, r2
   b84f0:	f100 33ff 	add.w	r3, r0, #4294967295
   b84f4:	d100      	bne.n	b84f8 <memcpy+0xc>
   b84f6:	4770      	bx	lr
   b84f8:	b510      	push	{r4, lr}
   b84fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   b84fe:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8502:	4291      	cmp	r1, r2
   b8504:	d1f9      	bne.n	b84fa <memcpy+0xe>
   b8506:	bd10      	pop	{r4, pc}

000b8508 <memset>:
   b8508:	4402      	add	r2, r0
   b850a:	4603      	mov	r3, r0
   b850c:	4293      	cmp	r3, r2
   b850e:	d100      	bne.n	b8512 <memset+0xa>
   b8510:	4770      	bx	lr
   b8512:	f803 1b01 	strb.w	r1, [r3], #1
   b8516:	e7f9      	b.n	b850c <memset+0x4>

000b8518 <srand>:
   b8518:	b538      	push	{r3, r4, r5, lr}
   b851a:	4b10      	ldr	r3, [pc, #64]	; (b855c <srand+0x44>)
   b851c:	681d      	ldr	r5, [r3, #0]
   b851e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8520:	4604      	mov	r4, r0
   b8522:	b9b3      	cbnz	r3, b8552 <srand+0x3a>
   b8524:	2018      	movs	r0, #24
   b8526:	f7fe fc7d 	bl	b6e24 <malloc>
   b852a:	4602      	mov	r2, r0
   b852c:	63a8      	str	r0, [r5, #56]	; 0x38
   b852e:	b920      	cbnz	r0, b853a <srand+0x22>
   b8530:	4b0b      	ldr	r3, [pc, #44]	; (b8560 <srand+0x48>)
   b8532:	480c      	ldr	r0, [pc, #48]	; (b8564 <srand+0x4c>)
   b8534:	2142      	movs	r1, #66	; 0x42
   b8536:	f7fe fca5 	bl	b6e84 <__assert_func>
   b853a:	490b      	ldr	r1, [pc, #44]	; (b8568 <srand+0x50>)
   b853c:	4b0b      	ldr	r3, [pc, #44]	; (b856c <srand+0x54>)
   b853e:	e9c0 1300 	strd	r1, r3, [r0]
   b8542:	4b0b      	ldr	r3, [pc, #44]	; (b8570 <srand+0x58>)
   b8544:	6083      	str	r3, [r0, #8]
   b8546:	230b      	movs	r3, #11
   b8548:	8183      	strh	r3, [r0, #12]
   b854a:	2100      	movs	r1, #0
   b854c:	2001      	movs	r0, #1
   b854e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8552:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8554:	2200      	movs	r2, #0
   b8556:	611c      	str	r4, [r3, #16]
   b8558:	615a      	str	r2, [r3, #20]
   b855a:	bd38      	pop	{r3, r4, r5, pc}
   b855c:	2003e514 	.word	0x2003e514
   b8560:	000b9b45 	.word	0x000b9b45
   b8564:	000b9b5c 	.word	0x000b9b5c
   b8568:	abcd330e 	.word	0xabcd330e
   b856c:	e66d1234 	.word	0xe66d1234
   b8570:	0005deec 	.word	0x0005deec

000b8574 <strcmp>:
   b8574:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8578:	f811 3b01 	ldrb.w	r3, [r1], #1
   b857c:	2a01      	cmp	r2, #1
   b857e:	bf28      	it	cs
   b8580:	429a      	cmpcs	r2, r3
   b8582:	d0f7      	beq.n	b8574 <strcmp>
   b8584:	1ad0      	subs	r0, r2, r3
   b8586:	4770      	bx	lr

000b8588 <strlen>:
   b8588:	4603      	mov	r3, r0
   b858a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b858e:	2a00      	cmp	r2, #0
   b8590:	d1fb      	bne.n	b858a <strlen+0x2>
   b8592:	1a18      	subs	r0, r3, r0
   b8594:	3801      	subs	r0, #1
   b8596:	4770      	bx	lr

000b8598 <strncpy>:
   b8598:	b510      	push	{r4, lr}
   b859a:	3901      	subs	r1, #1
   b859c:	4603      	mov	r3, r0
   b859e:	b132      	cbz	r2, b85ae <strncpy+0x16>
   b85a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b85a4:	f803 4b01 	strb.w	r4, [r3], #1
   b85a8:	3a01      	subs	r2, #1
   b85aa:	2c00      	cmp	r4, #0
   b85ac:	d1f7      	bne.n	b859e <strncpy+0x6>
   b85ae:	441a      	add	r2, r3
   b85b0:	2100      	movs	r1, #0
   b85b2:	4293      	cmp	r3, r2
   b85b4:	d100      	bne.n	b85b8 <strncpy+0x20>
   b85b6:	bd10      	pop	{r4, pc}
   b85b8:	f803 1b01 	strb.w	r1, [r3], #1
   b85bc:	e7f9      	b.n	b85b2 <strncpy+0x1a>
	...

000b85c0 <_strtol_l.constprop.0>:
   b85c0:	2b01      	cmp	r3, #1
   b85c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b85c6:	d001      	beq.n	b85cc <_strtol_l.constprop.0+0xc>
   b85c8:	2b24      	cmp	r3, #36	; 0x24
   b85ca:	d906      	bls.n	b85da <_strtol_l.constprop.0+0x1a>
   b85cc:	f7fe fc52 	bl	b6e74 <__errno>
   b85d0:	2316      	movs	r3, #22
   b85d2:	6003      	str	r3, [r0, #0]
   b85d4:	2000      	movs	r0, #0
   b85d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b85da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b86c0 <_strtol_l.constprop.0+0x100>
   b85de:	460d      	mov	r5, r1
   b85e0:	462e      	mov	r6, r5
   b85e2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b85e6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b85ea:	f017 0708 	ands.w	r7, r7, #8
   b85ee:	d1f7      	bne.n	b85e0 <_strtol_l.constprop.0+0x20>
   b85f0:	2c2d      	cmp	r4, #45	; 0x2d
   b85f2:	d132      	bne.n	b865a <_strtol_l.constprop.0+0x9a>
   b85f4:	782c      	ldrb	r4, [r5, #0]
   b85f6:	2701      	movs	r7, #1
   b85f8:	1cb5      	adds	r5, r6, #2
   b85fa:	2b00      	cmp	r3, #0
   b85fc:	d05b      	beq.n	b86b6 <_strtol_l.constprop.0+0xf6>
   b85fe:	2b10      	cmp	r3, #16
   b8600:	d109      	bne.n	b8616 <_strtol_l.constprop.0+0x56>
   b8602:	2c30      	cmp	r4, #48	; 0x30
   b8604:	d107      	bne.n	b8616 <_strtol_l.constprop.0+0x56>
   b8606:	782c      	ldrb	r4, [r5, #0]
   b8608:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b860c:	2c58      	cmp	r4, #88	; 0x58
   b860e:	d14d      	bne.n	b86ac <_strtol_l.constprop.0+0xec>
   b8610:	786c      	ldrb	r4, [r5, #1]
   b8612:	2310      	movs	r3, #16
   b8614:	3502      	adds	r5, #2
   b8616:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b861a:	f108 38ff 	add.w	r8, r8, #4294967295
   b861e:	f04f 0c00 	mov.w	ip, #0
   b8622:	fbb8 f9f3 	udiv	r9, r8, r3
   b8626:	4666      	mov	r6, ip
   b8628:	fb03 8a19 	mls	sl, r3, r9, r8
   b862c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8630:	f1be 0f09 	cmp.w	lr, #9
   b8634:	d816      	bhi.n	b8664 <_strtol_l.constprop.0+0xa4>
   b8636:	4674      	mov	r4, lr
   b8638:	42a3      	cmp	r3, r4
   b863a:	dd24      	ble.n	b8686 <_strtol_l.constprop.0+0xc6>
   b863c:	f1bc 0f00 	cmp.w	ip, #0
   b8640:	db1e      	blt.n	b8680 <_strtol_l.constprop.0+0xc0>
   b8642:	45b1      	cmp	r9, r6
   b8644:	d31c      	bcc.n	b8680 <_strtol_l.constprop.0+0xc0>
   b8646:	d101      	bne.n	b864c <_strtol_l.constprop.0+0x8c>
   b8648:	45a2      	cmp	sl, r4
   b864a:	db19      	blt.n	b8680 <_strtol_l.constprop.0+0xc0>
   b864c:	fb06 4603 	mla	r6, r6, r3, r4
   b8650:	f04f 0c01 	mov.w	ip, #1
   b8654:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8658:	e7e8      	b.n	b862c <_strtol_l.constprop.0+0x6c>
   b865a:	2c2b      	cmp	r4, #43	; 0x2b
   b865c:	bf04      	itt	eq
   b865e:	782c      	ldrbeq	r4, [r5, #0]
   b8660:	1cb5      	addeq	r5, r6, #2
   b8662:	e7ca      	b.n	b85fa <_strtol_l.constprop.0+0x3a>
   b8664:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8668:	f1be 0f19 	cmp.w	lr, #25
   b866c:	d801      	bhi.n	b8672 <_strtol_l.constprop.0+0xb2>
   b866e:	3c37      	subs	r4, #55	; 0x37
   b8670:	e7e2      	b.n	b8638 <_strtol_l.constprop.0+0x78>
   b8672:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8676:	f1be 0f19 	cmp.w	lr, #25
   b867a:	d804      	bhi.n	b8686 <_strtol_l.constprop.0+0xc6>
   b867c:	3c57      	subs	r4, #87	; 0x57
   b867e:	e7db      	b.n	b8638 <_strtol_l.constprop.0+0x78>
   b8680:	f04f 3cff 	mov.w	ip, #4294967295
   b8684:	e7e6      	b.n	b8654 <_strtol_l.constprop.0+0x94>
   b8686:	f1bc 0f00 	cmp.w	ip, #0
   b868a:	da05      	bge.n	b8698 <_strtol_l.constprop.0+0xd8>
   b868c:	2322      	movs	r3, #34	; 0x22
   b868e:	6003      	str	r3, [r0, #0]
   b8690:	4646      	mov	r6, r8
   b8692:	b942      	cbnz	r2, b86a6 <_strtol_l.constprop.0+0xe6>
   b8694:	4630      	mov	r0, r6
   b8696:	e79e      	b.n	b85d6 <_strtol_l.constprop.0+0x16>
   b8698:	b107      	cbz	r7, b869c <_strtol_l.constprop.0+0xdc>
   b869a:	4276      	negs	r6, r6
   b869c:	2a00      	cmp	r2, #0
   b869e:	d0f9      	beq.n	b8694 <_strtol_l.constprop.0+0xd4>
   b86a0:	f1bc 0f00 	cmp.w	ip, #0
   b86a4:	d000      	beq.n	b86a8 <_strtol_l.constprop.0+0xe8>
   b86a6:	1e69      	subs	r1, r5, #1
   b86a8:	6011      	str	r1, [r2, #0]
   b86aa:	e7f3      	b.n	b8694 <_strtol_l.constprop.0+0xd4>
   b86ac:	2430      	movs	r4, #48	; 0x30
   b86ae:	2b00      	cmp	r3, #0
   b86b0:	d1b1      	bne.n	b8616 <_strtol_l.constprop.0+0x56>
   b86b2:	2308      	movs	r3, #8
   b86b4:	e7af      	b.n	b8616 <_strtol_l.constprop.0+0x56>
   b86b6:	2c30      	cmp	r4, #48	; 0x30
   b86b8:	d0a5      	beq.n	b8606 <_strtol_l.constprop.0+0x46>
   b86ba:	230a      	movs	r3, #10
   b86bc:	e7ab      	b.n	b8616 <_strtol_l.constprop.0+0x56>
   b86be:	bf00      	nop
   b86c0:	000b9bda 	.word	0x000b9bda

000b86c4 <strtol>:
   b86c4:	4613      	mov	r3, r2
   b86c6:	460a      	mov	r2, r1
   b86c8:	4601      	mov	r1, r0
   b86ca:	4802      	ldr	r0, [pc, #8]	; (b86d4 <strtol+0x10>)
   b86cc:	6800      	ldr	r0, [r0, #0]
   b86ce:	f7ff bf77 	b.w	b85c0 <_strtol_l.constprop.0>
   b86d2:	bf00      	nop
   b86d4:	2003e514 	.word	0x2003e514

000b86d8 <__register_exitproc>:
   b86d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b86dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8798 <__register_exitproc+0xc0>
   b86e0:	4606      	mov	r6, r0
   b86e2:	f8d8 0000 	ldr.w	r0, [r8]
   b86e6:	461f      	mov	r7, r3
   b86e8:	460d      	mov	r5, r1
   b86ea:	4691      	mov	r9, r2
   b86ec:	f000 f856 	bl	b879c <__retarget_lock_acquire_recursive>
   b86f0:	4b25      	ldr	r3, [pc, #148]	; (b8788 <__register_exitproc+0xb0>)
   b86f2:	681c      	ldr	r4, [r3, #0]
   b86f4:	b934      	cbnz	r4, b8704 <__register_exitproc+0x2c>
   b86f6:	4c25      	ldr	r4, [pc, #148]	; (b878c <__register_exitproc+0xb4>)
   b86f8:	601c      	str	r4, [r3, #0]
   b86fa:	4b25      	ldr	r3, [pc, #148]	; (b8790 <__register_exitproc+0xb8>)
   b86fc:	b113      	cbz	r3, b8704 <__register_exitproc+0x2c>
   b86fe:	681b      	ldr	r3, [r3, #0]
   b8700:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8704:	6863      	ldr	r3, [r4, #4]
   b8706:	2b1f      	cmp	r3, #31
   b8708:	dd07      	ble.n	b871a <__register_exitproc+0x42>
   b870a:	f8d8 0000 	ldr.w	r0, [r8]
   b870e:	f000 f847 	bl	b87a0 <__retarget_lock_release_recursive>
   b8712:	f04f 30ff 	mov.w	r0, #4294967295
   b8716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b871a:	b34e      	cbz	r6, b8770 <__register_exitproc+0x98>
   b871c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8720:	b988      	cbnz	r0, b8746 <__register_exitproc+0x6e>
   b8722:	4b1c      	ldr	r3, [pc, #112]	; (b8794 <__register_exitproc+0xbc>)
   b8724:	b923      	cbnz	r3, b8730 <__register_exitproc+0x58>
   b8726:	f8d8 0000 	ldr.w	r0, [r8]
   b872a:	f000 f838 	bl	b879e <__retarget_lock_release>
   b872e:	e7f0      	b.n	b8712 <__register_exitproc+0x3a>
   b8730:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8734:	f7fe fb76 	bl	b6e24 <malloc>
   b8738:	2800      	cmp	r0, #0
   b873a:	d0f4      	beq.n	b8726 <__register_exitproc+0x4e>
   b873c:	2300      	movs	r3, #0
   b873e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8742:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8746:	6863      	ldr	r3, [r4, #4]
   b8748:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b874c:	2201      	movs	r2, #1
   b874e:	409a      	lsls	r2, r3
   b8750:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8754:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8758:	4313      	orrs	r3, r2
   b875a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b875e:	2e02      	cmp	r6, #2
   b8760:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8764:	bf02      	ittt	eq
   b8766:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b876a:	4313      	orreq	r3, r2
   b876c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8770:	6863      	ldr	r3, [r4, #4]
   b8772:	f8d8 0000 	ldr.w	r0, [r8]
   b8776:	1c5a      	adds	r2, r3, #1
   b8778:	3302      	adds	r3, #2
   b877a:	6062      	str	r2, [r4, #4]
   b877c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8780:	f000 f80e 	bl	b87a0 <__retarget_lock_release_recursive>
   b8784:	2000      	movs	r0, #0
   b8786:	e7c6      	b.n	b8716 <__register_exitproc+0x3e>
   b8788:	2003e7e8 	.word	0x2003e7e8
   b878c:	2003e75c 	.word	0x2003e75c
   b8790:	00000000 	.word	0x00000000
   b8794:	000b6e25 	.word	0x000b6e25
   b8798:	2003e578 	.word	0x2003e578

000b879c <__retarget_lock_acquire_recursive>:
   b879c:	4770      	bx	lr

000b879e <__retarget_lock_release>:
   b879e:	4770      	bx	lr

000b87a0 <__retarget_lock_release_recursive>:
   b87a0:	4770      	bx	lr

000b87a2 <link_code_end>:
	...

000b87a4 <dynalib_user>:
   b87a4:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b87b4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b87c4:	7620 7269 7574 6c61 3100 3000 6100 4200      virtual.1.0.a.B
   b87d4:	7475 6f74 206e 2041 6177 2073 7270 7365     utton A was pres
   b87e4:	6573 2e64 6200 4200 7475 6f74 206e 2042     sed..b.Button B 
   b87f4:	6177 2073 7270 7365 6573 2e64 4200 7475     was pressed..But
   b8804:	6f74 206e 2043 6177 2073 7270 7365 6573     ton C was presse
   b8814:	2e64 2500 0069 6c25 0069 6863 6972 7473     d..%i.%li.christ
   b8824:	6169 696e 7974 6900 006e 756f 0074 7770     ianity.in.out.pw
   b8834:	006d 7764 6100 0077 6863 6972 7473 6169     m.dw.aw.christia
   b8844:	696e 7974 6c2f 6465 6300 7268 7369 6974     nity/led.christi
   b8854:	6e61 7469 2f79 7562 7474 6e6f 4800 4c45     anity/button.HEL
   b8864:	4f4c 4a20 7365 7375 0021 6863 6972 7473     LO Jesus!.christ
   b8874:	6169 696e 7974 622f 7475 6f74 736e 4b00     ianity/buttons.K
   b8884:	3330 5575 4244 3270 6d66 7830 6261 5348     03uUDBp2fm0xabHS
   b8894:	6864 3266 6267 3076 4772 3073 7238 0066     dhf2gbv0rGs08rf.
   b88a4:	616c 2e62 6874 7765 6c63 632e 6d6f           lab.thewcl.com.

000b88b3 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b88b3:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b88c3:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b88d3:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b88e3:	6974 6c63 2065 7241 6f67 006e 7562 6c69     ticle Argon.buil
   b88f3:	0064 754a 206c 3620 3220 3230 2032 3331     d.Jul  6 2022 13
   b8903:	313a 3a33 3134 0000 6400 6665 7561 746c     :13:41...default
   b8913:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   b8923:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   b8933:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   b8943:	2075 7325 4d20 444f 2545 3e75                u %s MODE%u>.

000b8950 <_ZL4font>:
   b8950:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8960:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8970:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8980:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8990:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b89a0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b89b0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b89c0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b89d0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b89e0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b89f0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8a00:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8a10:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8a20:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8a30:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8a40:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8a50:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8a60:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8a70:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8a80:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8a90:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8aa0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8ab0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8ac0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8ad0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8ae0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8af0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8b00:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8b10:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8b20:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8b30:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8b40:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8b50:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8b60:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8b70:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8b80:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8b90:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8ba0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8bb0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8bc0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8bd0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8be0:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8bf0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8c00:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8c10:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8c20:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8c30:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8c40:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8c50:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8c60:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8c70:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8c80:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8c90:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8ca0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8cb0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8cc0:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b8cd0:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b8ce0:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8cf0:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8d00:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8d10:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8d20:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8d30:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8d40:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8d50:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8d60:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8d70:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8d80:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8d90:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8da0:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8db0:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8dc0:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8dd0:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8de0:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8df0:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8e00:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8e10:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8e20:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8e30:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8e40:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b8e50 <_ZTV12Adafruit_GFX>:
	...
   b8e60:	5429 000b 722d 000b 40a5 000b 4e2f 000b     )T..-r...@../N..
   b8e70:	4e31 000b 4e63 000b 4e3f 000b 4e51 000b     1N..cN..?N..QN..
   b8e80:	4d71 000b 4e2f 000b 505b 000b 5059 000b     qM../N..[P..YP..
   b8e90:	4e7b 000b 4eb9 000b 4ef3 000b 4f39 000b     {N...N...N..9O..
   b8ea0:	4f55 000b 4fd9 000b                         UO...O..

000b8ea8 <_ZTV16OledWingAdafruit>:
	...
   b8eb0:	5539 000b 5559 000b 5429 000b 722d 000b     9U..YU..)T..-r..
   b8ec0:	5fed 000b 4e2f 000b 4e31 000b 4e63 000b     ._../N..1N..cN..
   b8ed0:	4e3f 000b 4e51 000b 4d71 000b 4e2f 000b     ?N..QN..qM../N..
   b8ee0:	505b 000b 618b 000b 6733 000b 66e5 000b     [P...a..3g...f..
   b8ef0:	4ef3 000b 4f39 000b 4f55 000b 4fd9 000b     .N..9O..UO...O..
   b8f00:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.

000b8f10 <_ZTVN8particle11SPISettingsE>:
	...
   b8f18:	4d1d 000b 4cf1 000b 4cf3 000b               .M...L...L..

000b8f24 <_ZL12splash1_data>:
   b8f24:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b8f34:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b8f44:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b8f54:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b8f64:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b8f74:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b8f8c:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b8f9c:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b8fac:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b8fbc:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b8fcc:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b8fdc:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b8fec:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b8ffc:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b900c:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b901c:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b902c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b903c:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b904c:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b905c:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b906c:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b907c:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b908c:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b909c:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b90b4:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b90cc:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b90dc:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b90ec:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b90fc:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b910c:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b911c:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b912c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b913c:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b914c:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b915c:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b916c:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b917c:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b918c:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b919c:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b91ac:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b91bc:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b91cc:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b91dc:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b91e4 <_ZL12splash2_data>:
   b91e4:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b91f4:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b9204:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b9220:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b9230:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b9240:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b9250:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b9260:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9270:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b9280:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b9290:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b92a0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b92b0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b92c0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b92d0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b92e0:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b92f0:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b9300:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b9310:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b9320:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b9330:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b9340:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b9350:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b9360:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9378:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9388:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9398:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b93a8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b93b8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b93c4 <_ZTV16Adafruit_SSD1306>:
	...
   b93cc:	5fc1 000b 5fd9 000b 5429 000b 722d 000b     ._..._..)T..-r..
   b93dc:	5fed 000b 4e2f 000b 4e31 000b 4e63 000b     ._../N..1N..cN..
   b93ec:	4e3f 000b 4e51 000b 4d71 000b 4e2f 000b     ?N..QN..qM../N..
   b93fc:	505b 000b 618b 000b 6733 000b 66e5 000b     [P...a..3g...f..
   b940c:	4ef3 000b 4f39 000b 4f55 000b 4fd9 000b     .N..9O..UO...O..

000b941c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b941c:	8000 e0c0 f8f0 fefc                         ........

000b9424 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b9424:	0100 0703 1f0f 7f3f                         ......?.

000b942c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b942c:	d5ae a880                                   ....

000b9430 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9430:	00d3 8d40                                   ..@.

000b9434 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b9434:	0020 c8a1                                    ...

000b9438 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9438:	40db a6a4 af2e                              .@....

000b943e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b943e:	02da 8f81                                   ....

000b9442 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b9442:	12da                                         ...

000b9445 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b9445:	02da                                         ...

000b9448 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b9448:	0022 21ff 0000 0000                         "..!....

000b9450 <_ZL22BlynkReadHandlerVector>:
   b9450:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9460:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9470:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9480:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9490:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b94a0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b94b0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b94c0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b94d0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b94e0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b94f0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9500:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9510:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9520:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9530:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9540:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9550:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9560:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9570:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9580:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9590:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b95a0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b95b0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b95c0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b95d0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b95e0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b95f0:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9600:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9610:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9620:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9630:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..
   b9640:	68bd 000b 68bd 000b 68bd 000b 68bd 000b     .h...h...h...h..

000b9650 <_ZL23BlynkWriteHandlerVector>:
   b9650:	68bf 000b 42e9 000b 68bf 000b 68bf 000b     .h...B...h...h..
   b9660:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9670:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9680:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9690:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b96a0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b96b0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b96c0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b96d0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b96e0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b96f0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9700:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9710:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9720:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9730:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9740:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9750:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9760:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9770:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9780:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9790:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b97a0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b97b0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b97c0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b97d0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b97e0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b97f0:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9800:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9810:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9820:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9830:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..
   b9840:	68bf 000b 68bf 000b 68bf 000b 68bf 000b     .h...h...h...h..

000b9850 <_ZTVN5spark13EthernetClassE>:
	...
   b9858:	6f03 000b 6ef9 000b 6eef 000b 6ee5 000b     .o...n...n...n..
   b9868:	6ed9 000b 6ecd 000b 7f1d 000b 7f25 000b     .n...n......%...
   b9878:	6ec1 000b 6eb9 000b 6eaf 000b 6ea5 000b     .n...n...n...n..
   b9888:	7f55 000b                                   U...

000b988c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b988c:	0800 1810 2820 3830                         .... (08

000b9894 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b989c:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b98ac:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b98bc <_ZTV9IPAddress>:
	...
   b98c4:	7555 000b 7545 000b 7547 000b               Uu..Eu..Gu..

000b98d0 <_ZTV9USBSerial>:
	...
   b98d8:	767f 000b 76e7 000b 76bd 000b 722d 000b     .v...v...v..-r..
   b98e8:	76af 000b 7681 000b 7691 000b 76e1 000b     .v...v...v...v..
   b98f8:	76a1 000b 7679 000b                         .v..yv..

000b9900 <_ZTV11USARTSerial>:
	...
   b9908:	7779 000b 77e5 000b 77bd 000b 722d 000b     yw...w...w..-r..
   b9918:	778d 000b 77a9 000b 779b 000b 77b7 000b     .w...w...w...w..
   b9928:	777b 000b 777f 000b                         {w...w..

000b9930 <_ZTV7TwoWire>:
	...
   b9938:	781d 000b 7867 000b 783f 000b 781f 000b     .x..gx..?x...x..
   b9948:	7847 000b 784f 000b 7857 000b 785f 000b     Gx..Ox..Wx.._x..
   b9958:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b9968:	2072 203d 6425 0000                         r = %d..

000b9970 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9978:	794d 000b 7971 000b 7e5b 000b 797f 000b     My..qy..[~...y..
   b9988:	7951 000b                                   Qy..

000b998c <_ZTV9TCPClient>:
	...
   b9994:	73d5 000b 73ed 000b 78c9 000b 78e3 000b     .s...s...x...x..
   b99a4:	7cf1 000b 790d 000b 7b67 000b 7941 000b     .|...y..g{..Ay..
   b99b4:	7bf9 000b 7a39 000b 7b95 000b 7da5 000b     .{..9z...{...}..
   b99c4:	7b35 000b 7943 000b 78f5 000b 7985 000b     5{..Cy...x...y..
   b99d4:	7a19 000b                                   .z..

000b99d8 <_ZTVN5spark9WiFiClassE>:
	...
   b99e0:	7ebf 000b 7eb5 000b 7eab 000b 7e61 000b     .~...~...~..a~..
   b99f0:	7e9f 000b 7e93 000b 7f1d 000b 7f25 000b     .~...~......%...
   b9a00:	7e87 000b 7e7f 000b 7e75 000b 7e6b 000b     .~...~..u~..k~..
   b9a10:	7f55 000b                                   U...

000b9a14 <_ZTVN5spark12NetworkClassE>:
	...
   b9a1c:	7edd 000b 7ee7 000b 7ef1 000b 7efb 000b     .~...~...~...~..
   b9a2c:	7f05 000b 7f11 000b 7f1d 000b 7f25 000b     ............%...
   b9a3c:	7f2d 000b 7f39 000b 7f41 000b 7f4b 000b     -...9...A...K...
   b9a4c:	7f55 000b                                   U...

000b9a50 <_ZSt7nothrow>:
	...

000b9a51 <_ZTSSt19_Sp_make_shared_tag>:
   b9a51:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9a61:	6572 5f64 6174 0067 0000                     red_tag....

000b9a6c <_ZTISt19_Sp_make_shared_tag>:
   b9a6c:	9aac 000b 9a51 000b                         ....Q...

000b9a74 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9a74:	9b0c 000b 9a80 000b 9b30 000b               ........0...

000b9a80 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9a80:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9a90:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9aa0:	0045 0000                                   E...

000b9aa4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9aa4:	0000 0000 9a74 000b 82f9 000b 830d 000b     ....t...........
   b9ab4:	84a1 000b 84a1 000b 8377 000b 82b9 000b     ........w.......
   b9ac4:	835f 000b 8321 000b 82eb 000b               _...!.......

000b9ad0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9ad0:	9b0c 000b 9adc 000b 9a74 000b               ........t...

000b9adc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9adc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9aec:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9afc:	666e 456f 0000 0000                         nfoE....

000b9b04 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9b04:	0000 0000 9ad0 000b 83a1 000b 83b5 000b     ................
   b9b14:	84a1 000b 84a1 000b 8377 000b 82b9 000b     ........w.......
   b9b24:	8475 000b 8401 000b 83c9 000b               u...........

000b9b30 <_ZTISt9type_info>:
   b9b30:	9aac 000b 9b38 000b                         ....8...

000b9b38 <_ZTSSt9type_info>:
   b9b38:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9b48:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9b58:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b9b68:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b9b78:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b9b88:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9b98:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9ba8:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b9bb8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9bc8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b9bd9 <_ctype_>:
   b9bd9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9be9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9bf9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9c09:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9c19:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9c29:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9c39:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9c49:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9c59:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b9cda <link_const_variable_data_end>:
	...

000b9cdc <link_constructors_location>:
   b9cdc:	000b4c79 	.word	0x000b4c79
   b9ce0:	000b6f0d 	.word	0x000b6f0d
   b9ce4:	000b7085 	.word	0x000b7085
   b9ce8:	000b721d 	.word	0x000b721d
   b9cec:	000b73a9 	.word	0x000b73a9
   b9cf0:	000b73b9 	.word	0x000b73b9
   b9cf4:	000b7401 	.word	0x000b7401
   b9cf8:	000b7ec9 	.word	0x000b7ec9
   b9cfc:	000b802d 	.word	0x000b802d
